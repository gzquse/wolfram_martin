(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    866460,      17555]
NotebookOptionsPosition[    748771,      15275]
NotebookOutlinePosition[    814148,      16628]
CellTagsIndexPosition[    812388,      16566]
WindowTitle->Lists and Associations
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Lists and Associations", "Subtitle",ExpressionUUID->"52147f0d-afae-417a-9611-4dd2121f31ae"],

Cell[CellGroupData[{

Cell["Learning Objectives", "Section",ExpressionUUID->"bbfbec95-135c-42ef-b1e7-c417cab58df0"],

Cell["\<\
Discover the most common data structures in Wolfram Language and how they can \
be used.\
\>", "Text",ExpressionUUID->"9a20470e-bdee-4374-80f6-722ca43294af"],

Cell[CellGroupData[{

Cell["Lists", "Subsection",ExpressionUUID->"eb55bfd2-8039-4657-aac8-8881e8807bb5"],

Cell[TextData[{
 "A ",
 ButtonBox["List",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/List.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/List.html"],
 " is a collections of objects. Learn how to:"
}], "Text",ExpressionUUID->"715d8f68-4320-4f52-94a5-d48f4cae6769"],

Cell["Construct a list", "Item",ExpressionUUID->"7eec1bb4-9f0e-401c-b7cd-82d7ffed3ebb"],

Cell["Access elements in a list", "Item",ExpressionUUID->"6aa0fd41-453e-4835-8e1c-d9813fb8bf26"],

Cell["Modify a list", "Item",ExpressionUUID->"2daba185-8c90-4acf-925b-26b2877c41f6"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Associations ", "Subsection",ExpressionUUID->"75bdbcca-fce9-4299-ad59-022af4e2443d"],

Cell[TextData[{
 "An ",
 ButtonBox["Association",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Association.html"], None},
  
  ButtonNote->"https://reference.wolfram.com/language/ref/Association.html"],
 " is a dictionary data structure containing key-value pairs. Learn how to:"
}], "Text",ExpressionUUID->"2720beb0-747d-4cb8-aec4-e186e09035ff"],

Cell["Create an association ", "Item",ExpressionUUID->"678c0f46-f39a-4219-b4be-69cbd472c7b1"],

Cell["Work with the values of an association", "Item",ExpressionUUID->"811fde40-0067-458b-a43f-c873b97a4a83"],

Cell["Work with the keys of an association", "Item",ExpressionUUID->"540beff8-e370-41b4-b027-36dcd93ce778"],

Cell["Identify how an Association is used differently from a List", "Item",ExpressionUUID->"0d09a129-e221-42e4-85cf-fb51c9854319"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["List", "Section",ExpressionUUID->"12b90831-c18e-44df-b170-11c44b46acab"],

Cell["\<\
A List contains a sequence of Wolfram Language expressions enclosed within \
curly braces:\
\>", "Text",ExpressionUUID->"b65c2fdb-8351-4668-a98b-8ecff6aa033a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"{", 
   RowBox[{"a", ",", "42", ",", "3.14", ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 0, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0, 0],
     Editable->False,
     Selectable->False], ",", "\"\<hello\>\"", ",", " ", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["y", "3"]}]}], ",", 
    Graphics3DBox[
     {RGBColor[0, 1, 0], SphereBox[{0, 0, 0}]},
     ImageSize->{37.09619946984732, Automatic},
     ViewPoint->{1.3, -2.4, 2.},
     ViewVertical->{0., 0., 1.},
     ImageCache->GraphicsData["CompressedBitmap", "\<\
eJyVVmuIlFUYfp3buut+LaJT8P0aWJh/QjBbxJb0QWAFa+WPwv7UTjK7Y7G6
bUK1FX4KhT9EK6zAZd2Bsja6rLQlxmYTK24GW0YXyG5GVhqShVYoJqfnnPc9
5ztfTUozPOec71ze572dy8rqhnptqLph7Zpq6caR6nB97ZoHSivWj6Aru4CI
yholyqGt0PQKPZJURVNmS/V6nezvMq6WmDIfYai/VqsNDwwMTAJmqkxZbMo2
PSXGkK6tpIZ826mmypierJ3L3FzaPtMf8JpOU+Z88RqFZIVumFpWdPCQv4La
WYqdbqWwcGr7L71ElDbdecfMW8QL862VY0Xy/rKSeJBkZS7xuXPoQtPXHlEP
xQa9wHUUmf81ZtCJzDhVOjyBYkNKX2ZapCUquhboBa4HbgBuBlYBt1MTddzX
32fWefFwGbHQVzxlm2vzsk6mukroIuAW4E7gHuBeYB0wTCpcFza7B7uzTvV2
n6OYMsPnwa9JFcioCIc2YzUwAIwAo8Am4AlgC3jiUIWPhYq2SaoZspRBaVuN
d2mxJmQi67s+4G4xYFQItgHPAmPALpA9BbLtIHsGSm5xuf3k4OCgk1+4FPXl
kfNhr9D2i20xsFUoJ4CXgFeBPaCeAPWukL8b1Cg+UrSpqem179qYJZukn8nK
pC9oOmNvAu4C7gc2A9vFyBeB14G9wAzQhNYqfCWkvG5z/wsUpTbMRXjZ4mLk
eCOJ5hCwUXjHgUlgWjgPAIeAD0kFs4EqT5YVfYTv94G3IeFRas1tOliLK5hR
b4WVQE1CulWs1GxvAu8Cc8TSPwO+AOM8GPeA8St8fw58gKiMG6HOsrTB6ROE
6WO6Wnbhat4O9LiEdTfwhlBrIz9mWvoW+B5hPhiq8l7Q/4jv74wKMRzz/+iX
xiazdIyrwMOSyBMS2xmxWlMfAeUsMmsuVJXJiirPlNWy6WUq+CZQ9LNRK8b8
TItkzqe0aJHnSyMccIpuBeqS2zskw94CZsE8DeZ3wPx8RYWH0J5Hfp/G2B/A
n6Qqr1UU/Yb2D4h682JaZFrkHu/AJXwIDkkIdoJ1J1w8VlaV58C6D6xNsP6E
sVPA78BZ4DzwF7LhBLKhiXAchwYTjifl80uqEDSKq4oqHALtKGg3gXY8VME0
XDwv0Ufk6SSx8WcNNbYdasoqugCVP8Fhuq/bS/OCR2o6khYF2kON5XcsV+F9
4Nkc8BbDIULvSbJ/SZxhp8TZ5w0T+HKGj85Q3DPek5abojQm/utyZB/gPuqX
YwXupinhPUy8qbSrf+UAJ7wozyHEx4UjcleOezP49JS9DawP2euchzqa9CBE
PQ28DOwndu8Rkz+KfpHontOeveAYT/pi3SPCRrGQSnL7VColpLgQYznC9IFy
EPgUOAqcEDvPiI9PY+YxSYmcnyaaNH1r2FHfugjLj3bt6OLdMydEXwPHTDAx
Chzg6d6Dx20Vli3inC1eChdMKM2rZAyidgNTaE/5ry5719isb0sUju1bp9XV
1+lppV+aV6a3iDziss5oL9QpOR6fy4yMniGyUw9dkc3q51PRE7ezGd7TSnca
t/hPQa7yflScUrw2b9dapQxJFy8PEvfpV7NZ2kpdfm3/4wEvFS34G5XQ9Ss=
\
\>"]]}], "}"}]}]], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"97753dc8-ce27-4b13-9cc1-d946750eedc0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "42", ",", "3.14`", ",", 
   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
    "RGBColorSwatchTemplate"], ",", "\<\"hello\"\>", ",", 
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["y", "3"]}]}], ",", 
   Graphics3DBox[
    {RGBColor[0, 1, 0], SphereBox[{0, 0, 0}]},
    ImageSize->{37.09619946984732, 37.09619946984732},
    SphericalRegion->True,
    ViewAngle->0.5176274012586664,
    ViewPoint->{1.2963924913120952`, -0.4834630702326834, 3.0879815362451257`},
    ViewVertical->{-0.30197576620888544`, 0.4434825775326072, 
     0.8438802284966698}]}], "}"}]], "Output",
 CellLabel->"Out[1]=",ExpressionUUID->"6c9db102-7c41-4f2d-be06-acdf1a5e1ee1"]
}, Open  ]],

Cell["A List can be used as:", "Text",ExpressionUUID->"9a53704e-36fa-4578-8fdb-7cc6388fbb9b"],

Cell["A container of items", "Item",ExpressionUUID->"ddf0bdfe-13c7-44c5-a6e9-90f761983cf3"],

Cell["A set ", "Item",ExpressionUUID->"51c71ca4-2e0d-43ce-9493-3432f3f46583"],

Cell["A vector or matrix ", "Item",ExpressionUUID->"0bb5e064-9b01-40e8-9f35-f68f3ec41786"],

Cell["Below are a few examples showing:", "Text",ExpressionUUID->"98f0ce71-270c-4e01-b2aa-2481925eda60"],

Cell[CellGroupData[{

Cell["A list of variables/expressions:", "Item",ExpressionUUID->"29b5f8f3-0f19-417e-b0bd-9ee14b5e2ff4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]}]], "Input",
 CellLabel->"In[2]:=",ExpressionUUID->"8020e42a-914a-4c83-b1b5-813a469ccc5c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]], "Output",
 CellLabel->"Out[2]=",ExpressionUUID->"2ea9aa93-4e5b-4ec6-9a0a-418064bf1912"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
A set of colors. (Note: Wolfram Language has predefined symbols for colors.):\
\
\>", "Item",ExpressionUUID->"e3813c25-973f-4136-8b71-dde21e376fd2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"{", 
   RowBox[{"Red", ",", " ", "Blue", ",", " ", "Green"}], "}"}]}]], "Input",
 CellLabel->"In[3]:=",ExpressionUUID->"8041b079-32ba-4f25-b8e1-54828ba94f79"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
    "RGBColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> RGBColor[0, 0, 1]|>,
    "RGBColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> RGBColor[0, 1, 0]|>,
    "RGBColorSwatchTemplate"]}], "}"}]], "Output",
 CellLabel->"Out[3]=",ExpressionUUID->"d99224d5-95d5-42b7-acab-05b12a7dc7c8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A list of numbers:", "Item",ExpressionUUID->"08a2b787-47de-48b6-98f6-3358653f42b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"{", 
   RowBox[{"1", ",", "3.4", ",", 
    RowBox[{"-", "5"}], ",", "7.8"}], "}"}]}]], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"dc316ca4-2f5f-40e1-a0b7-8b8c1a7eecd2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3.4`", ",", 
   RowBox[{"-", "5"}], ",", "7.8`"}], "}"}]], "Output",
 CellLabel->"Out[4]=",ExpressionUUID->"5c6e2969-2eb3-430d-a4c5-0440d69bca15"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["A nested list representing a matrix of integers:", "Item",ExpressionUUID->"e6f7adf9-dc4d-45c8-be2b-e16d37856dfd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "}"}]}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"416c1848-46f2-4904-bb0b-72b7c75a3eb7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"5201441c-4ea0-47ed-8da8-ab8acc580947"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 ButtonBox["MatrixForm",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/MatrixForm.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/MatrixForm.html"],
 " can be used to display the matrix in the more commonly recognized format:"
}], "Text",
 CellTags->
  "MatrixForm",ExpressionUUID->"edd4ee20-0883-4420-9be4-0480aa5ec571"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"MatrixForm", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "4"}], "}"}]}], "}"}], " ", "]"}]}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"e01f2224-3e24-4540-a0c8-4ea07a00b823"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1", "2"},
     {"3", "4"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[6]//MatrixForm=",ExpressionUUID->"90024b65-7aef-45ff-a9a9-\
d5729d6da7f2"]
}, Open  ]],

Cell[CellGroupData[{

Cell["A collection of strings:", "Item",ExpressionUUID->"67a93e00-9161-429d-a6a2-a28a241b7fd4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"{", 
   RowBox[{"\"\<Alice\>\"", ",", "\"\<Bob\>\"", ",", "\"\<Charlie\>\""}], 
   "}"}]}]], "Input",
 CellLabel->"In[7]:=",ExpressionUUID->"7a9f437e-f21a-45b1-8881-8dd78ec38e38"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Alice\"\>", ",", "\<\"Bob\"\>", ",", "\<\"Charlie\"\>"}], 
  "}"}]], "Output",
 CellLabel->"Out[7]=",ExpressionUUID->"81f68805-600f-4ebb-81fe-446bf5c75635"]
}, Open  ]]
}, Open  ]],

Cell["\<\
Lists also play a special role as part of the Wolfram Language syntax for \
certain built-in functions.\
\>", "Text",ExpressionUUID->"89d18b3d-20a9-4c0d-a9e2-6e3c280b1212"],

Cell["Lists can be used:", "Text",ExpressionUUID->"57fd6e3c-f511-422c-9b74-ddcc97e64329"],

Cell[CellGroupData[{

Cell["To specify intervals for a graphical plot:", "Item",ExpressionUUID->"089c4e76-323c-42d2-877f-73649af75422"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"x", "^", "2"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "1", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"a81913cb-87b8-494b-9e2a-2ca6f7496549"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1:eJwV0vk71AkAx/FpUNkxGjWNMaYcX0eSXLnS9v0QRYcrx5e0WuVR2VYKT1u7
iTGIpCGSxJRx1MoWNl1bUuTIptrHVsr1IEQ7xjUhVj+8n9c/8NYJDvcKodNo
tB3zffPNyA5zGk1KuvRcCv5mneofqW4MKZme3c0t5EjJCmPWYO68x3uLGvxN
pOTZkFdX7eY1di3hjQZIyU1vfdlH51WxPXu897aULKsOmuytlJIvK/rMGyJG
SGFaxF9NB0bIXUTjyTOjMtLCJNP1wmsZGdYdIKIbTpA6P4bcYvSMk11HZbMe
o1/J+2mKS+Or5aQSQXPbrq8ACXOhZd7ZafKTnkmmwf1F0I0/V5B5cZbUf+5b
+daRiaKpyASXOzRQ1lvS246pQWja173OkY7dhfGji1vZUDmTpCV7qgC9N7bO
Noe4GAhJp26ZKCF9Q7VS5GI+WA/22HVULsT4ddLpFl8bqWlZnCW6ixE3Ju9a
b6mL8uSvr5ckKYPR3+zQ9oMedOhGdjEqDER1vhVpfjBA38T9HGm0Csi17nod
nkYYD10maZljYuqXQctirTUopeWmxsYuAXlCqj2paIpARp1dTiQLXqFiq4Qh
MyR5i2m/26jBNZ/PYiZaICiwrPbBsBrqaAaZXznrsOtqXrtSxVJMmW9wEb+z
gvGvxaFVkcugr/FkQWKJDQrZPZ8PGLHxsatj4VioHZw/0Rt3DrNxonT2gVqQ
Pc6d8inYKFkOMb0x4p7z9yi7Vj0k8uOgONgy46YFCRlLNZnPU4eewmfvvBtA
l3WafskLdTj7/ovaKgeM58jYYee5uEHznvPocsSH9J8js3w0wLs9NZev6oRw
15WvapR5iIi9ltZh6gzDjTcFBs08zCyQNMUe2YzkkSjLFIEminoGJOolW1Bt
672TsubjzsHO99EdLuA/ZD8LlPNRw4iZNlq/FQRd2S74xgooCLKih4Xb4B7f
MZsXsRLHtLpSLk9sh0HtQM37VVrgWsZ8DPJzQ8tFlcm491qg+QpdTe66w6M1
ibzpro2CZN7eYbEHVMnCuPzr2vD7zD0dEOiJ9rry8NVMHYgmHtOV1nghO/v5
+YFDOlAzZu0XzHihxJVmZ1Svg4I3mmKtJzvRqKGfqLhaF61O7xLled5wbNjr
vUeoC/PofNHhwz6Q1JT5S9t1MROWq//IwRfctsH5qwgc2lgUtcnID92vYFOf
Q6B+anVbpBKFvFXbOLtzCVDNjmt9lCn4n/QZH7lMwKlq30srJoUWo4MVmlcI
rH9Zt0jOpvDwVIZpeDGBtBWKVqf0KFxa22fIqSTQq75XlL+JgndyCndfMwHr
jHJPXhwFVmfmpPxvAqmezCLFBApNVuLW1BYCpOGRrf+dpuDYVXm+6jWBGm6A
oFZEwcy2ncV4R8CMXfBn1BUKKn1myuV9BO78pMHvraZQb2/fv7mfgEy8POKf
pxQEIudnbQMEEoc0OU/rKUxtCBAqDRNoadjsIWmh0J8hWOA/SuB57nLh/k4K
koHUzuExApMpwQEBPRSCyOxHcRMEYtLvxmzvp9A6WPpb6RcC13uF98ylFNJR
FegwTcDdYvqF3hgFt6zH9q0zBDyzjltx5RS+G2rihc0SKFdT/MSYoVDr0Ppl
bo5AuOSCdG6Owv9MgyVC
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1:eJwV0vk71AkAx/FpUNkxGjWNMaYcX0eSXLnS9v0QRYcrx5e0WuVR2VYKT1u7
iTGIpCGSxJRx1MoWNl1bUuTIptrHVsr1IEQ7xjUhVj+8n9c/8NYJDvcKodNo
tB3zffPNyA5zGk1KuvRcCv5mneofqW4MKZme3c0t5EjJCmPWYO68x3uLGvxN
pOTZkFdX7eY1di3hjQZIyU1vfdlH51WxPXu897aULKsOmuytlJIvK/rMGyJG
SGFaxF9NB0bIXUTjyTOjMtLCJNP1wmsZGdYdIKIbTpA6P4bcYvSMk11HZbMe
o1/J+2mKS+Or5aQSQXPbrq8ACXOhZd7ZafKTnkmmwf1F0I0/V5B5cZbUf+5b
+daRiaKpyASXOzRQ1lvS246pQWja173OkY7dhfGji1vZUDmTpCV7qgC9N7bO
Noe4GAhJp26ZKCF9Q7VS5GI+WA/22HVULsT4ddLpFl8bqWlZnCW6ixE3Ju9a
b6mL8uSvr5ckKYPR3+zQ9oMedOhGdjEqDER1vhVpfjBA38T9HGm0Csi17nod
nkYYD10maZljYuqXQctirTUopeWmxsYuAXlCqj2paIpARp1dTiQLXqFiq4Qh
MyR5i2m/26jBNZ/PYiZaICiwrPbBsBrqaAaZXznrsOtqXrtSxVJMmW9wEb+z
gvGvxaFVkcugr/FkQWKJDQrZPZ8PGLHxsatj4VioHZw/0Rt3DrNxonT2gVqQ
Pc6d8inYKFkOMb0x4p7z9yi7Vj0k8uOgONgy46YFCRlLNZnPU4eewmfvvBtA
l3WafskLdTj7/ovaKgeM58jYYee5uEHznvPocsSH9J8js3w0wLs9NZev6oRw
15WvapR5iIi9ltZh6gzDjTcFBs08zCyQNMUe2YzkkSjLFIEminoGJOolW1Bt
672TsubjzsHO99EdLuA/ZD8LlPNRw4iZNlq/FQRd2S74xgooCLKih4Xb4B7f
MZsXsRLHtLpSLk9sh0HtQM37VVrgWsZ8DPJzQ8tFlcm491qg+QpdTe66w6M1
ibzpro2CZN7eYbEHVMnCuPzr2vD7zD0dEOiJ9rry8NVMHYgmHtOV1nghO/v5
+YFDOlAzZu0XzHihxJVmZ1Svg4I3mmKtJzvRqKGfqLhaF61O7xLled5wbNjr
vUeoC/PofNHhwz6Q1JT5S9t1MROWq//IwRfctsH5qwgc2lgUtcnID92vYFOf
Q6B+anVbpBKFvFXbOLtzCVDNjmt9lCn4n/QZH7lMwKlq30srJoUWo4MVmlcI
rH9Zt0jOpvDwVIZpeDGBtBWKVqf0KFxa22fIqSTQq75XlL+JgndyCndfMwHr
jHJPXhwFVmfmpPxvAqmezCLFBApNVuLW1BYCpOGRrf+dpuDYVXm+6jWBGm6A
oFZEwcy2ncV4R8CMXfBn1BUKKn1myuV9BO78pMHvraZQb2/fv7mfgEy8POKf
pxQEIudnbQMEEoc0OU/rKUxtCBAqDRNoadjsIWmh0J8hWOA/SuB57nLh/k4K
koHUzuExApMpwQEBPRSCyOxHcRMEYtLvxmzvp9A6WPpb6RcC13uF98ylFNJR
FegwTcDdYvqF3hgFt6zH9q0zBDyzjltx5RS+G2rihc0SKFdT/MSYoVDr0Ppl
bo5AuOSCdG6Owv9MgyVC
              "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{1, 10}, {0., 99.99999632653065}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {1.0000000000000022`, 0}, 
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
           "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
           "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, 
          "PlotRange" -> {{1, 10}, {0., 99.99999632653065}}, 
          "Frame" -> {{False, False}, {False, False}}, 
          "AxesOrigin" -> {1.0000000000000022`, 0}, 
          "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1:eJwV0vk71AkAx/FpUNkxGjWNMaYcX0eSXLnS9v0QRYcrx5e0WuVR2VYKT1u7
iTGIpCGSxJRx1MoWNl1bUuTIptrHVsr1IEQ7xjUhVj+8n9c/8NYJDvcKodNo
tB3zffPNyA5zGk1KuvRcCv5mneofqW4MKZme3c0t5EjJCmPWYO68x3uLGvxN
pOTZkFdX7eY1di3hjQZIyU1vfdlH51WxPXu897aULKsOmuytlJIvK/rMGyJG
SGFaxF9NB0bIXUTjyTOjMtLCJNP1wmsZGdYdIKIbTpA6P4bcYvSMk11HZbMe
o1/J+2mKS+Or5aQSQXPbrq8ACXOhZd7ZafKTnkmmwf1F0I0/V5B5cZbUf+5b
+daRiaKpyASXOzRQ1lvS246pQWja173OkY7dhfGji1vZUDmTpCV7qgC9N7bO
Noe4GAhJp26ZKCF9Q7VS5GI+WA/22HVULsT4ddLpFl8bqWlZnCW6ixE3Ju9a
b6mL8uSvr5ckKYPR3+zQ9oMedOhGdjEqDER1vhVpfjBA38T9HGm0Csi17nod
nkYYD10maZljYuqXQctirTUopeWmxsYuAXlCqj2paIpARp1dTiQLXqFiq4Qh
MyR5i2m/26jBNZ/PYiZaICiwrPbBsBrqaAaZXznrsOtqXrtSxVJMmW9wEb+z
gvGvxaFVkcugr/FkQWKJDQrZPZ8PGLHxsatj4VioHZw/0Rt3DrNxonT2gVqQ
Pc6d8inYKFkOMb0x4p7z9yi7Vj0k8uOgONgy46YFCRlLNZnPU4eewmfvvBtA
l3WafskLdTj7/ovaKgeM58jYYee5uEHznvPocsSH9J8js3w0wLs9NZev6oRw
15WvapR5iIi9ltZh6gzDjTcFBs08zCyQNMUe2YzkkSjLFIEminoGJOolW1Bt
672TsubjzsHO99EdLuA/ZD8LlPNRw4iZNlq/FQRd2S74xgooCLKih4Xb4B7f
MZsXsRLHtLpSLk9sh0HtQM37VVrgWsZ8DPJzQ8tFlcm491qg+QpdTe66w6M1
ibzpro2CZN7eYbEHVMnCuPzr2vD7zD0dEOiJ9rry8NVMHYgmHtOV1nghO/v5
+YFDOlAzZu0XzHihxJVmZ1Svg4I3mmKtJzvRqKGfqLhaF61O7xLled5wbNjr
vUeoC/PofNHhwz6Q1JT5S9t1MROWq//IwRfctsH5qwgc2lgUtcnID92vYFOf
Q6B+anVbpBKFvFXbOLtzCVDNjmt9lCn4n/QZH7lMwKlq30srJoUWo4MVmlcI
rH9Zt0jOpvDwVIZpeDGBtBWKVqf0KFxa22fIqSTQq75XlL+JgndyCndfMwHr
jHJPXhwFVmfmpPxvAqmezCLFBApNVuLW1BYCpOGRrf+dpuDYVXm+6jWBGm6A
oFZEwcy2ncV4R8CMXfBn1BUKKn1myuV9BO78pMHvraZQb2/fv7mfgEy8POKf
pxQEIudnbQMEEoc0OU/rKUxtCBAqDRNoadjsIWmh0J8hWOA/SuB57nLh/k4K
koHUzuExApMpwQEBPRSCyOxHcRMEYtLvxmzvp9A6WPpb6RcC13uF98ylFNJR
FegwTcDdYvqF3hgFt6zH9q0zBDyzjltx5RS+G2rihc0SKFdT/MSYoVDr0Ppl
bo5AuOSCdG6Owv9MgyVC
          "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PanelPlotLayout" -> <||>, 
       "PlotRange" -> {{1, 10}, {0., 99.99999632653065}}, 
       "Frame" -> {{False, False}, {False, False}}, 
       "AxesOrigin" -> {1.0000000000000022`, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{1.0000000000000022`, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{1, 10}, {0., 99.99999632653065}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"8d9f6d63-9a19-4097-bcdf-116bcb26bbc0"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["To create iterators in repetitive evaluations:", "Item",ExpressionUUID->"c554d627-e748-498b-8c40-91990286f6d8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"Do", "[", 
   RowBox[{
    RowBox[{"Print", "[", 
     RowBox[{"n", "^", "2"}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "4", ",", "8"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"0f9ad749-4542-4648-bf0b-0be8820a8f86"],

Cell[CellGroupData[{

Cell[BoxData["16"], "Print",
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"9cb65d6a-06d7-4690-912e-4127e6588fec"],

Cell[BoxData["25"], "Print",
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"bf5fda93-2da1-4d9e-925d-b4ceccd83bb8"],

Cell[BoxData["36"], "Print",
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"e7564ded-d00d-4e7d-93b8-47f09fcdc9e5"],

Cell[BoxData["49"], "Print",
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"2011bf0f-faee-4ffc-8f5d-1cb3a6c6e8ab"],

Cell[BoxData["64"], "Print",
 CellLabel->
  "During evaluation of \
In[9]:=",ExpressionUUID->"58f5362b-564d-4026-a90d-a560787ef9b3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell["In many other places in the Wolfram Language syntax.", "Item",ExpressionUUID->"25af96e3-e58e-4063-8eea-c2ca9e938184"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "CYUButton"], 
          TextCell[#, "CYUButton" <> "Active"]]& )[
          Framed[
           Style["Check Your Understanding", "CYUButton"], RoundingRadius -> 
           5, FrameMargins -> {{18, 18}, {15, 15}}, ImageSize -> {205, 51}, 
           BaseStyle -> "Text"]], (WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         Framed[
          Column[{
            TextCell[
            "Which of the following is a List in the Wolfram Language?", 
             "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "[a, b, c]", "info" -> 
                    "Square brackets cannot be used to represent a List.", 
                    "index" -> 1, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "[a, b, c]", "info" -> 
                    "Square brackets cannot be used to represent a List.", 
                    "index" -> 1, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "[a, b, c]", "info" -> 
                    "Square brackets cannot be used to represent a List.", 
                    "index" -> 1, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "[a, b, c]", "info" -> 
                    "Square brackets cannot be used to represent a List.", 
                    "index" -> 1, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "[a, b, c]", "info" -> 
                    "Square brackets cannot be used to represent a List.", 
                    "index" -> 1, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "[a, b, c]", "info" -> 
                    "Square brackets cannot be used to represent a List.", 
                    "index" -> 1, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "{a, b, c}", "info" -> 
                    "Correct. A List is enclosed in curly braces.", "index" -> 
                    2, "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "{a, b, c}", "info" -> 
                    "Correct. A List is enclosed in curly braces.", "index" -> 
                    2, "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "{a, b, c}", "info" -> 
                    "Correct. A List is enclosed in curly braces.", "index" -> 
                    2, "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "{a, b, c}", "info" -> 
                    "Correct. A List is enclosed in curly braces.", "index" -> 
                    2, "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "{a, b, c}", "info" -> 
                    "Correct. A List is enclosed in curly braces.", "index" -> 
                    2, "correct" -> True|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "{a, b, c}", "info" -> 
                    "Correct. A List is enclosed in curly braces.", "index" -> 
                    2, "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|"statement" -> "(a, b, c)", "info" -> 
                    "Parentheses are for organizing or clarifying order of \
mathematical operations.", "index" -> 3, "correct" -> False|>["statement"], 
                    "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "(a, b, c)", "info" -> 
                    "Parentheses are for organizing or clarifying order of \
mathematical operations.", "index" -> 3, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "(a, b, c)", "info" -> 
                    "Parentheses are for organizing or clarifying order of \
mathematical operations.", "index" -> 3, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "(a, b, c)", "info" -> 
                    "Parentheses are for organizing or clarifying order of \
mathematical operations.", "index" -> 3, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "(a, b, c)", "info" -> 
                    "Parentheses are for organizing or clarifying order of \
mathematical operations.", "index" -> 3, "correct" -> False|>["info"], "Text",
                     FontColor -> If[
                    <|
                    "statement" -> "(a, b, c)", "info" -> 
                    "Parentheses are for organizing or clarifying order of \
mathematical operations.", "index" -> 3, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 4 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "[[a, b, c]]", "info" -> 
                    "While double-square brackets are valid Wolfram Language \
syntax, they are used for a different purpose.", "index" -> 4, "correct" -> 
                    False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "[[a, b, c]]", "info" -> 
                    "While double-square brackets are valid Wolfram Language \
syntax, they are used for a different purpose.", "index" -> 4, "correct" -> 
                    False|>["index"], {}, 
                    <|
                    "statement" -> "[[a, b, c]]", "info" -> 
                    "While double-square brackets are valid Wolfram Language \
syntax, they are used for a different purpose.", "index" -> 4, "correct" -> 
                    False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "[[a, b, c]]", "info" -> 
                    "While double-square brackets are valid Wolfram Language \
syntax, they are used for a different purpose.", "index" -> 4, "correct" -> 
                    False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "[[a, b, c]]", "info" -> 
                    "While double-square brackets are valid Wolfram Language \
syntax, they are used for a different purpose.", "index" -> 4, "correct" -> 
                    False|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "[[a, b, c]]", "info" -> 
                    "While double-square brackets are valid Wolfram Language \
syntax, they are used for a different purpose.", "index" -> 4, "correct" -> 
                    False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}]}], 
          FrameStyle -> Directive[
            GrayLevel[0.92], 
            Thickness[Large]], RoundingRadius -> 0, Background -> 
          GrayLevel[0.97], FrameMargins -> 15]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1079., {110.44827270507812`, 117.68069458007812`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"9fffdc5e-2ce1-4ba0-b064-\
12e56b0168c3"]], "Text",
 CellTags->"CYU",ExpressionUUID->"e114e000-fe25-474c-ae32-4f8ef871afb0"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Constructing Lists", "Section",ExpressionUUID->"f0da0be2-be51-4956-8266-fd0d20a4b407"],

Cell["\<\
There are a number of built-in functions to create lists quickly.\
\>", "Text",ExpressionUUID->"2c692a45-75b0-4a16-bd6f-91a15442b94c"],

Cell[CellGroupData[{

Cell["Range", "Subsection",ExpressionUUID->"3c0c2012-6f46-48fe-9fc5-473f5d18f60c"],

Cell[TextData[{
 ButtonBox["Range",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Range.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Range.html"],
 " is a simple way to construct a list of numbers:"
}], "Text",
 CellTags->"Range",ExpressionUUID->"c2b1e173-1401-4d3b-b9b4-f1f6b053ee63"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", "10", "]"}]], "Input",
 CellLabel->"In[10]:=",ExpressionUUID->"af67228c-bb27-4273-a053-8656797f99f7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellLabel->"Out[10]=",ExpressionUUID->"f74a190f-9b00-44d3-8432-82e5778ec57f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Table", "Subsection",ExpressionUUID->"20cbdc1c-7c7e-484e-b790-209056093dcd"],

Cell[TextData[{
 ButtonBox["Table",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Table.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Table.html"],
 " is a more generic function to create lists:"
}], "Text",
 CellTags->"Table",ExpressionUUID->"545a1a3a-8223-4d15-96f2-412e19755db4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{"i", ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "1", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[12]:=",ExpressionUUID->"97070862-24bc-4c86-9d95-a90c25dc3a53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellLabel->"Out[12]=",ExpressionUUID->"daf0e838-6d87-41fa-a5ed-d1dd6ae407c2"]
}, Open  ]],

Cell["\<\
It can be used to create many different types of lists by simply changing the \
expression used as its first argument:\
\>", "Text",ExpressionUUID->"94e90c23-8022-436a-901c-991c451a7074"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   SuperscriptBox["i", "2"], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "2", ",", "12", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[14]:=",ExpressionUUID->"93f00c73-88a6-4519-979f-8c8b8b313609"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "25", ",", "64", ",", "121"}], "}"}]], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"29057847-9726-4c2d-924f-0afb489dc912"]
}, Open  ]],

Cell[CellGroupData[{

Cell["More examples using Table", "Subsubsection",ExpressionUUID->"208341be-a6ea-4ca2-94b2-10665fe79cd9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"PieChart", "[", 
    RowBox[{"Range", "[", "i", "]"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"0dd84942-a534-4b32-8c47-eb310239c0ac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{DynamicChart`click$8321$8478 = False}, {
       {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[
        0.5]}], {{{}, 
          {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{GrayLevel[0], 
           Opacity[0.5]}], 
           TagBox[GeometricTransformationBox[
             TagBox[
              TagBox[
               TooltipBox[
                TagBox[
                 TagBox[
                  DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 
                    3.141592653589793}]},
                   
                   ImageSizeCache->{{16., 164.}, {-76.865966796875, 
                    71.134033203125}}],
                  "DelayedMouseEffectStyle"],
                 StatusArea[#, 1]& ,
                 TagBoxNote->"1"],
                StyleBox["1", {}, StripOnInput -> False]],
               Annotation[#, 
                Style[1, {}], "Tooltip"]& ],
              
              EventHandlerTag[{
               "MouseClicked" :> FEPrivate`Set[DynamicChart`click$8321$8478, 
                  FEPrivate`Not[DynamicChart`click$8321$8478]], 
                PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                True}]], Dynamic[
             FEPrivate`If[
              DynamicChart`click$8321$8478, {{{1., 0.}, {0., 1.}}, {0.2, 
                0.}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
              TrackedSymbols :> {DynamicChart`click$8321$8478}]],
            "DelayedClickEffect"]}}, {}}, {}}, {{
         TagBox[GeometricTransformationBox[
           TagBox[
            TagBox[
             TooltipBox[
              TagBox[{{}, {}},
               StatusArea[#, 1]& ,
               TagBoxNote->"1"],
              StyleBox["1", {}, StripOnInput -> False]],
             Annotation[#, 
              Style[1, {}], "Tooltip"]& ],
            
            EventHandlerTag[{
             "MouseClicked" :> FEPrivate`Set[DynamicChart`click$8321$8478, 
                FEPrivate`Not[DynamicChart`click$8321$8478]], PassEventsDown -> 
              True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
           FEPrivate`If[
            DynamicChart`click$8321$8478, {{{1., 0.}, {0., 1.}}, {0.2, 
              0.}}, {{1, 0}, {0, 1}}, {{1, 0}, {0, 1}}], 
            TrackedSymbols :> {DynamicChart`click$8321$8478}]],
          "DelayedClickEffect"], {}}, {}}, {}, {}},
      DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
    ContentSelectable->False,
    DisplayFunction->Identity,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{-1., 1.}, {-1., 1.}},
    PlotRangePadding->Scaled[0.09166666666666669]], ",", 
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{DynamicChart`click$8375$8479 = False, 
      DynamicChart`click$8381$8479 = False}, {
       {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[0.5]}], {{{}, {
           {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{GrayLevel[0], 
            Opacity[0.5]}], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[
                  TagBox[
                   DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {1.0471975511965979`, 
                    3.141592653589793}]},
                    
                    ImageSizeCache->{{15.792893218813447`, 
                    127.45710678118654`}, {-77.07307357806154, \
-2.1588600156884468`}}],
                   "DelayedMouseEffectStyle"],
                  StatusArea[#, 1]& ,
                  TagBoxNote->"1"],
                 StyleBox["1", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[1, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$8375$8479, 
                   FEPrivate`Not[DynamicChart`click$8375$8479]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$8375$8479, {{{1., 0.}, {0., 
                 1.}}, {-0.10000000000000005`, 0.17320508075688773`}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$8375$8479}]],
             "DelayedClickEffect"]}, 
           {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{GrayLevel[0], 
            Opacity[0.5]}], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[
                  TagBox[
                   DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 
                    1.0471975511965979`}]},
                    
                    ImageSizeCache->{{15.792893218813447`, 
                    164.20710678118655`}, {-67.2259407562178, 
                    71.34113998431155}}],
                   "DelayedMouseEffectStyle"],
                  StatusArea[#, 2]& ,
                  TagBoxNote->"2"],
                 StyleBox["2", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[2, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$8381$8479, 
                   FEPrivate`Not[DynamicChart`click$8381$8479]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$8381$8479, {{{1., 0.}, {0., 1.}}, {
                 0.10000000000000003`, -0.17320508075688773`}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$8381$8479}]],
             "DelayedClickEffect"]}}}, {}}, {}}, {{{
          TagBox[GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {}},
                StatusArea[#, 1]& ,
                TagBoxNote->"1"],
               StyleBox["1", {}, StripOnInput -> False]],
              Annotation[#, 
               Style[1, {}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$8375$8479, 
                 FEPrivate`Not[DynamicChart`click$8375$8479]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
            FEPrivate`If[
             DynamicChart`click$8375$8479, {{{1., 0.}, {0., 
               1.}}, {-0.10000000000000005`, 0.17320508075688773`}}, {{1, 
              0}, {0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$8375$8479}]],
           "DelayedClickEffect"], 
          TagBox[GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {}},
                StatusArea[#, 2]& ,
                TagBoxNote->"2"],
               StyleBox["2", {}, StripOnInput -> False]],
              Annotation[#, 
               Style[2, {}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$8381$8479, 
                 FEPrivate`Not[DynamicChart`click$8381$8479]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
            FEPrivate`If[
             DynamicChart`click$8381$8479, {{{1., 0.}, {0., 1.}}, {
               0.10000000000000003`, -0.17320508075688773`}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$8381$8479}]],
           "DelayedClickEffect"]}, {}}, {}}, {}, {}},
      DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
    ContentSelectable->False,
    DisplayFunction->Identity,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{-1., 1.}, {-1., 1.}},
    PlotRangePadding->Scaled[0.09166666666666669]], ",", 
   GraphicsBox[{{}, {}, 
     DynamicModuleBox[{DynamicChart`click$8429$8480 = False, 
      DynamicChart`click$8435$8480 = False, DynamicChart`click$8441$8480 = 
      False}, {
       {RGBColor[0.5, 0.5, 1.], EdgeForm[{GrayLevel[0], Opacity[0.5]}], {{{}, {
           {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{GrayLevel[0], 
            Opacity[0.5]}], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[
                  TagBox[
                   DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    
                    DiskBox[{0, 0}, 1., {2.0943951023931957`, 
                    3.141592653589793}]},
                    
                    ImageSizeCache->{{15.792893218813447`, 
                    90.70710678118654}, {-67.22594075621777, \
-2.1588600156884468`}}],
                   "DelayedMouseEffectStyle"],
                  StatusArea[#, 1]& ,
                  TagBoxNote->"1"],
                 StyleBox["1", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[1, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$8429$8480, 
                   FEPrivate`Not[DynamicChart`click$8429$8480]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$8429$8480, {{{1., 0.}, {0., 
                 1.}}, {-0.17320508075688776`, 0.09999999999999999}}, {{1, 
                0}, {0, 1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$8429$8480}]],
             "DelayedClickEffect"]}, 
           {RGBColor[0.784, 0.47519999999999996`, 0.2], EdgeForm[{GrayLevel[
            0], Opacity[0.5]}], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[
                  TagBox[
                   DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    DiskBox[{0, 0}, 1., {0., 2.0943951023931957`}]},
                    
                    ImageSizeCache->{{52.54289321881343, 
                    164.20710678118655`}, {-77.07307357806154, \
-2.1588600156884468`}}],
                   "DelayedMouseEffectStyle"],
                  StatusArea[#, 2]& ,
                  TagBoxNote->"2"],
                 StyleBox["2", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[2, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$8435$8480, 
                   FEPrivate`Not[DynamicChart`click$8435$8480]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$8435$8480, {{{1., 0.}, {0., 1.}}, {
                 0.09999999999999998, 0.17320508075688776`}}, {{1, 0}, {0, 
                1}}, {{1, 0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$8435$8480}]],
             "DelayedClickEffect"]}, 
           {RGBColor[0.4992, 0.5552, 0.8309304], EdgeForm[{GrayLevel[0], 
            Opacity[0.5]}], 
            TagBox[GeometricTransformationBox[
              TagBox[
               TagBox[
                TooltipBox[
                 TagBox[
                  TagBox[
                   DynamicBox[{
                    FEPrivate`If[
                    CurrentValue["MouseOver"], 
                    EdgeForm[{
                    GrayLevel[0.5], 
                    AbsoluteThickness[2.5], 
                    Opacity[0.66]}], {}, {}], 
                    DiskBox[{0, 0}, 1., {-3.141592653589793, 0.}]},
                    
                    ImageSizeCache->{{15.792893218813447`, 
                    164.20710678118655`}, {-3.573073578061539, 
                    71.34113998431155}}],
                   "DelayedMouseEffectStyle"],
                  StatusArea[#, 3]& ,
                  TagBoxNote->"3"],
                 StyleBox["3", {}, StripOnInput -> False]],
                Annotation[#, 
                 Style[3, {}], "Tooltip"]& ],
               
               EventHandlerTag[{
                "MouseClicked" :> 
                 FEPrivate`Set[DynamicChart`click$8441$8480, 
                   FEPrivate`Not[DynamicChart`click$8441$8480]], 
                 PassEventsDown -> True, Method -> "Preemptive", PassEventsUp -> 
                 True}]], Dynamic[
              FEPrivate`If[
               DynamicChart`click$8441$8480, {{{1., 0.}, {0., 1.}}, {
                 1.2246467991473533`*^-17, -0.2}}, {{1, 0}, {0, 1}}, {{1, 
                0}, {0, 1}}], 
               TrackedSymbols :> {DynamicChart`click$8441$8480}]],
             "DelayedClickEffect"]}}}, {}}, {}}, {{{
          TagBox[GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {}},
                StatusArea[#, 1]& ,
                TagBoxNote->"1"],
               StyleBox["1", {}, StripOnInput -> False]],
              Annotation[#, 
               Style[1, {}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$8429$8480, 
                 FEPrivate`Not[DynamicChart`click$8429$8480]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
            FEPrivate`If[
             DynamicChart`click$8429$8480, {{{1., 0.}, {0., 
               1.}}, {-0.17320508075688776`, 0.09999999999999999}}, {{1, 0}, {
              0, 1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$8429$8480}]],
           "DelayedClickEffect"], 
          TagBox[GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {}},
                StatusArea[#, 2]& ,
                TagBoxNote->"2"],
               StyleBox["2", {}, StripOnInput -> False]],
              Annotation[#, 
               Style[2, {}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$8435$8480, 
                 FEPrivate`Not[DynamicChart`click$8435$8480]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
            FEPrivate`If[
             DynamicChart`click$8435$8480, {{{1., 0.}, {0., 1.}}, {
               0.09999999999999998, 0.17320508075688776`}}, {{1, 0}, {0, 
              1}}, {{1, 0}, {0, 1}}], 
             TrackedSymbols :> {DynamicChart`click$8435$8480}]],
           "DelayedClickEffect"], 
          TagBox[GeometricTransformationBox[
            TagBox[
             TagBox[
              TooltipBox[
               TagBox[{{}, {}},
                StatusArea[#, 3]& ,
                TagBoxNote->"3"],
               StyleBox["3", {}, StripOnInput -> False]],
              Annotation[#, 
               Style[3, {}], "Tooltip"]& ],
             
             EventHandlerTag[{
              "MouseClicked" :> FEPrivate`Set[DynamicChart`click$8441$8480, 
                 FEPrivate`Not[DynamicChart`click$8441$8480]], PassEventsDown -> 
               True, Method -> "Preemptive", PassEventsUp -> True}]], Dynamic[
            FEPrivate`If[
             DynamicChart`click$8441$8480, {{{1., 0.}, {0., 1.}}, {
               1.2246467991473533`*^-17, -0.2}}, {{1, 0}, {0, 1}}, {{1, 0}, {
              0, 1}}], TrackedSymbols :> {DynamicChart`click$8441$8480}]],
           "DelayedClickEffect"]}, {}}, {}}, {}, {}},
      DynamicModuleValues:>{}], {{}, {}}, {{{}, {}, {}, {}}, {}}},
    ContentSelectable->False,
    DisplayFunction->Identity,
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    PlotRange->{{-1., 1.}, {-1., 1.}},
    PlotRangePadding->Scaled[0.09166666666666669]]}], "}"}]], "Output",
 CellLabel->"Out[15]=",ExpressionUUID->"cc1fcd54-f968-4c31-982c-b4efc2739f58"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"StringJoin", "[", 
    RowBox[{"\"\<Hello \>\"", ",", "i"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", 
     RowBox[{"{", 
      RowBox[{"\"\<Alice\>\"", ",", "\"\<Bob\>\"", ",", "\"\<Charles\>\""}], 
      "}"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"99468b43-2903-4da5-8e4a-5ac12af1539b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Hello Alice\"\>", ",", "\<\"Hello Bob\"\>", 
   ",", "\<\"Hello Charles\"\>"}], "}"}]], "Output",
 CellLabel->"Out[16]=",ExpressionUUID->"b140f132-2e40-47e8-bc36-37c412bf92cc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"Pi", "/", "3"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"f", ",", 
     RowBox[{"{", 
      RowBox[{"Sin", ",", "Cos", ",", "Tan"}], "}"}]}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"e2d880a7-bce1-42ad-b615-0ad781861338"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox[
    SqrtBox["3"], "2"], ",", 
   FractionBox["1", "2"], ",", 
   SqrtBox["3"]}], "}"}]], "Output",
 CellLabel->"Out[17]=",ExpressionUUID->"b35d1a3b-9938-4939-9858-45cb7390c79e"]
}, Open  ]],

Cell["Table can also be used to create nested lists:", "Text",ExpressionUUID->"8ee5f473-91aa-47ec-b16c-1eec06a01f51"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"i", "+", "j"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[175]:=",ExpressionUUID->"8da19e9d-45ed-498a-8661-c8b711761110"],

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"i", ",", "j"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"i", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"j", ",", 
     RowBox[{"i", "-", "1"}], ",", 
     RowBox[{"i", "+", "2"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"9f26414b-f84a-4cbd-806f-cd053979a898"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["RandomInteger and RandomReal", "Subsection",ExpressionUUID->"0be55533-3828-4e5d-b4ce-48abec220c7a"],

Cell[TextData[{
 ButtonBox["RandomInteger",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/RandomInteger.html"], 
    None},
  ButtonNote->"https://reference.wolfram.com/language/ref/RandomInteger.html"],
 " or ",
 ButtonBox["RandomReal",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/RandomReal.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/RandomReal.html"],
 " can be used to generate a list of random numbers:"
}], "Text",
 CellTags->{
  "RandomInteger", 
   "RandomReal"},ExpressionUUID->"8d819bb0-46c3-442b-be9e-fdc714fe4d47"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomInteger", "[", 
  RowBox[{"10", ",", "5"}], "]"}]], "Input",
 CellLabel->"In[18]:=",ExpressionUUID->"33f8b8a3-b1e0-422e-85ff-e582afe801fc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "9", ",", "9", ",", "4", ",", "9"}], "}"}]], "Output",
 CellLabel->"Out[18]=",ExpressionUUID->"6a02c135-19e3-4891-b329-5ec632d5b09f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"RandomReal", "[", 
  RowBox[{"1.0", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"4cd58898-8d49-4c95-be2e-3966661cadcd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "0.6960657586920187`", ",", "0.3679865378678375`", ",", 
     "0.8995817053563087`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "0.38191781709026196`", ",", "0.33105714327962654`", ",", 
     "0.3184058733917794`"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[19]=",ExpressionUUID->"14cf4e60-8d2d-49fa-945d-be9204130097"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["ConstantArray", "Subsection",ExpressionUUID->"efd661b9-c6c2-4de2-8202-8fbd3106870b"],

Cell[TextData[{
 ButtonBox["ConstantArray",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/ConstantArray.html"], 
    None},
  ButtonNote->"https://reference.wolfram.com/language/ref/ConstantArray.html"],
 " generates a list of multiple copies of the same constant value:"
}], "Text",
 CellTags->
  "ConstantArray",ExpressionUUID->"39b0a469-a9ae-4eea-bd87-9aca7c8ec760"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ConstantArray", "[", 
  RowBox[{"0", ",", "10"}], "]"}]], "Input",
 CellLabel->"In[20]:=",ExpressionUUID->"18a1ef25-02e6-434f-939a-91ceecaf9fb0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", 
   ",", "0", ",", "0"}], "}"}]], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"261f3281-96b4-44c5-88f4-e32c6c4c18b0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", 
  RowBox[{"ConstantArray", "[", 
   RowBox[{"x", ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}]}], "]"}], "]"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"0465da71-f270-4867-b76d-82eeae386d1c"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"x", "x", "x", "x"},
     {"x", "x", "x", "x"},
     {"x", "x", "x", "x"}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[21]//MatrixForm=",ExpressionUUID->"19fc76b6-273c-4789-98f3-\
699864ab08d1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["More Functions That Make Lists", "Subsection",ExpressionUUID->"fab55048-57d8-431c-865f-7489ee5b3ccb"],

Cell[TextData[{
 "This guide page on ",
 ButtonBox["Constructing Lists",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/guide/ConstructingLists.html"]\
, None},
  ButtonNote->
   "https://reference.wolfram.com/language/guide/ConstructingLists.html"],
 " provides a more extensive collection of powerful functions that can be \
used to create lists."
}], "Text",ExpressionUUID->"7f7fff32-c10f-4f41-941c-a3c428952de0"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "CYUButton"], 
          TextCell[#, "CYUButton" <> "Active"]]& )[
          Framed[
           Style["Check Your Understanding", "CYUButton"], RoundingRadius -> 
           5, FrameMargins -> {{18, 18}, {15, 15}}, ImageSize -> {205, 51}, 
           BaseStyle -> "Text"]], (WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         Framed[
          Column[{
            TextCell[
            "Which of the following would create a list of three pairs\
\[LongDash]each pair consisting of a number and its cube\[LongDash]for the \
first three integers?", "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Table[{i, i^3}, 3]", "info" -> 
                    "While this generates a list of three pairs, the variable \
i is not recognized as an iterator and will not take on the values of the \
first three integers.", "index" -> 1, "correct" -> False|>["statement"], 
                    "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Table[{i, i^3}, 3]", "info" -> 
                    "While this generates a list of three pairs, the variable \
i is not recognized as an iterator and will not take on the values of the \
first three integers.", "index" -> 1, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Table[{i, i^3}, 3]", "info" -> 
                    "While this generates a list of three pairs, the variable \
i is not recognized as an iterator and will not take on the values of the \
first three integers.", "index" -> 1, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Table[{i, i^3}, 3]", "info" -> 
                    "While this generates a list of three pairs, the variable \
i is not recognized as an iterator and will not take on the values of the \
first three integers.", "index" -> 1, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Table[{i, i^3}, 3]", "info" -> 
                    "While this generates a list of three pairs, the variable \
i is not recognized as an iterator and will not take on the values of the \
first three integers.", "index" -> 1, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Table[{i, i^3}, 3]", "info" -> 
                    "While this generates a list of three pairs, the variable \
i is not recognized as an iterator and will not take on the values of the \
first three integers.", "index" -> 1, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Table[{i, i^3}, {1, 2, 3}]", "info" -> 
                    "The iterator i has not been correctly specified.", 
                    "index" -> 2, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Table[{i, i^3}, {1, 2, 3}]", "info" -> 
                    "The iterator i has not been correctly specified.", 
                    "index" -> 2, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Table[{i, i^3}, {1, 2, 3}]", "info" -> 
                    "The iterator i has not been correctly specified.", 
                    "index" -> 2, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {
                    FontColor -> Darker[Red, 5/9], FontWeight -> Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Table[{i, i^3}, {1, 2, 3}]", "info" -> 
                    "The iterator i has not been correctly specified.", 
                    "index" -> 2, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Table[{i, i^3}, {1, 2, 3}]", "info" -> 
                    "The iterator i has not been correctly specified.", 
                    "index" -> 2, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Table[{i, i^3}, {1, 2, 3}]", "info" -> 
                    "The iterator i has not been correctly specified.", 
                    "index" -> 2, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Table[(i, i^3), {i, 3}]", "info" -> 
                    "Each pair is also a list and needs to be enclosed in \
curly braces.", "index" -> 3, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Table[(i, i^3), {i, 3}]", "info" -> 
                    "Each pair is also a list and needs to be enclosed in \
curly braces.", "index" -> 3, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Table[(i, i^3), {i, 3}]", "info" -> 
                    "Each pair is also a list and needs to be enclosed in \
curly braces.", "index" -> 3, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Table[(i, i^3), {i, 3}]", "info" -> 
                    "Each pair is also a list and needs to be enclosed in \
curly braces.", "index" -> 3, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Table[(i, i^3), {i, 3}]", "info" -> 
                    "Each pair is also a list and needs to be enclosed in \
curly braces.", "index" -> 3, "correct" -> False|>["info"], "Text", FontColor -> 
                    If[
                    <|
                    "statement" -> "Table[(i, i^3), {i, 3}]", "info" -> 
                    "Each pair is also a list and needs to be enclosed in \
curly braces.", "index" -> 3, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 4 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Table[{i, i^3}, {i, 3}]", "info" -> 
                    "Correct. The iterator i takes on the values 1, 2 and 3 \
and {i, i^3} creates the pairs.", "index" -> 4, "correct" -> True|>[
                    "statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Table[{i, i^3}, {i, 3}]", "info" -> 
                    "Correct. The iterator i takes on the values 1, 2 and 3 \
and {i, i^3} creates the pairs.", "index" -> 4, "correct" -> True|>[
                    "index"], {}, 
                    <|
                    "statement" -> "Table[{i, i^3}, {i, 3}]", "info" -> 
                    "Correct. The iterator i takes on the values 1, 2 and 3 \
and {i, i^3} creates the pairs.", "index" -> 4, "correct" -> True|>[
                    "correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Table[{i, i^3}, {i, 3}]", "info" -> 
                    "Correct. The iterator i takes on the values 1, 2 and 3 \
and {i, i^3} creates the pairs.", "index" -> 4, "correct" -> True|>["index"], 
                    
                    TextCell[
                    <|
                    "statement" -> "Table[{i, i^3}, {i, 3}]", "info" -> 
                    "Correct. The iterator i takes on the values 1, 2 and 3 \
and {i, i^3} creates the pairs.", "index" -> 4, "correct" -> True|>["info"], 
                    "Text", FontColor -> If[
                    <|"statement" -> "Table[{i, i^3}, {i, 3}]", "info" -> 
                    "Correct. The iterator i takes on the values 1, 2 and 3 \
and {i, i^3} creates the pairs.", "index" -> 4, "correct" -> True|>[
                    "correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}]}], 
          FrameStyle -> Directive[
            GrayLevel[0.92], 
            Thickness[Large]], RoundingRadius -> 0, Background -> 
          GrayLevel[0.97], FrameMargins -> 15]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1041.5, {182.06352996826172`, 192.91216278076172`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"41342e9d-b6b4-43b3-8650-\
0193eab7a916"]], "Text",
 CellTags->"CYU",ExpressionUUID->"2a230be4-97b9-4d10-aebd-7bbf4af0233d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Elements in Lists", "Section",ExpressionUUID->"d42691b4-99f5-46d9-bcd9-9be0224c3b99"],

Cell[CellGroupData[{

Cell["Length of a List", "Subsection",ExpressionUUID->"f7481909-c8fd-47e0-955a-4b33457d0c78"],

Cell[TextData[{
 "How long is a list? ",
 ButtonBox["Length",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Length.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Length.html"],
 " can provide the number of elements in the list:"
}], "Text",
 CellTags->"Length",ExpressionUUID->"853feb19-3e0f-4549-b733-7686f52f1e5b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "[", 
  RowBox[{"{", 
   RowBox[{"a", ",", "42", ",", "3.14", ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 0, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0, 0],
     Editable->False,
     Selectable->False], ",", "\"\<hello\>\"", ",", " ", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["y", "3"]}]}], ",", 
    Graphics3DBox[
     {RGBColor[0, 1, 0], SphereBox[{0, 0, 0}]},
     ImageSize->{37.09619946984732, Automatic},
     ViewPoint->{1.3, -2.4, 2.},
     ViewVertical->{0., 0., 1.}]}], "}"}], "]"}]], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"e1b935cf-4046-44b8-80c1-6777f0fb6825"],

Cell[BoxData["7"], "Output",
 CellLabel->"Out[23]=",ExpressionUUID->"ef3136e8-b80e-45e9-9bd0-fae5b3139598"]
}, Open  ]],

Cell[TextData[{
 "For a nested list, like a multidimensional array (with the same number of \
elements at each level), the ",
 ButtonBox["Dimensions",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Dimensions.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Dimensions.html"],
 " function can be used to determine the length at each level:"
}], "Text",
 CellTags->
  "Dimensions",ExpressionUUID->"5f58fcca-15ab-4622-afdb-406bf5be37d3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"1", ",", "1"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"1", ",", "2"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"2", ",", "1"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"2", ",", "2"}], "]"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"f", "[", 
       RowBox[{"3", ",", "1"}], "]"}], ",", 
      RowBox[{"f", "[", 
       RowBox[{"3", ",", "2"}], "]"}]}], "}"}]}], "}"}], "]"}]], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"7158f2ad-0d5a-4ee6-aa5f-aeb75f5f3f36"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "2"}], "}"}]], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"511dffba-7ba9-4181-9664-2a533035bb06"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Getting Pieces of Lists", "Subsection",ExpressionUUID->"76fdcafc-125e-487e-9975-3bd0e7589cb1"],

Cell[TextData[{
 "Wolfram Language provides a carefully chosen ",
 ButtonBox["set of functions",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/guide/ElementsOfLists.html"], 
    None},
  ButtonNote->
   "https://reference.wolfram.com/language/guide/ElementsOfLists.html"],
 " for accessing elements of lists."
}], "Text",ExpressionUUID->"5b5a67b0-5e07-465e-8c4a-4da378e6b8c4"],

Cell[CellGroupData[{

Cell["Picking out elements of a list", "Subsubsection",ExpressionUUID->"89b1e201-178a-43b2-891c-d4729722575d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myList", " ", "=", 
  RowBox[{"{", 
   RowBox[{"a", ",", "42", ",", "3.14", ",", 
    InterpretationBox[
     ButtonBox[
      TooltipBox[
       GraphicsBox[{
         {GrayLevel[0], RectangleBox[{0, 0}]}, 
         {GrayLevel[0], RectangleBox[{1, -1}]}, 
         {RGBColor[1, 0, 0], RectangleBox[{0, -1}, {2, 1}]}},
        AspectRatio->1,
        Frame->True,
        FrameStyle->RGBColor[0.6666666666666666, 0., 0.],
        FrameTicks->None,
        ImageSize->
         Dynamic[{
          Automatic, 
           1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
            Magnification])}],
        PlotRangePadding->None],
       "RGBColor[1, 0, 0]"],
      Appearance->None,
      BaseStyle->{},
      BaselinePosition->Baseline,
      ButtonFunction:>With[{Typeset`box$ = EvaluationBox[]}, 
        If[
         Not[
          AbsoluteCurrentValue["Deployed"]], 
         SelectionMove[Typeset`box$, All, Expression]; 
         FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
         FrontEnd`Private`$ColorSelectorInitialColor = RGBColor[1, 0, 0]; 
         FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
         MathLink`CallFrontEnd[
           FrontEnd`AttachCell[Typeset`box$, 
            FrontEndResource["RGBColorValueSelector"], {0, {Left, Bottom}}, {
            Left, Top}, 
            "ClosingActions" -> {
             "SelectionDeparture", "ParentChanged", "EvaluatorQuit"}]]]],
      DefaultBaseStyle->{},
      Evaluator->Automatic,
      Method->"Preemptive"],
     RGBColor[1, 0, 0],
     Editable->False,
     Selectable->False], ",", "\"\<hello\>\"", ",", " ", 
    RowBox[{
     SuperscriptBox["x", "2"], "+", 
     RowBox[{"3", " ", 
      SuperscriptBox["y", "3"]}]}], ",", 
    Graphics3DBox[
     {RGBColor[0, 1, 0], SphereBox[{0, 0, 0}]},
     ImageSize->{37.09619946984732, Automatic},
     ViewPoint->{1.3, -2.4, 2.},
     ViewVertical->{0., 0., 1.}]}], "}"}]}]], "Input",
 CellLabel->"In[25]:=",ExpressionUUID->"0c0dda48-c082-433e-b5f3-4329575dd5cc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "42", ",", "3.14`", ",", 
   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
    "RGBColorSwatchTemplate"], ",", "\<\"hello\"\>", ",", 
   RowBox[{
    SuperscriptBox["x", "2"], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["y", "3"]}]}], ",", 
   Graphics3DBox[
    {RGBColor[0, 1, 0], SphereBox[{0, 0, 0}]},
    ImageSize->{37.09619946984732, Automatic},
    ViewPoint->{1.3, -2.4, 2.},
    ViewVertical->{0., 0., 1.}]}], "}"}]], "Output",
 CellLabel->"Out[25]=",ExpressionUUID->"9226a026-3243-47a6-92fd-974d83ec4601"]
}, Open  ]],

Cell[TextData[{
 "Get the ",
 ButtonBox["First",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/First.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/First.html"],
 " element of a list:"
}], "Text",
 CellTags->"First",ExpressionUUID->"38df0f59-94c7-4bf1-b5b4-68dc938759f8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "[", "myList", "]"}]], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"1465e06b-e5fe-474f-8db4-302cdff584d2"],

Cell[BoxData["a"], "Output",
 CellLabel->"Out[26]=",ExpressionUUID->"636ed8b7-83aa-49f3-9b26-e5f71fddcafa"]
}, Open  ]],

Cell[TextData[{
 "Get the ",
 ButtonBox["Last",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Last.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Last.html"],
 " element in a list:"
}], "Text",
 CellTags->"Last",ExpressionUUID->"cd1f1488-831f-471f-a6f6-c2ba878d7ec2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Last", "[", "myList", "]"}]], "Input",
 CellLabel->"In[27]:=",ExpressionUUID->"7b11ae86-6a42-475f-ace3-7a6fe6dc17e6"],

Cell[BoxData[
 Graphics3DBox[
  {RGBColor[0, 1, 0], SphereBox[{0, 0, 0}]},
  ImageSize->{37.09619946984732, Automatic},
  ViewPoint->{1.3, -2.4, 2.},
  ViewVertical->{0., 0., 1.}]], "Output",
 CellLabel->"Out[27]=",ExpressionUUID->"f9016116-d5e9-452d-bc1c-311ef8adcc5b"]
}, Open  ]],

Cell[TextData[{
 "The ",
 ButtonBox["Part",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Part.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Part.html"],
 " function is a more general way to extract elements from a list. "
}], "Text",
 CellTags->"Part",ExpressionUUID->"8cfc97b0-cd91-48bc-8e13-85822fe1915e"],

Cell["This gets the second element of the list:", "Text",ExpressionUUID->"51f2ff74-4fbc-48d7-bbcb-fd476c716aca"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}], ",", "2"}], 
  "]"}]], "Input",
 CellLabel->"In[28]:=",ExpressionUUID->"9bd3850e-d47b-4157-9a60-f3cc65223fda"],

Cell[BoxData["b"], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"ca4aa137-a1e8-43f1-b80d-253d425369af"]
}, Open  ]],

Cell["\<\
Elements from the tail end of the list can be obtained by using negative \
indices:\
\>", "Text",ExpressionUUID->"d0a46abd-ac91-468a-8a41-4ccb67635017"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}], ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 CellLabel->"In[29]:=",ExpressionUUID->"9d2115be-581f-4cc6-811d-36ab4b616126"],

Cell[BoxData["e"], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"88627e91-54af-4175-9e61-cd9be935160a"]
}, Open  ]],

Cell["This gives the list of elements 3 through 5:", "Text",ExpressionUUID->"71390633-f015-47da-a146-499ade212b0f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}], ",", 
   RowBox[{"3", ";;", "5"}]}], "]"}]], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"5180850b-c178-400e-b338-3d7530e0736f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"c", ",", "d", ",", "e"}], "}"}]], "Output",
 CellLabel->"Out[30]=",ExpressionUUID->"f94febc6-ba37-4097-bb4c-dfb06a015e96"]
}, Open  ]],

Cell["This gives a list of the first and fourth elements:", "Text",ExpressionUUID->"d6bb8b56-fc9d-4cb5-9545-b64f2ab213dd"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"ae004512-0c71-4b91-8cb5-2d377be7deda"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "d"}], "}"}]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"3625138f-8f71-4efe-9bc5-40290852d26a"]
}, Open  ]],

Cell["The Part function is commonly used in its shorthand form:", "Text",ExpressionUUID->"71005af7-43ea-4aee-93a3-cd34b200462b"],

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}], "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"9ce6edb8-81b4-455a-9a69-f2d5b8d2b383"],

Cell[CellGroupData[{

Cell[BoxData[{"b", "\[IndentingNewLine]", 
 RowBox[{"myList", "[", 
  RowBox[{"[", 
   RowBox[{"3", ";;", "5"}], "]"}], "]"}]}], "Input",
 CellLabel->"In[35]:=",ExpressionUUID->"694b95ba-19f9-4dc2-9eae-34054f205526"],

Cell[BoxData["b"], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"3bec98ec-06b6-4997-b730-9e70ce90af15"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3.14`", ",", 
   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
    "RGBColorSwatchTemplate"], ",", "\<\"hello\"\>"}], "}"}]], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"0fab7bb3-b744-4d72-bc05-bc99c529b343"]
}, Open  ]],

Cell["\<\
If you assign the list to a variable, the notation becomes more compact:\
\>", "Text",ExpressionUUID->"eb4dff4d-03db-4b65-b87c-ea6b771ff647"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"myList", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], 
   "}"}]}], "\[IndentingNewLine]", 
 RowBox[{"myList", "[", 
  RowBox[{"[", "2", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"myList", "[", 
  RowBox[{"[", 
   RowBox[{"-", "1"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"myList", "[", 
  RowBox[{"[", 
   RowBox[{"3", ";;", "5"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"myList", "[", 
  RowBox[{"[", 
   RowBox[{"4", ";;"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"myList", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4"}], "}"}], "]"}], "]"}]}], "Input",
 CellLabel->"In[43]:=",ExpressionUUID->"95d8cd80-d6c0-46c2-b746-f4d6f094c603"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]], "Output",
 CellLabel->"Out[43]=",ExpressionUUID->"45fc0692-f4df-475b-94ef-7fd6578229c2"],

Cell[BoxData["b"], "Output",
 CellLabel->"Out[44]=",ExpressionUUID->"e8d39975-6bb9-4174-bf0a-0c0eaef64fc7"],

Cell[BoxData["e"], "Output",
 CellLabel->"Out[45]=",ExpressionUUID->"8e2e5cb1-e91f-4582-b91b-5b5f5e607579"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"c", ",", "d", ",", "e"}], "}"}]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"da561860-6aa4-4fdc-b4c1-4bd2d9d990da"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"d", ",", "e"}], "}"}]], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"8049ce17-98ac-40a0-83b9-91bf3b98ac8b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "d"}], "}"}]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"168c05d6-1656-473a-ab27-236861e5bd4e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Picking out elements from a nested list", "Subsubsection",
 CellTags->
  "Nested List",ExpressionUUID->"900bce7a-5bce-4f1f-9e2a-8b449695baa4"],

Cell[TextData[{
 "The following code creates a nested list and uses the functions Dimensions, \
",
 ButtonBox["MatrixForm",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/MatrixForm.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/MatrixForm.html"],
 " and ",
 ButtonBox["TreeForm",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/TreeForm.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/TreeForm.html"],
 " to look at the structure (levels) of the list:"
}], "Text",ExpressionUUID->"8fc3881b-435d-4db5-bafd-ed58699d9f3c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nestedList", " ", "=", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i", ",", "j", ",", 
      RowBox[{"i", "+", "j"}]}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"i", ",", "1", ",", "3"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"j", ",", "4", ",", "6"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->"In[49]:=",ExpressionUUID->"5a96ff6a-b9f1-4cb5-a322-eb067a921d45"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "4", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "5", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "6", ",", "7"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "4", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "5", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "6", ",", "8"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "4", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "5", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "6", ",", "9"}], "}"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"817dcf81-0b7a-47f8-b7be-7f001bf64637"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "[", "nestedList", "]"}]], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"17f93b9d-c5f7-4371-8ecb-c18d68bc10e0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "3", ",", "3"}], "}"}]], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"f44583a5-8df5-4ac6-9296-a31b332d6206"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MatrixForm", "[", "nestedList", "]"}]], "Input",
 CellLabel->"In[51]:=",ExpressionUUID->"e1b18e11-c126-4922-8e5d-757481626361"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"1"},
          {"4"},
          {"5"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"1"},
          {"5"},
          {"6"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"1"},
          {"6"},
          {"7"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"2"},
          {"4"},
          {"6"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"2"},
          {"5"},
          {"7"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"2"},
          {"6"},
          {"8"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}]},
     {
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"3"},
          {"4"},
          {"7"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"3"},
          {"5"},
          {"8"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}], 
      RowBox[{"(", "\[NoBreak]", 
       TagBox[GridBox[{
          {"3"},
          {"6"},
          {"9"}
         },
         GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
         GridBoxSpacings->{"Columns" -> {
             Offset[0.27999999999999997`], {
              Offset[0.5599999999999999]}, 
             Offset[0.27999999999999997`]}, "Rows" -> {
             Offset[0.2], {
              Offset[0.4]}, 
             Offset[0.2]}}],
        Column], "\[NoBreak]", ")"}]}
    },
    GridBoxAlignment->{"Columns" -> {{Center}}, "Rows" -> {{Baseline}}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[51]//MatrixForm=",ExpressionUUID->"ac66a1e4-14e8-47bc-a2d5-\
3ef9f9ec7b17"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeForm", "[", "nestedList", "]"}]], "Input",
 CellLabel->"In[52]:=",ExpressionUUID->"128d8fc6-8cfe-4edb-a0d0-4e68ed25d380"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[
   TagBox[GraphicsComplexBox[CompressedData["
1:eJxTTMoPSmViYGDQAGIQnV2Z0V22XNjh7c+/Obkqn+yffV/+bKLBD/vnYPoF
lH/D/gWUZkADz9DEn0H1ofJ/wPXD7EGXh/EffA1M2GbzD85/+ePSynotVgdU
/UwO6PKo5nHA+TD/wfwDMZ8Pbt7jbzXKS8y44eph8jB+XtVkv5SFAhjmobpH
CEMe1X2iaO6TgOvPqLA90bFWDEMexk8tF2KdvVkSzT0KcP8klj13XLtTBs0/
0nD1MHlU/8lhmAfTH1e6p27/fnkMeRhfd9eJuy+SFOH8NZbGfz4+VUILDyUM
edTwUYbzAdli5Q8=
     "], {
      {RGBColor[0.55, 0.45, 0.45], 
       LineBox[{{1, 2}, {1, 15}, {1, 28}, {2, 3}, {2, 7}, {2, 11}, {3, 4}, {3,
         5}, {3, 6}, {7, 8}, {7, 9}, {7, 10}, {11, 12}, {11, 13}, {11, 14}, {
        15, 16}, {15, 20}, {15, 24}, {16, 17}, {16, 18}, {16, 19}, {20, 21}, {
        20, 22}, {20, 23}, {24, 25}, {24, 26}, {24, 27}, {28, 29}, {28, 33}, {
        28, 37}, {29, 30}, {29, 31}, {29, 32}, {33, 34}, {33, 35}, {33, 36}, {
        37, 38}, {37, 39}, {37, 40}}]}, {
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 1],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"1", ",", "4", ",", "5"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"1", ",", "5", ",", "6"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"1", ",", "6", ",", "7"}], "}"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"2", ",", "4", ",", "6"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"2", ",", "5", ",", "7"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"2", ",", "6", ",", "8"}], "}"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"3", ",", "4", ",", "7"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"3", ",", "5", ",", "8"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"3", ",", "6", ",", "9"}], "}"}]}], "}"}]}], 
            "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{{{1, 4, 5}, {1, 5, 6}, {1, 6, 7}}, {{2, 4, 6}, {2, 5, 7}, {
          2, 6, 8}}, {{3, 4, 7}, {3, 5, 8}, {3, 6, 9}}}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 2],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"1", ",", "4", ",", "5"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"1", ",", "5", ",", "6"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"1", ",", "6", ",", "7"}], "}"}]}], "}"}], HoldForm]],
        
        Annotation[#, 
         HoldForm[{{1, 4, 5}, {1, 5, 6}, {1, 6, 7}}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 3],
         TagBox[
          RowBox[{"{", 
            RowBox[{"1", ",", "4", ",", "5"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{1, 4, 5}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 4],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["4",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 5],
         TagBox["4", HoldForm]],
        Annotation[#, 
         HoldForm[4], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["5",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 6],
         TagBox["5", HoldForm]],
        Annotation[#, 
         HoldForm[5], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 7],
         TagBox[
          RowBox[{"{", 
            RowBox[{"1", ",", "5", ",", "6"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{1, 5, 6}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 8],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["5",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 9],
         TagBox["5", HoldForm]],
        Annotation[#, 
         HoldForm[5], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["6",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 10],
         TagBox["6", HoldForm]],
        Annotation[#, 
         HoldForm[6], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 11],
         TagBox[
          RowBox[{"{", 
            RowBox[{"1", ",", "6", ",", "7"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{1, 6, 7}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 12],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["6",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 13],
         TagBox["6", HoldForm]],
        Annotation[#, 
         HoldForm[6], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["7",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 14],
         TagBox["7", HoldForm]],
        Annotation[#, 
         HoldForm[7], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 15],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"2", ",", "4", ",", "6"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"2", ",", "5", ",", "7"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"2", ",", "6", ",", "8"}], "}"}]}], "}"}], HoldForm]],
        
        Annotation[#, 
         HoldForm[{{2, 4, 6}, {2, 5, 7}, {2, 6, 8}}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 16],
         TagBox[
          RowBox[{"{", 
            RowBox[{"2", ",", "4", ",", "6"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{2, 4, 6}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["2",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 17],
         TagBox["2", HoldForm]],
        Annotation[#, 
         HoldForm[2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["4",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 18],
         TagBox["4", HoldForm]],
        Annotation[#, 
         HoldForm[4], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["6",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 19],
         TagBox["6", HoldForm]],
        Annotation[#, 
         HoldForm[6], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 20],
         TagBox[
          RowBox[{"{", 
            RowBox[{"2", ",", "5", ",", "7"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{2, 5, 7}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["2",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 21],
         TagBox["2", HoldForm]],
        Annotation[#, 
         HoldForm[2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["5",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 22],
         TagBox["5", HoldForm]],
        Annotation[#, 
         HoldForm[5], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["7",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 23],
         TagBox["7", HoldForm]],
        Annotation[#, 
         HoldForm[7], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 24],
         TagBox[
          RowBox[{"{", 
            RowBox[{"2", ",", "6", ",", "8"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{2, 6, 8}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["2",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 25],
         TagBox["2", HoldForm]],
        Annotation[#, 
         HoldForm[2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["6",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 26],
         TagBox["6", HoldForm]],
        Annotation[#, 
         HoldForm[6], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["8",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 27],
         TagBox["8", HoldForm]],
        Annotation[#, 
         HoldForm[8], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 28],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"3", ",", "4", ",", "7"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"3", ",", "5", ",", "8"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"3", ",", "6", ",", "9"}], "}"}]}], "}"}], HoldForm]],
        
        Annotation[#, 
         HoldForm[{{3, 4, 7}, {3, 5, 8}, {3, 6, 9}}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 29],
         TagBox[
          RowBox[{"{", 
            RowBox[{"3", ",", "4", ",", "7"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{3, 4, 7}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["3",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 30],
         TagBox["3", HoldForm]],
        Annotation[#, 
         HoldForm[3], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["4",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 31],
         TagBox["4", HoldForm]],
        Annotation[#, 
         HoldForm[4], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["7",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 32],
         TagBox["7", HoldForm]],
        Annotation[#, 
         HoldForm[7], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 33],
         TagBox[
          RowBox[{"{", 
            RowBox[{"3", ",", "5", ",", "8"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{3, 5, 8}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["3",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 34],
         TagBox["3", HoldForm]],
        Annotation[#, 
         HoldForm[3], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["5",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 35],
         TagBox["5", HoldForm]],
        Annotation[#, 
         HoldForm[5], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["8",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 36],
         TagBox["8", HoldForm]],
        Annotation[#, 
         HoldForm[8], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 37],
         TagBox[
          RowBox[{"{", 
            RowBox[{"3", ",", "6", ",", "9"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{3, 6, 9}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["3",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 38],
         TagBox["3", HoldForm]],
        Annotation[#, 
         HoldForm[3], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["6",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 39],
         TagBox["6", HoldForm]],
        Annotation[#, 
         HoldForm[6], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["9",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.022222222222222223`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 40],
         TagBox["9", HoldForm]],
        Annotation[#, 
         HoldForm[9], "Tooltip"]& ]}}],
    Annotation[#, VertexCoordinateRules -> CompressedData["
1:eJxTTMoPSmViYGDQAGIQnV2Z0V22XNjh7c+/Obkqn+yffV/+bKLBD/vnYPoF
lH/D/gWUZkADz9DEn0H1ofJ/wPXD7EGXh/EffA1M2GbzD85/+ePSynotVgdU
/UwO6PKo5nHA+TD/wfwDMZ8Pbt7jbzXKS8y44eph8jB+XtVkv5SFAhjmobpH
CEMe1X2iaO6TgOvPqLA90bFWDEMexk8tF2KdvVkSzT0KcP8klj13XLtTBs0/
0nD1MHlU/8lhmAfTH1e6p27/fnkMeRhfd9eJuy+SFOH8NZbGfz4+VUILDyUM
edTwUYbzAdli5Q8=
      "]]& ],
   AspectRatio->NCache[Rational[1, 3] 2^Rational[1, 2], 0.4714045207910317],
   FormatType:>StandardForm,
   FrameTicks->Automatic,
   PlotRange->All,
   PlotRangePadding->Scaled[0.1]],
  TreeForm[{{{1, 4, 5}, {1, 5, 6}, {1, 6, 7}}, {{2, 4, 6}, {2, 5, 7}, {2, 6, 
   8}}, {{3, 4, 7}, {3, 5, 8}, {3, 6, 9}}}],
  Editable->False]], "Output",
 CellLabel->
  "Out[52]//TreeForm=",ExpressionUUID->"5c5dd90a-6dda-4caf-bda8-5a28ba717fac"]
}, Open  ]],

Cell["\<\
To access an element at a particular level of a nested list, provide the \
index for each level, from the top level down, to the Part function.\
\>", "Text",ExpressionUUID->"e1456981-bb67-42cf-860b-e5f1c139113f"],

Cell["\<\
This picks out the second element of the innermost list in the first column \
of the third row\[LongDash]so from the top down in levels:\
\>", "Text",ExpressionUUID->"5bcc707a-093a-49a2-9836-3635590d5b3d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nestedList", "[", 
  RowBox[{"[", 
   RowBox[{"3", ",", "1", ",", "2"}], "]"}], "]"}]], "Input",
 CellLabel->"In[53]:=",ExpressionUUID->"e6125b6f-16db-4127-b1ec-5b8ae329fa97"],

Cell[BoxData["4"], "Output",
 CellLabel->"Out[53]=",ExpressionUUID->"c70a075d-3b49-4129-9394-3a890908a8f2"]
}, Open  ]],

Cell["\<\
To access all elements at a particular level of a nested list, use the \
keyword All.\
\>", "Text",ExpressionUUID->"7bc9b7cb-521f-4f52-adef-a436f3477502"],

Cell["\<\
This picks all elements of the first row at the topmost level:\
\>", "Text",ExpressionUUID->"5ced1d11-87c6-439a-bbe2-92511e94ecf7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nestedList", "[", 
  RowBox[{"[", 
   RowBox[{"1", ",", "All"}], "]"}], "]"}]], "Input",
 CellLabel->"In[54]:=",ExpressionUUID->"ac0fec11-a63c-4c91-b049-d661daae525b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"7e31ad10-9da1-48c2-805c-d40f3d281c97"]
}, Open  ]],

Cell["\<\
This picks all elements of the first column at the topmost level:\
\>", "Text",ExpressionUUID->"402497b3-bc1f-4b00-9b4d-f2190c9c3b7e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nestedList", "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->"In[55]:=",ExpressionUUID->"f9aca638-3ec5-4979-be67-acf357e1102f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"aee84467-74dd-450a-b9f4-d82a0b79fa6d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nestedList", "[", 
  RowBox[{"[", 
   RowBox[{"All", ",", "All", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->"In[56]:=",ExpressionUUID->"1431fe9a-85a9-428a-95be-e28117c0342d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"3213072d-dd5a-448e-804c-3f1aeaf0e25d"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Picking out sequences from a list", "Subsubsection",ExpressionUUID->"b960d3d4-9b13-48b6-8486-8d4e32ec5d5f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myList", " ", "=", " ", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"1833ac20-4f81-4263-816a-bbcd30f1b691"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]], "Output",
 CellLabel->"Out[57]=",ExpressionUUID->"109b36f4-18ff-4bca-beb0-4d947aa77222"]
}, Open  ]],

Cell[TextData[{
 "Get the first ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "dcff56bd-e7d1-4658-937f-a15885e42ca9"],
 " elements in a list:"
}], "Text",ExpressionUUID->"282bd89c-37b9-4fa8-803e-8f214c25770e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"myList", ",", "3"}], "]"}]], "Input",
 CellTags->"Take",
 CellLabel->"In[58]:=",ExpressionUUID->"8cfea7fb-1d99-4199-8277-82c4a829f2e1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c"}], "}"}]], "Output",
 CellTags->"Take",
 CellLabel->"Out[58]=",ExpressionUUID->"8765582e-d9ad-44d9-b80a-055975273670"]
}, Open  ]],

Cell[TextData[{
 "Get a list with the first ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "70160b38-5b6d-453e-b145-510bb4ad0291"],
 " elements dropped from the original list:"
}], "Text",ExpressionUUID->"7c753b45-6bc1-4896-bc70-207263ae4a52"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{"myList", ",", "3"}], "]"}]], "Input",
 CellTags->"Drop",
 CellLabel->"In[59]:=",ExpressionUUID->"cf5aaf8e-44f7-48f2-8a8b-91900a890ed3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"d", ",", "e"}], "}"}]], "Output",
 CellTags->"Drop",
 CellLabel->"Out[59]=",ExpressionUUID->"56f7621e-5879-47e6-a2fa-6264411edb54"]
}, Open  ]],

Cell["Get all but the first element in a list:", "Text",ExpressionUUID->"427b4174-3c23-4642-bcbc-0e2bbf4be627"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Rest", "[", "myList", "]"}]], "Input",
 CellTags->"Rest",
 CellLabel->"In[60]:=",ExpressionUUID->"9683d40a-6494-4dee-a923-5c4adf9d9f26"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", ",", "c", ",", "d", ",", "e"}], "}"}]], "Output",
 CellTags->"Rest",
 CellLabel->"Out[60]=",ExpressionUUID->"d02a2a08-c3b5-4865-8e27-f24ae3322e41"]
}, Open  ]],

Cell["Get all but the last element in a list:", "Text",ExpressionUUID->"6559df4e-8fd9-43d4-8dbe-7408e3ae0ed9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Most", "[", "myList", "]"}]], "Input",
 CellTags->"Most",
 CellLabel->"In[61]:=",ExpressionUUID->"29393464-50d6-424a-90be-a19845047817"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]], "Output",
 CellTags->"Most",
 CellLabel->"Out[61]=",ExpressionUUID->"68d76d72-cdcf-449a-97ec-3fdd33bcbd92"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "CYUButton"], 
          TextCell[#, "CYUButton" <> "Active"]]& )[
          Framed[
           Style["Check Your Understanding", "CYUButton"], RoundingRadius -> 
           5, FrameMargins -> {{18, 18}, {15, 15}}, ImageSize -> {205, 51}, 
           BaseStyle -> "Text"]], (WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         Framed[
          Column[{
            TextCell[
            "Which of the following would provide the middle 3 elements from \
the list {a, b, c, d, e}?", "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Most[Rest[{a, b, c, d, e}]]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 1, "correct" -> False|>["statement"], 
                    "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Most[Rest[{a, b, c, d, e}]]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 1, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Most[Rest[{a, b, c, d, e}]]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 1, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Most[Rest[{a, b, c, d, e}]]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 1, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Most[Rest[{a, b, c, d, e}]]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 1, "correct" -> False|>["info"], "Text",
                     FontColor -> If[
                    <|
                    "statement" -> "Most[Rest[{a, b, c, d, e}]]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 1, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Take[Drop[{a, b, c, d, e}, -1], -3]", 
                    "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 2, "correct" -> False|>["statement"], 
                    "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Take[Drop[{a, b, c, d, e}, -1], -3]", 
                    "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 2, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Take[Drop[{a, b, c, d, e}, -1], -3]", 
                    "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 2, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Take[Drop[{a, b, c, d, e}, -1], -3]", 
                    "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 2, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Take[Drop[{a, b, c, d, e}, -1], -3]", 
                    "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 2, "correct" -> False|>["info"], "Text",
                     FontColor -> If[
                    <|
                    "statement" -> "Take[Drop[{a, b, c, d, e}, -1], -3]", 
                    "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 2, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Part[{a, b, c, d, e}, 2 ;; 4]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 3, "correct" -> False|>["statement"], 
                    "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Part[{a, b, c, d, e}, 2 ;; 4]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 3, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Part[{a, b, c, d, e}, 2 ;; 4]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 3, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Part[{a, b, c, d, e}, 2 ;; 4]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 3, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Part[{a, b, c, d, e}, 2 ;; 4]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 3, "correct" -> False|>["info"], "Text",
                     FontColor -> If[
                    <|
                    "statement" -> "Part[{a, b, c, d, e}, 2 ;; 4]", "info" -> 
                    "That\[CloseCurlyQuote]s one way, but there are other \
ways to do this as well.", "index" -> 3, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 4 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "All of the above", "info" -> "Correct", 
                    "index" -> 4, "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "All of the above", "info" -> "Correct", 
                    "index" -> 4, "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "All of the above", "info" -> "Correct", 
                    "index" -> 4, "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "All of the above", "info" -> "Correct", 
                    "index" -> 4, "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "All of the above", "info" -> "Correct", 
                    "index" -> 4, "correct" -> True|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "All of the above", "info" -> "Correct", 
                    "index" -> 4, "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}]}], 
          FrameStyle -> Directive[
            GrayLevel[0.92], 
            Thickness[Large]], RoundingRadius -> 0, Background -> 
          GrayLevel[0.97], FrameMargins -> 15]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{997.5, {165.6724090576172, 176.5210418701172}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"81c5d12a-bb70-4877-981f-\
58bdd770ed0b"]], "Text",
 CellTags->"CYU",ExpressionUUID->"0f9a22fb-df10-4ab6-85b7-cce75c51f500"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Adding/Removing/Replacing Elements", "Section",ExpressionUUID->"0740da51-363d-4e1f-a369-816f4156fc53"],

Cell[CellGroupData[{

Cell["Adding Elements to a List", "Subsection",ExpressionUUID->"3493c6d4-3c3a-4f2c-8bbb-1a09c6ed968f"],

Cell["Add an element at the beginning of a list:", "Text",ExpressionUUID->"fa9bd3f1-0e78-4e8f-bb9d-953a33b35e89"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Prepend", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "x"}], "]"}]], "Input",
 CellTags->"Prepend",ExpressionUUID->"96c9924a-059a-4ebb-af5a-32d2ba7e4290"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", "a", ",", "b", ",", "c"}], "}"}]], "Output",
 CellTags->"Prepend",
 CellLabel->"Out[62]=",ExpressionUUID->"dbc328d3-c2f9-4c02-a64b-b6921d2af28d"]
}, Open  ]],

Cell["Add an element at the end of a list:", "Text",ExpressionUUID->"a58bd5d7-7f83-4f95-90a5-c44916d30535"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Append", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "x"}], "]"}]], "Input",
 CellTags->"Append",
 CellLabel->"In[63]:=",ExpressionUUID->"1fd211ed-8920-4841-9481-af96250b8a0f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "x"}], "}"}]], "Output",
 CellTags->"Append",
 CellLabel->"Out[63]=",ExpressionUUID->"2329d7a6-2e30-4578-a2e5-11d821813cb2"]
}, Open  ]],

Cell[TextData[{
 "Insert a new element to become the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "th"], TraditionalForm]],ExpressionUUID->
  "17b78586-6df4-443b-a1bf-71ac900ec6f6"],
 " element of the list:"
}], "Text",ExpressionUUID->"0c6ec5a3-83cb-48af-8a23-afdb42bd52cc"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Insert", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "x", ",", "2"}], 
  "]"}]], "Input",
 CellTags->"Insert",
 CellLabel->"In[64]:=",ExpressionUUID->"f6378b9f-6381-4d6c-bf89-05ab05aab67d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "x", ",", "b", ",", "c"}], "}"}]], "Output",
 CellTags->"Insert",
 CellLabel->"Out[64]=",ExpressionUUID->"cc9a5c84-c0f3-43f9-81db-9d84a930e25e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Removing Elements from a List", "Subsection",ExpressionUUID->"8e6a9fd5-e34f-4750-a120-bc30891a6abc"],

Cell[TextData[{
 "Delete the element at position ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "511ca83d-f122-4e4d-98c3-bee1362ebe71"],
 " in a list:"
}], "Text",ExpressionUUID->"c7d62ddc-8df3-453f-a431-35fe2b4c8486"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Delete", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "2"}], "]"}]], "Input",
 CellTags->"Delete",
 CellLabel->"In[65]:=",ExpressionUUID->"ab8617e4-1f19-4e43-b8b3-e7e2534c82df"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "c"}], "}"}]], "Output",
 CellTags->"Delete",
 CellLabel->"Out[65]=",ExpressionUUID->"dfa8ec58-21a3-499b-a7d9-d49c8bf3c502"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Replacing Elements in a List", "Subsection",ExpressionUUID->"c34237a4-7735-420f-a351-caaa8e7c7c92"],

Cell["\<\
Use the Part function to access an element and replace it at the same time:\
\>", "Text",ExpressionUUID->"b6afa49c-4a9a-4a8c-823b-c5505dc5ac0a"],

Cell[BoxData[{
 RowBox[{"Clear", "[", 
  RowBox[{"a", ",", "b", ",", "c"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"myList", "=", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}]}], ";"}]}], "Input",
 CellLabel->"In[66]:=",ExpressionUUID->"2c1f4257-f68d-4983-899c-d6fc5057fa47"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"myList", "[", 
    RowBox[{"[", "2", "]"}], "]"}], " ", "=", " ", "\"\<hello\>\""}], 
  ";"}]], "Input",
 CellLabel->"In[68]:=",ExpressionUUID->"a4cbfc8d-0b64-4c32-b9f9-a495fe56bbde"],

Cell[CellGroupData[{

Cell[BoxData["myList"], "Input",
 CellLabel->"In[69]:=",ExpressionUUID->"60849d26-6034-4503-82a9-3b50ca09caae"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "\<\"hello\"\>", ",", "c"}], "}"}]], "Output",
 CellLabel->"Out[69]=",ExpressionUUID->"92cc748f-4e07-4a0f-aa7a-daed66e44a2e"]
}, Open  ]],

Cell[TextData[{
 ButtonBox["ReplaceAll",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/ReplaceAll.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/ReplaceAll.html"],
 " can replace (one or more occurrences of) a specific element in the list:"
}], "Text",ExpressionUUID->"f35d1fe9-136c-46d1-aa07-144c5a20d331"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myList", "/.", 
  RowBox[{"a", "\[Rule]", " ", "42"}]}]], "Input",
 CellLabel->"In[70]:=",ExpressionUUID->"56d6e445-f76b-450f-8e74-f3a3e5322236"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"42", ",", "\<\"hello\"\>", ",", "c"}], "}"}]], "Output",
 CellLabel->"Out[70]=",ExpressionUUID->"2d88f1d1-58fa-460c-83db-8ad308fee97c"]
}, Open  ]],

Cell[TextData[{
 ButtonBox["ReplacePart",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/ReplacePart.html"], None},
  
  ButtonNote->"https://reference.wolfram.com/language/ref/ReplacePart.html"],
 " can replace the element at a particular position in the list with a new \
element:"
}], "Text",
 CellTags->
  "ReplacePart",ExpressionUUID->"458ce255-9993-468b-9e7d-d3e4d2897dae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplacePart", "[", 
  RowBox[{"myList", ",", 
   RowBox[{"3", "\[Rule]", "x"}]}], "]"}]], "Input",
 CellLabel->"In[71]:=",ExpressionUUID->"b08ebbc7-e038-4029-bf28-b59a71ef849b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "\<\"hello\"\>", ",", "x"}], "}"}]], "Output",
 CellLabel->"Out[71]=",ExpressionUUID->"cfeb8906-8f3d-4610-90c8-13ebdcef0b37"]
}, Open  ]],

Cell["\<\
When the Part function is used to access and replace an element, the original \
list is modified in place, as you see in the earlier example. However, \
ReplaceAll or ReplacePart creates a new list instead of editing the list in \
place. The original list remains unchanged:\
\>", "Text",ExpressionUUID->"666aa105-2e6d-4e94-b685-765ceaf3c9d5"],

Cell[CellGroupData[{

Cell[BoxData["myList"], "Input",
 CellLabel->"In[72]:=",ExpressionUUID->"5c73ea98-9290-41c3-9273-47ae59544c27"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "\<\"hello\"\>", ",", "c"}], "}"}]], "Output",
 CellLabel->"Out[72]=",ExpressionUUID->"1ef8e868-066b-448f-9e7b-9d4f52f133f1"]
}, Open  ]],

Cell["\<\
ReplacePart can also be used to replace elements of a nested list by \
specifying the positions at different levels of the nested list:\
\>", "Text",ExpressionUUID->"4f012d10-4b18-4c60-9195-5902776f9010"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReplacePart", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"d", ",", "e", ",", "f"}], "}"}]}], "}"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "x"}]}], "]"}]], "Input",
 CellLabel->"In[73]:=",ExpressionUUID->"e969906f-fb89-4aeb-a935-78044a310156"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"d", ",", "e", ",", "x"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[73]=",ExpressionUUID->"25eb7649-fa9e-4ad8-a809-e261765e600a"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "CYUButton"], 
          TextCell[#, "CYUButton" <> "Active"]]& )[
          Framed[
           Style["Check Your Understanding", "CYUButton"], RoundingRadius -> 
           5, FrameMargins -> {{18, 18}, {15, 15}}, ImageSize -> {205, 51}, 
           BaseStyle -> "Text"]], (WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         Framed[
          Column[{
            TextCell[
            "Which of the following would add c as the third element of the \
list {a, b}?", "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Prepend[{a, b}, c]", "info" -> 
                    "Prepend would place c at the beginning of the list.", 
                    "index" -> 1, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Prepend[{a, b}, c]", "info" -> 
                    "Prepend would place c at the beginning of the list.", 
                    "index" -> 1, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Prepend[{a, b}, c]", "info" -> 
                    "Prepend would place c at the beginning of the list.", 
                    "index" -> 1, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Prepend[{a, b}, c]", "info" -> 
                    "Prepend would place c at the beginning of the list.", 
                    "index" -> 1, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Prepend[{a, b}, c]", "info" -> 
                    "Prepend would place c at the beginning of the list.", 
                    "index" -> 1, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Prepend[{a, b}, c]", "info" -> 
                    "Prepend would place c at the beginning of the list.", 
                    "index" -> 1, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "ReplacePart[{a, b}, 3 \[Rule] c]", "info" -> 
                    "ReplacePart cannot be used as position 3 does not yet \
exist in the list {a, b}.", "index" -> 2, "correct" -> False|>["statement"], 
                    "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "ReplacePart[{a, b}, 3 \[Rule] c]", "info" -> 
                    "ReplacePart cannot be used as position 3 does not yet \
exist in the list {a, b}.", "index" -> 2, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "ReplacePart[{a, b}, 3 \[Rule] c]", "info" -> 
                    "ReplacePart cannot be used as position 3 does not yet \
exist in the list {a, b}.", "index" -> 2, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "ReplacePart[{a, b}, 3 \[Rule] c]", "info" -> 
                    "ReplacePart cannot be used as position 3 does not yet \
exist in the list {a, b}.", "index" -> 2, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "ReplacePart[{a, b}, 3 \[Rule] c]", "info" -> 
                    "ReplacePart cannot be used as position 3 does not yet \
exist in the list {a, b}.", "index" -> 2, "correct" -> False|>["info"], 
                    "Text", FontColor -> If[
                    <|"statement" -> "ReplacePart[{a, b}, 3 \[Rule] c]", 
                    "info" -> 
                    "ReplacePart cannot be used as position 3 does not yet \
exist in the list {a, b}.", "index" -> 2, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Insert[{a, b}, c, -1]", "info" -> 
                    "Correct", "index" -> 3, "correct" -> True|>["statement"],
                     "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Insert[{a, b}, c, -1]", "info" -> 
                    "Correct", "index" -> 3, "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "Insert[{a, b}, c, -1]", "info" -> 
                    "Correct", "index" -> 3, "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Insert[{a, b}, c, -1]", "info" -> 
                    "Correct", "index" -> 3, "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Insert[{a, b}, c, -1]", "info" -> 
                    "Correct", "index" -> 3, "correct" -> True|>["info"], 
                    "Text", FontColor -> If[
                    <|
                    "statement" -> "Insert[{a, b}, c, -1]", "info" -> 
                    "Correct", "index" -> 3, "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}]}], 
          FrameStyle -> Directive[
            GrayLevel[0.92], 
            Thickness[Large]], RoundingRadius -> 0, Background -> 
          GrayLevel[0.97], FrameMargins -> 15]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1004.5, {147.03128814697266`, 157.87992095947266`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"73a668b6-efb5-44dc-9331-\
6d125fa57ab1"]], "Text",
 CellTags->"CYU",ExpressionUUID->"9fb1bdb2-6f32-4186-9510-d25a0c1007f1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rearranging and Restructuring Lists", "Section",ExpressionUUID->"7bccae14-1979-4470-8228-88417b393ec9"],

Cell["Sort the elements of a list:", "Text",
 CellTags->"Sort",ExpressionUUID->"de4c3537-30b3-4463-986c-872d4d5c3fe2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"{", 
   RowBox[{"b", ",", "a", ",", "c", ",", "a", ",", "b"}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[74]:=",ExpressionUUID->"1fc74904-8f43-4631-b9f6-33b30519da24"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "a", ",", "b", ",", "b", ",", "c"}], "}"}]], "Output",
 CellLabel->"Out[74]=",ExpressionUUID->"3c0ce703-74c7-4c15-ab12-1a747c15b833"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ReverseSort", "[", 
  RowBox[{"{", 
   RowBox[{"b", ",", "a", ",", "c", ",", "a", ",", "b"}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[75]:=",ExpressionUUID->"fca11ec6-f5a1-421e-82d7-c057157b9840"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"c", ",", "b", ",", "b", ",", "a", ",", "a"}], "}"}]], "Output",
 CellLabel->"Out[75]=",ExpressionUUID->"cce6ca65-66f8-40a8-ae2f-9fa7b0cb03c4"]
}, Open  ]],

Cell["Reverse the order of the elements in a list:", "Text",
 CellTags->"Reverse",ExpressionUUID->"caafc075-ab18-4f25-a29b-77465b838d2e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Reverse", "[", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "1", ",", "2"}], "}"}], "]"}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"0f552e26-aded-4f7e-b6f7-29bbb2a88a7b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "1", ",", "b", ",", "a"}], "}"}]], "Output",
 CellLabel->"Out[76]=",ExpressionUUID->"3638e476-85bd-409f-b28b-626631a02507"]
}, Open  ]],

Cell["Combine lists together:", "Text",ExpressionUUID->"7855025f-0e0b-40ac-83f8-06c2de76361a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Join", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"b", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}]}], "]"}]], "Input",
 CellTags->"Join",
 CellLabel->"In[77]:=",ExpressionUUID->"c4451d69-82ce-4574-8619-e31e5a0d73ec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"b", ",", "a", ",", "c", ",", "a", ",", "b"}], "}"}]], "Output",
 CellTags->"Join",
 CellLabel->"Out[77]=",ExpressionUUID->"f374a02c-413a-4d7c-b217-f935136c063c"]
}, Open  ]],

Cell["\<\
Combine lists and sort the elements, while removing any duplicates:\
\>", "Text",ExpressionUUID->"89e83e0f-e303-4321-bd44-edf1edb68990"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Union", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"b", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}]}], "]"}]], "Input",
 CellTags->"Union",
 CellLabel->"In[78]:=",ExpressionUUID->"77beaa70-76b1-4303-8da1-85f194a1e49d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c"}], "}"}]], "Output",
 CellTags->"Union",
 CellLabel->"Out[78]=",ExpressionUUID->"4a93667f-15cb-4925-ac55-5c57387050e0"]
}, Open  ]],

Cell["Intersperse elements from two lists:", "Text",ExpressionUUID->"c4ce8d0d-9cf9-4b26-95d1-cb9e577c4940"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Riffle", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "y"}], "}"}]}], "]"}]], "Input",
 CellTags->"Riffle",
 CellLabel->"In[79]:=",ExpressionUUID->"c7fdb400-f12e-499e-bb08-0502f9115492"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "x", ",", "2", ",", "y", ",", "3"}], "}"}]], "Output",
 CellTags->"Riffle",
 CellLabel->"Out[79]=",ExpressionUUID->"06104a7a-d1ce-427f-9ff9-1fff089782b5"]
}, Open  ]],

Cell["Partition a list into blocks of a specified size:", "Text",ExpressionUUID->"032bf03a-264d-4f74-884b-ec6067c456f5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Range", "[", "12", "]"}]], "Input",
 CellLabel->"In[80]:=",ExpressionUUID->"b7472f17-cc13-403d-99c8-cbc73f6109b2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10", ",", "11", ",", "12"}], "}"}]], "Output",
 CellLabel->"Out[80]=",ExpressionUUID->"70b324e7-b5b0-4fa4-bb84-36481a688d92"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Partition", "[", 
  RowBox[{
   RowBox[{"Range", "[", "12", "]"}], ",", "3"}], "]"}]], "Input",
 CellTags->"Partition",
 CellLabel->"In[81]:=",ExpressionUUID->"7d6a8219-d266-425e-82c8-e281e241a406"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "11", ",", "12"}], "}"}]}], "}"}]], "Output",
 CellTags->"Partition",
 CellLabel->"Out[81]=",ExpressionUUID->"d2f58f48-d45b-4711-bffc-715eed09b6c3"]
}, Open  ]],

Cell[TextData[{
 "If the number of elements in the original list is not a multiple of the \
block size, ",
 ButtonBox["Partition",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Partition.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Partition.html"],
 " will leave out the incomplete sublists at the end:"
}], "Text",ExpressionUUID->"3cc890d4-5ea9-412d-865b-c1ae166a26f1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Partition", "[", 
  RowBox[{
   RowBox[{"Range", "[", "13", "]"}], ",", "3"}], "]"}]], "Input",
 CellLabel->"In[83]:=",ExpressionUUID->"24fbce78-a203-40de-b9f3-f80c9726c641"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "11", ",", "12"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[83]=",ExpressionUUID->"09b80569-4df2-4b02-bb37-393cb9a7c4c2"]
}, Open  ]],

Cell["\<\
However, you can allow for a \"ragged\" partition, wherein the last sublist \
can be shorter:\
\>", "Text",ExpressionUUID->"d3e8b0ac-9457-4e84-88ac-add86f2d7c6e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Partition", "[", 
  RowBox[{
   RowBox[{"Range", "[", "13", "]"}], ",", 
   RowBox[{"UpTo", "[", "3", "]"}]}], "]"}]], "Input",
 CellLabel->"In[84]:=",ExpressionUUID->"9681c4ee-8a9f-4b92-b2ea-ada6741e6f65"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "11", ",", "12"}], "}"}], ",", 
   RowBox[{"{", "13", "}"}]}], "}"}]], "Output",
 CellLabel->"Out[84]=",ExpressionUUID->"5851f6cc-fa2e-4e96-b360-f07fb73b45bc"]
}, Open  ]],

Cell[TextData[{
 "Apply ",
 ButtonBox["Flatten",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Flatten.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Flatten.html"],
 " to any sequence of levels in a nested list:"
}], "Text",ExpressionUUID->"e80d2718-4a2e-423d-87bd-ff14b8f5bb88"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Flatten", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", "b"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"c", ",", 
      RowBox[{"{", "d", "}"}], ",", "e"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"f", ",", 
      RowBox[{"{", 
       RowBox[{"g", ",", "h"}], "}"}]}], "}"}]}], "}"}], "]"}]], "Input",
 CellTags->"Flatten",
 CellLabel->"In[85]:=",ExpressionUUID->"53d838b1-4ab6-4075-8802-434b4511e187"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "a", ",", "b", ",", "c", ",", "d", ",", "e", ",", "f", ",", "g", ",", "h"}],
   "}"}]], "Output",
 CellTags->"Flatten",
 CellLabel->"Out[85]=",ExpressionUUID->"0beaae51-e7f4-47d7-9a3b-a647c8aefd32"]
}, Open  ]],

Cell["Flatten achieves the inverse of Partition.", "Text",ExpressionUUID->"31b971bc-7fd4-4b3c-b929-62d457aa5d46"],

Cell["Convert a list of pairs into a pair of lists, or vice versa:", "Text",ExpressionUUID->"c4418935-cab2-4fed-a782-9bc205f83408"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"3", ",", "4"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "6"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"7", ",", "8"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"9", ",", "10"}], "}"}]}], "}"}], "]"}]], "Input",
 CellTags->"Transpose",
 CellLabel->"In[86]:=",ExpressionUUID->"0777d376-a04e-4ffe-8bd8-24cf532ac252"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10"}], "}"}]}], 
  "}"}]], "Output",
 CellTags->"Transpose",
 CellLabel->"Out[86]=",ExpressionUUID->"7900099d-391a-4da3-8fb8-7f2ed83d3a08"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Transpose", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4", ",", "6", ",", "8", ",", "10"}], "}"}]}], "}"}], 
  "]"}]], "Input",
 CellLabel->"In[87]:=",ExpressionUUID->"3b9451bc-63d8-45ba-9cd4-02073e5577b0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"9", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[87]=",ExpressionUUID->"0e848842-0a2e-4bcb-b4f2-20135a73c8d3"]
}, Open  ]],

Cell[TextData[{
 "Wolfram Language encapsulates, in a small number of functions, a vast \
flexibility in rearranging lists of any structure and any number of elements. \
You can find a list of these functions on this guide page about ",
 ButtonBox["Rearranging and Restructuring Lists",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/guide/\
RearrangingAndRestructuringLists.html"], None},
  ButtonNote->
   "https://reference.wolfram.com/language/guide/\
RearrangingAndRestructuringLists.html"],
 "."
}], "Text",ExpressionUUID->"4a90fe28-e476-405a-8b29-b23b4da9a62a"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "CYUButton"], 
          TextCell[#, "CYUButton" <> "Active"]]& )[
          Framed[
           Style["Check Your Understanding", "CYUButton"], RoundingRadius -> 
           5, FrameMargins -> {{18, 18}, {15, 15}}, ImageSize -> {205, 51}, 
           BaseStyle -> "Text"]], (WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         Framed[
          Column[{
            TextCell[
            "How would you create the list {{a, b, c}, {c, d, e}, {e, f, g}} \
from {a, b, c, d, e, f, g}?", "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 1]", 
                    "info" -> 
                    "This partitions into sublists of size 3 with offset of \
1. Not quite the result we are expecting.", "index" -> 1, "correct" -> 
                    False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 1]", 
                    "info" -> 
                    "This partitions into sublists of size 3 with offset of \
1. Not quite the result we are expecting.", "index" -> 1, "correct" -> 
                    False|>["index"], {}, 
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 1]", 
                    "info" -> 
                    "This partitions into sublists of size 3 with offset of \
1. Not quite the result we are expecting.", "index" -> 1, "correct" -> 
                    False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 1]", 
                    "info" -> 
                    "This partitions into sublists of size 3 with offset of \
1. Not quite the result we are expecting.", "index" -> 1, "correct" -> 
                    False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 1]", 
                    "info" -> 
                    "This partitions into sublists of size 3 with offset of \
1. Not quite the result we are expecting.", "index" -> 1, "correct" -> 
                    False|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 1]", 
                    "info" -> 
                    "This partitions into sublists of size 3 with offset of \
1. Not quite the result we are expecting.", "index" -> 1, "correct" -> 
                    False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 2]", 
                    "info" -> 
                    "Correct. This partitions into sublists of size 3 with \
offset of 2.", "index" -> 2, "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 2]", 
                    "info" -> 
                    "Correct. This partitions into sublists of size 3 with \
offset of 2.", "index" -> 2, "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 2]", 
                    "info" -> 
                    "Correct. This partitions into sublists of size 3 with \
offset of 2.", "index" -> 2, "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 2]", 
                    "info" -> 
                    "Correct. This partitions into sublists of size 3 with \
offset of 2.", "index" -> 2, "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 2]", 
                    "info" -> 
                    "Correct. This partitions into sublists of size 3 with \
offset of 2.", "index" -> 2, "correct" -> True|>["info"], "Text", FontColor -> 
                    If[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, 2]", 
                    "info" -> 
                    "Correct. This partitions into sublists of size 3 with \
offset of 2.", "index" -> 2, "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, -1]", 
                    "info" -> "Negative integer cannot be used for offset.", 
                    "index" -> 3, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, -1]", 
                    "info" -> "Negative integer cannot be used for offset.", 
                    "index" -> 3, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, -1]", 
                    "info" -> "Negative integer cannot be used for offset.", 
                    "index" -> 3, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, -1]", 
                    "info" -> "Negative integer cannot be used for offset.", 
                    "index" -> 3, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, -1]", 
                    "info" -> "Negative integer cannot be used for offset.", 
                    "index" -> 3, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, 3, -1]", 
                    "info" -> "Negative integer cannot be used for offset.", 
                    "index" -> 3, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 4 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, {3, 2}]",
                     "info" -> 
                    "The original list has only one level so the \
multidimensional syntax for the second argument will not work.", "index" -> 4,
                     "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, {3, 2}]",
                     "info" -> 
                    "The original list has only one level so the \
multidimensional syntax for the second argument will not work.", "index" -> 4,
                     "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, {3, 2}]",
                     "info" -> 
                    "The original list has only one level so the \
multidimensional syntax for the second argument will not work.", "index" -> 4,
                     "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, {3, 2}]",
                     "info" -> 
                    "The original list has only one level so the \
multidimensional syntax for the second argument will not work.", "index" -> 4,
                     "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, {3, 2}]",
                     "info" -> 
                    "The original list has only one level so the \
multidimensional syntax for the second argument will not work.", "index" -> 4,
                     "correct" -> False|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "Partition[{a, b, c, d, e, f, g}, {3, 2}]",
                     "info" -> 
                    "The original list has only one level so the \
multidimensional syntax for the second argument will not work.", "index" -> 4,
                     "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}]}], 
          FrameStyle -> Directive[
            GrayLevel[0.92], 
            Thickness[Large]], RoundingRadius -> 0, Background -> 
          GrayLevel[0.97], FrameMargins -> 15]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1011.5, {165.6724090576172, 176.5210418701172}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"7597a2eb-f4f7-4f84-bcc7-\
404f57b9131b"]], "Text",
 CellTags->"CYU",ExpressionUUID->"8d285219-c5e1-475b-a4c0-13c94e162244"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Association", "Section",ExpressionUUID->"80b49239-ea6d-4723-9c86-d69097eef7ce"],

Cell[TextData[{
 "Associations provide generalizations of symbolically indexed lists, \
associative arrays, dictionaries, hashmaps, etc. An Association represents \
labeled data as ",
 StyleBox["key \[Rule] value pairs",
  Background->RGBColor[1, 1, 0]],
 ":"
}], "Text",ExpressionUUID->"3a2ee7ea-f070-47fa-a4b7-795a1d09600d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Association", "[", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}]}], "]"}]], "Input",
 CellLabel->"In[96]:=",ExpressionUUID->"7611598f-773a-42dc-b3f3-2f7d79c38360"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[96]=",ExpressionUUID->"6878a6d4-583a-4f16-9775-6cd9c0a069ba"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}]}], "\[RightAssociation]"}]], "Input",
 CellChangeTimes->{3.9428480805015783`*^9},
 CellLabel->"In[94]:=",ExpressionUUID->"c99abd19-7bff-4547-8c75-6b586e7f1502"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}]}], "\[RightAssociation]"}]], "Input",
 CellChangeTimes->{3.942848082896538*^9},
 CellLabel->"In[95]:=",ExpressionUUID->"74f93f99-3f0b-4c2f-9c6f-9c6cd5edffe4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[95]=",ExpressionUUID->"3b001691-26de-415d-9130-edbea589bea0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"<|", 
  RowBox[{
   RowBox[{"a", "->", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}]}], "|>"}]], "Input",
 CellLabel->"In[91]:=",ExpressionUUID->"c4375627-6637-43cb-886b-30c88d3b9b49"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[91]=",ExpressionUUID->"96054a26-ad66-4155-ba76-915fff7a1286"]
}, Open  ]],

Cell[BoxData[""], "Input",ExpressionUUID->"f94ac845-2d12-463d-8719-c7fa9747c0fc"],

Cell["\<\
An Association can have any Wolfram Language expression as a key or value:\
\>", "Text",ExpressionUUID->"9f004b51-a03d-4916-832c-2dd4e3b50bef"],

Cell[BoxData[
 RowBox[{"assoc", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"a", "\[Rule]", "1"}], ",", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "2"}], ",", 
    RowBox[{"4", "\[Rule]", "3"}], ",", 
    RowBox[{"\"\<cat\>\"", "\[Rule]", 
     GraphicsBox[
      TagBox[RasterBox[CompressedData["
1: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
35D/3Zc3/+WvfvCPv/js3331/h+9M/r0IPc7j1o/etZ5bxT58knxrT3viwPX
ixPXxchwdWR8drP6+Mzy+Gj10aHj0ZFztKVPxRnAjMJR1maI6fKRrU6M00W8
dcOMNBpkuFaQZu1sOEQqFLmgjqUyxN5AcvXIunsgjafh6RwWtK39Q329KTAY
H2i1D6pV5VZvZX2DCLZxKMaKJTiBMMUfJCUSDLBpC3ku6C+nJ+6zU0+jqgj6
iQ4b3KiaC63RTcIlHu41KfWuR4/L+kTpMqE9FJSbzFSBcBtUmtxsjlFviBpN
KfhNCgUWSGLjsaXfVwwHqnKVVd3iNXfF3T1Ze1vSbAtAXaoWWYUMtZil5dMU
kEjzRVpnKG0ORaUeq74raOyIAPHeoazYpafrxHKfDiS8cy4fXSp3L2R7Vwpg
hZ1DdqmPB0t155z/+APzi4/tj962nVytVKrCSIheTKqSflnQxrNJ8SYOPKhj
7KTsT7ci749SHx/lXp2Wf/rh+E8+O//Zpxd//cN3/s3Xr/7jr370f/79L//D
P/udf//z7//Dz7//3/7+l//0f/3Hf/yjV985rP7TP/7VP/1v/+q//ssf/09f
f/zr7z/70dPB96+bf/CiDy6A9w+jXzzNvxh799ua8z3TzYllPFLtbcsux+aL
A+vZweqwp81ludmsMFeSRdPCzSjX4SW7PdRYlJ9Ly5JRXnidvukmVEvCWk2Q
y9FicXSrzX3ydO3sQp/Joat1yt6+4vpm7fzclssxwiF8rSoFsDwb6HSO3eqq
+gNtf6DubSm7XfnWlrzTkXQ6svNT56PrjUpRYDZMK6R3tLJJmxJmk8AsomW7
DOEzEGJ2JlAHOL3tXUmtzx8cakGlzZbZhRpo2apinZ/IUCtNfrbECMXR6SzJ
H4YFs+h8lzEYqw7PzfvHxk5PnIyDojoXDWNiESxokYEoMluh5VqMTINW6LJB
ZB0cq/cu9UCM5S1mbZvTO5Rsn8p2LwBBBeA4PJO09tjlLWJ9SO0fcc6ea56+
Z336ztqT565OWxELMQoxRdIryXqVEYvAISUEtPRB3Pq4G3r/IPO9x+0vLtu/
/O7jX33v+dcfX/7ii2c//+LFzz5/69c/fvWff/3H/+Vvf/n//uPf/dP/+u/+
6X/5H/7zn/3o3/7k1T/946//67/46f/49Sd/+unNn31+85O391+dVn/0vP+j
lwOQS3/3ncbL481BRXq6YwLgtrvCQU+4N1AOu/Ldvmaroy4WhZkcMDKhN8h0
eKm2NfyqHe/10IIbjIiPmYuKWmX14Z6115OBVRaOICplGiD49tvu/jZ/e1tw
fmF69x3/tz+KHY9X2m1puyH3rsM968B3hAdjE5DneGzc39f1+7JeT3J1tQY4
Dgea4/EquCpWLRCt6t6Kdp6JnrBK4SmPML0u8plJqwp4okGuAqXsSys7wtpQ
ku9wo0V6OE8ttkXJMssXx0Xy5EASsxGDxwpET3hxMw3Nd2mjM+31i7XHb7mP
z8ylCtPnWwoG4aEI0utb9AaWMuXb9zhlm/RMi1rp88Di3b/Qbx8pO/uS/pFs
50K9e6kaP9YfPTEcPdKDYNMeccsdIpjGgDa+ll480928sD594d7qqqKb1EJE
ktuUJdaEGac0pGeC6YSM5/WNj06Lv/ji/OuPTv/s+89/8sHpq0f9z24GT3dL
T/dqX3324vfeu/6bH3/xP//513//J7/31Qc3X71/+evf/fbPPnr8k3ePv/7w
7IvL3u8+2/3h89HHx9Ufvtj+6YcHn12VPr3OvTjcPO6bjrdNZ3um00PD2ZFp
dyBvtwRADq22PJvlBsP0dR/FsopesWHMFuwKGBPSqFkEDpWLCsbDtfOjtX5P
3qiwsxlirUx7/Hj1k28HLi4M4335kyf2jz8Mf/4qc32+OthSDDqKTR/C513e
3lacnID2pBjtqnZ3lN2OcKsnvrq0g5/T7yn3R+Z2VR7xk9yrMLtpmYWdsMoR
CY8g5uI5tTijaGmzgk1tMfI7/FSbFSqT/fnfvNElT4nX2JEybSONi1eoyRot
VaeWtrj+DDxRx1R3mPvX6kfvrr389saTl67hgTxfpRbKtEyJFIzDAwlosc0A
Wks1iMD76gPe1oHi/+PpPYMbybNsv1HoxVNIqzUzO90z3dNd3tB7770vek8C
IEB474HMhEt47z1h6L33ZLGKZdtXmzE9dmcnVorVewrtPrkXoW/S5XSEIm5k
/JEAWSz88tx7TiIBqMw3oxMIapyNuKdJ46zXexqMviYgaHI1YMZSKZYrQXMU
mjy9o8LiqXH5WoOhAVRWSxx9zCVWCogNyGy3gTeqIHbQe8vY/ZXC0VoLb3An
hGwFkHdn6WdrHr+GbhJOKWgD7Il2GXXQpeKeLAaebyW+udz43cu937/a//Z0
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
KJlCSY3FPuQNTGs0HVRqHnkmi8cvpTNyZfIqjbpFyC+1GXswUQ3CrUBYFQZR
Y9g4mnaS/fiIXtqu4jcq2HUiRplMUoXjzUxmFp2exf3/SjrvqDbTM+17N5NN
NpOcbHYyM56xx73Qi+lgwAYbN2xselfvvfcu1CVASCAEAoTooiN676a6jG08
tmc8fZLMnE2ym6/t98f33STn3Oc9Qocj6Ty/57rv65L0viJHUvBhSvEVSI4y
esJgK3G6j9NSW2qruv2PH8JGk86Xkk+ytDEEYQiefaHKklVluM7lxCglVxnE
WAYhCV+emB7/UULk8aBT78dHBl9NjL6eGFRyO0HOqhzpcgx312NKb50++ovT
H7zz7pEjNxNP70y2fL83dDDV+Pls/Uab5EWg+vPV9p8OZl6tdL3dHPhmZ+xv
r9ffbox+uzO53u/qtoll2Hv1cjyUkVuio+cO1otn27UzrepXi+1fb/btDNS+
mmv785PxlzMt3236P5tt/Xq1+4tFHww7QAZJ89GA/e2sb9jCVZRdL447ib0W
Sc9JLksPLko5X3E1mFuS9jTg+nq166ed/j9udkAM7FKWL9YyZozEpWr6hpO7
YKWOaFA+Xl4N+qq+NMmOy4KqwWTB7Ft2CtdcsjE9db/D3MItc1LyRg2MBYd0
qV5G5sUUoU9h6GF4RgSCGHz4YT0umECLpjLiUdhQDCaczb4sk2bxeelUcgIB
HwX3s/kpbA44mStV8pugPgklWUxMrOJcP5SeIk/NucknpbIJoLIEZHkYnZUo
01ynM2KYzFgwrlzKJRU3FTKjVX5joIUw1EFtriu1Gu6JRKk4fEgl4QJeCMkl
GC8MY8riaNwoDOY89ASHpUzNv8fEXMUWp+XdjEcW3s67nXknKyM5Jjwm+JOM
pCBsxV2jiquVs29dT/rwdz//9TtHjv/bkfMf/JPHyPzLwfSftnoe9xtWm3mv
x2verHifL3lX/dWfLXd/+XD47cYwsHs80dljk4mQ2WpSHq0gFXEjUk2+L8Hc
aNETx9zSP+6P/Lg38mjE+cVSx18/nfxxd/i7jb6DqeY3895vV7ofD9YF7ILZ
Rvkjf+1uj61VhFWWZ3HupdBux/Pyr9JzUvLiz+UnnRMjb+0Ou/7P6+Uvlzu+
XW3f6la3y0u7FWUBHbpbkDdZhX7UIgOCDvw1ZW60/EGUi5KtLIirwd5Ydomf
9JgmrKwhHXmjWWNC3mzjV05XC2ZrRcM6+qiBiaWFlKBPkjlRNG40inARgTtf
hjiDxgdLZZkU6iUUMoiAj4CxCMWgJtBpcWJ5JpufRKVFG413lZJMs/oOaJCP
jxEQ4qWU1MPTzHGJLHwil5rKIl8m4C6RGDEi9VWeOFkoTlFI0vjMWBEjlkeK
NMmvNVhz60w5GtlVsTCFyY7BU0Ix9BAMLzSPeKyMdhbPCSczoxTKLKupSC26
R0WnIQsSiOVZZTnpD26lJUYHx0SEnD1xNOLCR1EXj15PjSrPv5F/LyMtMSz8
/NGzx399/HdHbiad63cpfnwagBX7Yqru66mavW7leo9uc7gW7MeTyZaHgw0Q
GdwqmtfAtXKRqJuxclwO5k7M/eQzYGVV1JwGBWbNb53yKOfbqz5b8P6wO/Rm
uePFVPPree/TsYatPttapxF6Jqhvv7923Wfo1VMBnw6dbcLfZ2TH3486di/y
45thH5alh/ywM/6/3iz/cWdoyau2km83C/Mn7HQguOeVP25XvujUbjWJRzTo
TmGRj1/kZuTY8bcmrIyHrZpxG6tXjQtY2BM2bp+aqKu83q+lzDulAQtnqkaw
2apDEc9DjuDLkqFgDRHYc0VlJxDIcwrlNZhWZFIUkRBBJkRRiNFMWjyPe1mj
v83gxQHEmpp8sDFqyTUxI4mNiyZXBNMQEXRkNAUVRcPFc2ipbHoalZqIIoey
pMk8SYpAelkmSxdyE9ikCDouRCVMNSqvy4WXidiLCMTpw7eDmFEEdgSaG3J4
yjDiaBnhPIF6iUSKK8w9fzn2t/iKK6iiNAY2tyA7NfHShaO//9ezpz46c+L9
1Lig6JCPgWDx/czM1OjQ8x+eOvruB7858tGvj9RpqGBOvljtfDpsfTvt+PO6
Z71FcHi6botysUMPsc5fLfDqmTpKIb3gqo2HUuBzhYhbUOzya3lpZ8W421LC
7alW1f5Y/Z8ejf70JHAw1wpxD5rn88km0CCwm2qUrXeZdnpt0w1ScJs67K1q
Sl67gtTIR6IzQhM/eqfs8sXKjLDyKyHdZs6LqRaPHGWj3XNx83tUyAE9ZsXN
X3cJwMMs1bFb2XmmijRg16dAtAlKwGSOmul+LaFLhR+oogwa6Z1KXD2rEPDN
1onHrdxRE2u73fisvw5DvIDCnxNIk9mCODT2LApzmAphJEmlaSxGLAEXQiKE
QR8TsJOFnBQehHdNJokdqdJlWavvmwx3hJwkBT+VT4ljYqO4xFguOQEGFgUX
A+rD4aIR2LBC5GkMM5TCvwQaF4gShcJEJjWcS4+SCZIM2usaxRU87nxRydHD
D4hZERXEs5XMC0DwPuoYRZBEZqVGRP7s+NEjD26Hi1jl+Irs0gcZyZfOXwo9
febEe6HBn5w78/7l+KCEyDMgQIWIgkfmxkedOf77X7z3iyNxF94b95lfLnU8
HXc+H6vZ71Z+Nqh97tcMWEijTt64S9xlpnfqae06up2PZBdlGOkl7Xp2rRDd
UsXYnWiZ9plfrPR+sz8Ghuf/fr0GnvZgoQ04PptunmiSbw3WHkx7YKjtDtqX
fXq/hWlj5Glxt+Do5JTW0AsUFdeo2TH4m1EtSqIam12UdJp4O8ojR+uwN31K
9Hy9YNbOnqymPu8z7LWrZ6oZEMwDZlqPAtUuKhvQ4kF3fRq8m1faJkFO2IWT
dqFXhmmVoEZt3G41calJBTVRK5h3yaHo9Ag88SKPF0ckB5eUfITBnKXToyDr
iQTJhxlccQ0ig4CdyGPGQ/RTKq8x+DHQco01d4227JqaXD43AUK9jJsiYafI
OGlS3lUx9wqbmUqjJeFJsShSxIOKY8WEMzh2OIYazOBeEkmSWcwosSiJQg4R
8OOVinQOJwaLP09mhFPYkQXIY+X0cyheeDklCEOPrcDEBAX984UzP2eS86Uc
rICGqSy8ExF0PDLoxJkT/37uzHtnTv0uNSH4cuzF0vwsIRuLLr93KfTYiff/
5fzHv8QXXF3021d6zUvtyi9m6l8HrF+MGb+dsT8eNO4MmF9Ou9e6jX4rq0GE
6LNwR5yKgEv9dLJ9tc/RpmeBL/3Ts7lnS91A8K+fzb9c9C73mLaG7YBvzqsd
rOMvdxmfTbhBjEvtumY5GmwnZPZWJRZQuoUIZeV1QVGanV1iIj/os7A1mNuY
zBDwpaQbobzc2C41esRAnHdw932qzWYpxPNBPbm/igjHLhW2V0sYtbKh/DrK
fKNisUnVp6O2SdEDZuZknShQw+9Q4pea1ast2kETc8jEXHArYTGZf19SMjmk
ovw4mRQsFCQYDq+rmX54kT17gcVwR8xP4jJj4B6rNQdPC+ErUwzVd8w1d6ur
cxTyNBEnQcxNlvHTxZzLAnaKkJcmEmXyRRlMXiqRHV9KulBBvXh42VLKRWDE
lySRqaGgRHg6NPoMPLVMlsrhxVJZkURGWDHqBEl0iSFPwjCic4rPXs744NzZ
d0589DPggi65b1ZLNGJORko0dNFPPn73449+EXzhvcvxF9ITgzJSQqHg347+
9ghMwKSwjxr1rAmvbrRBPGZngY35cbnxz2vuryar3842vF3w/I9nY2BQIbJB
fNvosUA02B6s/24nAIl+3FP1dK7jv7/d/f7x1Nd7o+uD1duH5wV3PRyqadHg
oAO/XevaGqzZG7bDHmhRYXSkO43iCr+F0Wui9RipnTqyk18KcpvzqIBsmwpn
JGQbCXeyg39TGncUm35GXpS46havu8V+OWKuhjNp5wVqeaPVHAiJPVWkebd8
p9u61qZ7O+udb1K3yXHtSsKkU7rYqpuql/UZaDMu2YxLCv823SCZdUk3O40q
RQbg02lvgCKIhItsVrRImFilvaZTX9cqM1WyK2A/1PKrxqqbVmO2yXQbRw3W
2G5VWW7WOHMPz5LW36CRwji0aLngCjRbmJjgdjj8dLYgncRKRJIjiIJYouAS
R5kCLoXADGcJD3s1gxWlVmcAQRIpWKPJFEtTSJTDb9pUYE9TBTGluLNociSe
lnwt6+Spkz87/v7PTnzwbmL4RRmXphGyM5OjoXMeO/rz3/7myMlPfvnJB+9c
Cj4aF/ZJdNCHSeGfpMecLb6TWMWrnINkp8Q2yZFAcLGR+9Sv/WbK9nrE+OmQ
+fGg+Yv55tV21ZpPuztQ89VK50qHYXfQ8e3W4HC9bHvUtRtofjLr+3p7dNVf
++lM83xHVX8dN9Ak3R2pO5hr2R9zrnQbV7sMgQaRS1LRICzrNlCapAgT5V4d
twhk2G9lLbZpX097+gzU1TbtoJnRU0VQlqWx74R1yg/fCuuSlA1psbM2BniV
SYcQKAMamKorbVXgaR92mV9NeXwq4oCZDexmXIqAQwI116zZ6DavtGlHqjkb
HYavFn2PBmoDdr7dmicVpqhlmTxWLA51jkWLArmx6dEK2RWJ6LLZmG2z5ADl
GtsDV32JCAQriJUZMvW222r9tSp9ls1616C9Af4EBqVUkM6gxpHI0QzuZRQp
KrfsTBk+pJQUJLfelhlvYBnhBGYkV5zMFyYJRMngahz2ArUyEwpmLqSG8vIT
N279qqD0YxongURNwBNSivKjQ8796vh7/3zu43+7+PG/I/LvVaulDFzZlYSg
Ux/9y29+ceTY+0fOHvvlr44cuXjs3fTYM1VCgk1BzcuIqFORxjxVbhWmy0jy
qREu7v2HXvFGM/eLyZoudaVPifx6sXXWLdruNe0P1UBHfTXf+oedAbCaX673
Hcy3H8x3QNZ4NN680GGcblP5a5mjLsHuaO2L6cb1HsNsi3yls2q1o2rEzhmw
MTzSCkFhgleJmnaJlttUq96qYRt7zi0P1HKgOpUYUNmYhSbOi+1RIFp4BaN6
Qq+8csxAnLGxJm3sqXrJmFMCElv06mfcqs1uG5TfzF5q06/6TMtew2yTesql
AHxwD1AG0e0P2L5cbNvrt8LTtcgqbcYHclE65AIOPRbiNpcRx6JeYjEuCXiH
c7CuNt/hKASCsMjwJ40RJZCnaG23NKYsFj8GpqfFfMdue6BVXJfw0+Siq+BX
iaQoCjMRQYwsRFxAUaOgH5L58TRBIl2QyOAl4EhhSNR5IjGs2prb6DhMglAW
/V0+K4GEDUGVnykuOqFU3LAYis26cgbpVkL474//9siH/3pY4Sc/yIwLSwk/
lXoJ6sTJ94+8/+6RXx85khDy4d200AYDL+Crnul1ZsWeMPLKR93KnmoWLPjD
bt2cm/e3/d4vp+27Xap+I0mJuLLhq3o56fpqyTtgoQGIb9e7vt/seTXvebPo
/Wl/9D8+nXq71gutFWqzz/LZXPPL2SZ4qNUu3dMxx+6AbaJBWC8orqbndOsI
s24JSGylVbXYLJ9rlEw5RX160qM+616vcdbBGzWTZ2pZZnQGJeMM2BUwLVNW
Wo+sYq6Os9OuXW9RAaCdAedqp3nLX/vVau/ekHPULgJYewOO5+PNT0cbV9qN
/1DfkxHX8zHX57Otb2abX0+5n405YIfUMh8YtXdV0mtyUQabFsfjJIsEaTTK
IT4+N0UqvQKhr7om32DIFonTuNx4Di/eUJ0NNkahzYBOSKVGQJTTq28aNbeI
qBAKPhKDDEUggpE4wBeUW3auDB9GZMZV4ILx1Cg2P4XKjEOhgyrKz5aXnmZR
YyXc1GpdTr21sKmm1KS4RUYEEyqC5NyresU9CjLmXsbxuKBfnvztkQvv/1PY
sXff/9mRlOBjuLzrhMIs9IPUvGvhYSfeOf3ekcKsSJ9d7jawn6307061jbbo
oj7+Z2z2pQ4T4/CLMQbiUC1jqoH7n4/9naqKlTYZmHl2Xvyev/p/H0z95dEw
aMerREBThfrzk6HvNrrXOnXLkP5mWl5MNk26pN9v9r2Zb3nYa1poVQK7z+c8
jwarx+wcnxqz3q79r8ejf94dDFSzx2s4U3X8Da92yETrVuMOhusOhmsnbfTZ
OuZao0CWGwU1qscFjISAkTRmIu90VD3uNS15FBtd1oBLudJle73Y/WikYdQh
DtRLt/vtnwZc8BpeTjQ9GrA/HXZCz/x+rffLhfaDQP0Pa13Ph+vWvJo2SeWA
iSoTZIJ75DMvU4gxIv7hFd2JuAgBP1WruS2WXOXyUhSaLIv1gUx1DTKgWJFu
sN6VqtKhE/L5iSBVGjFCyE40abJL8z4pLzpVXnKusjKoHBVaUH4hr/x8CToU
S4pGYUOp1Hg6Ix6LCSeToumU+Iri09nXf4cpOWeWZVsUd5xV+Q36fD4+TkRK
VLMydbzb1NJLpTfP5aafvJt0Ijft/I2YY0LMPZeGOdNpn2y3Qk20m7rsooFG
pZ5TBtQ6bPyBhsMvYTplGMLdWBUhW0/N2R6odghKoEmC+fzvNzMm0k1om8/G
G7f91T/tjRxMNUE7WvBIt3pAj47XMw2PhywPu7VbXbrdXvOjftuzEeeryaZn
I3U7fWa458100x/Wu2HzTzr4bl7xVof+xYjjmwXv60DDarPi84nGh17tmIk+
bmGOGimPfLpdr2pMh1uwMx42i1o599v5eUMapF9ZOWoiLLoEa23Kw/Jp17ut
+6Puz+Y7ASLgO5hu/dPuKMxlwPdktP7JkAPm6R83/T9u+wEfvBhg9/1yBzz1
vEvSLkPCzqGSwH7EQuHQkRxmKpuVgkQEs9hJStVNBjuJQI5mCy9Lldep7Hgc
BabY4ZdF6ZwYBjOWRosGfGxKrFKUUaN7wKcm0PCXCNhoiIGVyIgSZFgFPhpJ
ikUiw+ABGdQkFj2JgIqk4KIZhHhEwZmynJMCUmJDVZGaeXjqlkdfbJfkeHSl
NaL79fJiI+uulnpTSbhpZD5o05Oa1NjBenFPDd9fKxxyyvcDnrfrg6u9dvCN
LiW+SUNq1VO8RtpMW1VfLWet1wJFfxCjwmYZqfc+nXC1aTCPRu1+UESL8g/b
w6/mOp4G3EO1vIVW9RdLLd+teTe7YX5Jp+pZ0G/BuB6M1e50V222qfa69Ls9
hi9mm75b9j4ZsM42CEZt9CEzZUBH+Gy07lGPcbdT92Kg+pnf+v1861KDqF+J
WQQlumVbzbJNt2i+mj5jIc9YiCsO5rC6cspCWKhjTtgo007OlJO31Kp8OlYP
DurpRMuCzwD13eYA4Hs+4YZt9uWC7+mwA3bRdysdsHMOAo7DfeU3/8d2359W
O76Z8yy7JfAyHLR7ZHwCFhkFRyI+jkZJplASEIhQKiOxAhlcUHqqEhNMZsRh
iBF5ZSehGXIk6Xhy5D9+1QKNPI8sOcNnJBoVt6HqjIUSTgaFGIdCReYXniso
D0IQYtGkeDQyElFykYSJETLTmcQkTElQRe658vun2Kg4uzLXZ8PYBHfM7FuN
8rxGaX6rqkyBSnfyi7oM+GE706tFQy14FQsdquF6zkgDf7pZHqgXL7UbVjos
nTpWs5I43aIJNEohoL2Y9Wz22zZ6zYAMhteQnQteEWS42KEbc4mXOg0Hc617
Y66pZt2gXTreqJpvrQI/ueU37vUbV32ySSdjpVW05BFM2WmzTuZmq3TezvSJ
S5/6LTvd+m2fdqFB2CGrhBXza3GPu41vJ1xvxpzfTTd/P+MBT9IhLGtm5G66
ZRuN0ift2s1G4ZM25Y5bNGXA9gpy152MfxBccrK7lOVAcKtHv9ljXO8xrfZY
p5q1m/21MHz/9mJuf9ix4tO/mW97BgIcrv1swvXVQsunwzVLHhnspT+sdfxl
q+8/d/qBYLuk3MMvahWW0MipyMoIOiWNTr2Mw8Sg0VGVlWEEclxe4ekb2b8v
LDuLJIbfL/7kbtExAitOorkB40wuuyaXZsIgI6JCWYRLSm6GQXq73lIGjIAU
ChFZUHShDB1JZKZDIqAQEmm4eAIimoyIpmPiCaXh5XfPVN49raJfa9aXt+kR
Pv3hD1c5uHcPL/XJzxuxMAYMtE41FhxjLfNuk6Rgd9DwdsXdoUf02QhjTo5P
i2vXEPotnKFq4WZ3zUKrBkAAta/XO8FpzLcowGaAUXw67vxxf/iH3cH1PusX
q10rPdbFTtNit/XxeNtqT91ip22tp2a8QeK30BY84t1+3Vq7dNxOHjKip2rJ
q40cWOoZG2XSROqQlDVxC6Axgtb2OnRdMgTUdovqea8FtDZtYUzC4BNXDEIY
F1fut2p2muXrDv60gbjdIJw1EgNqhF+QO2tCB7SVfkXplJUMBHd6da+mYZuZ
pjyKOe/hJ87/74e9//lyYacfjLHnx63BnV7rXh+08bpX466ng7bVVsWyR/Jy
pOav272wc16POhacAif1nodbOO/gU8hpxUWhZFIKlZJaXHT4S8GFhefKKoMZ
7JTcghP5JSfLURdv536YX36KK70qU9+USDMZ9Hg+5/KhBRJfIyNDucR4p7Go
uiqXTU6iERJYtDQKOZkrzJJr80WSbB49o0qUQ0Ml5GUdxxaEiQjpzIo4XE5Q
iw7ZbSW6pEV9FuKAheJg57TLK/16gl9H7VDgINuCrxuupndqUYE6ZpcB3WfB
e1TlHkVFp46w3mUCnzbj1gzXCB6POF7OuP6w1ffpeN1alxZ8y5iD99WK74ft
vudTrhmPYrXHPNEkn/z7hRwfDjpnvaZJj26gTjrRpJz1qGAZt3sNo7X0IStx
wydbbuJ3SIv7FOXL9Zx+RaXwTogJkQ7xbaNJsu/TLDq44ENWGgSf9VeD1lac
Qr8c1c4rHteRv5twf9ph2GtRQ40osD52/rgW30y5MySvmNChJwxYGIIdosLl
JsFik+jNrBtSzGK7dmuw9qsN/3dbI6/nO59Pel7OtG32WiEyPBt3vQi43s61
gAbXvar5RtFWpwas0csR+zczzQNavBWbNVPLAXxwmy+9X46Ov3bj48KSECw+
Lvfvv7+GxYQS8OF4XBiNHns145cPCj4uLP3EWlek0WeLRJllJRcI2EiV5IaQ
lWLW3vPUVZpV2Ux8NAkRhikLIaIvcZlXJaJbQsEtDvO6hH2LT87Q8O7TK5Nx
DyIYxfGswkQz/f5oHb9XT3ELygZMMFlY+722uQZZhxLfb2IBHXDOEIUgHY85
RdA2d4brRupFYE66zPTdkfreaq5bSZhrN+4MOx+P1S16ZXtD1plm8WSjADg+
Gat9Nef+4WHvik870SCeaJQs+arAG4Di5ls1/bX8xQ4j9C5YvUVvVX81a7ia
2WsgrXlVYC16q3DyongbIWvcQnUxcmpw14c16K0m8bSZvOrkzlgovZLS9Qb+
nJUxbaLOmGmLdg6MvKedhsc+3VIdf0iN83JKRjSkGQu7U1DRJawMGCiwyAEr
HR45UMuCFPN6pgniydrfv8L65XrP54vdB1O+3WH3XJtpwq3dGnAezPr2x1xP
A65Xsy0zLim0o9UWFUzApUbprJ3byM7zSSuGjeTJGhbUuI2BpVwtQ8ffvn/u
Xv658srwguKzhQUnwfDTqTEkQhjYlfz8oyRyBIebaLDkUBixYuH1BzkncnOO
C7jptabCZifCpLxTmX8SVXQGioCI4NIvS3k3eKwMOuUKjZhGRiUjc8Op5cnM
ista2t1mFaZRgoA22KUmtkpQzXzEmJU/oGfON6qmHNKAXTTv0T3sswfq5RMu
5ZRbvdBm6LPxJ9zqDhOrToT0aMgtWkqNsHKkUfF2c+DLzd4nAceYkzXl5g/b
6Qtt8q9WvV+vtf/l6fCz8XoYNLsDNetdRkgHKz4d+Jb9kbpHI05gB6Nz2Ckc
rOEOHH4yW/WwyzTvls40iDzCMvL1IOGDS7BKMO9WGkXjevx2o3Bci1mwUmdN
JNDUdrNkAwK+RwEN82GTdNMtAT0e4tPg27hFw2ryoJLoV+BbOaX9atJsnciv
IXVrif1G2la3GazLzmDN4zHn85nmJxOu/bH6Z+NtD3udiz7bTIsR+sPuaNOL
Od+jcferufb1bvNINWcMHFejtFdLaOYU9Sqx03bORDVzDGKsiQIFN3JLIoFg
UUU0ECwpC6lEhZWXnS+DvMaIZzPjOJwEMjmCxY6v0t1WVd3EEMKI+JjS4ot4
TJRGecfrxjfUlCp4V7Cl56nocCgR64q5Kk+neMCkppIJl/msGzLWHTY6TUK8
oWXmNGuwg3W8Dh3Zq8Y7WUUNnBKfgjDtlPn1jEELZ7pB/rCnGuLtend1n4UL
+Na6bHC708gCiA4xCth1mtlwbDcxNwYdL5e6Hg7VjruE/Tby7qBpf9jysM8A
Nd8q+2y2EQS40W34NNCw1mmYaZIDRCAIPgd0N9ms6LYwxlwSuL3Urvt0xAk1
YmNCMK+jP5AUJrUIiuecfLAuuz4N+EkgCOBGVciJKuywohLwgSoBH9RGo3ih
lj1rY8FAHNWR+uSoGQt3SAU3cJ0i5JiRCQT71ES/gbrYrHw54X453bzVb3sS
qP98pePZdBPM6L3Bxmm3bqxBPddmXumpBYJPJlvAcYFHHXUIAR9ssNl6kVeK
aIN+pSWCBQXpgQvtr8KDZ5i08+7kBhUjYlCElOLKCCQ6GkeMqay4iEEHM2ix
ElGaQpHJ5yejMRdV6iyJIoMrTC0tPg+uVSG9ZTUVdHhI0EW14usW9V2d9IZa
mGmtym9yYozqfCI2DggaNCU+J9NbS+usZfos1DY9sUmJruMW2xh5Jny2m18+
auPPuZS9ejo0T2ibLyY8YDK3+x2TjSpQ36LXON+q91bReq28WkElCLCvRjDr
NeyMNW6NNEy0aLth2c0UUN83696f9vueTTgGqmlm2h04rncdmr1tv228XgS9
dLPHPNUo9duY7Vqiz0ABght+28G0Z2+o7tFA7UaHoU2G8IjLQYOwVhAToJYa
xfMO7qHcmsR+cUmPoBAg9ktKp0yk5Tr2sp275hRAF50wksd0JIC45BAsO4VA
cNLImq3mBwwMIDikp/Uo8fNu+UHgcLQ9GXW+mG76fKkdBLgFYhx3bfvrA07V
aL1qtdu+0e9c9ztgWG8NQWORjNQJ4IVtdhqB1JiNtdIom7SxQXSAr09zeNrL
RO3h6Uv/HxmiWBw=
        "], {{0, 100}, {150, 0}}, {0, 255},
        ColorFunction->RGBColor],
       BoxForm`ImageTag[
       "Byte", ColorSpace -> "RGB", ImageResolution -> {72, 72}, Interleaving -> 
        True, MetaInformation -> <|
         "Source" -> "http://www.eol.org/pages/328605", "URL" -> 
          "http://www.wolframcdn.com/waimage/hset050/ac9/\
ac99116210e54c705c59c5a92e61cb14_v001s.jpg"|>],
       Selectable->False],
      DefaultBaseStyle->"ImageGraphics",
      ImageSizeRaw->{150, 100},
      PlotRange->{{0, 150}, {0, 100}}]}]}], "|>"}]}]], "Input",
 CellLabel->"In[92]:=",ExpressionUUID->"e55e7f28-faab-4140-bb22-a443e2d53296"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "2"}], ",", 
   RowBox[{"4", "\[Rule]", "3"}], ",", 
   RowBox[{"\"\<cat\>\"", "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1:eJw8u3V0o+mV7lszyUwyk8nJdJKmYi4zM7NdVa4yM8hiZmZmlixbkiXbkpmZ
mYq5q7ua0t3ppMMzmTl3zr3nnvvHubvSa521tr/16pP9Wev7vc/ezyPZl1D0
Wtzfnzp1iv1jONQi+YUsFlJY96/woIHGJuJpWMxNGgeLx7IyUD+Akxj46oGv
t+vbtRHNiGQkPru5M64LlYglJHd23ECjIunUFLEwTy4v5vGyUOgbSlWZWF7E
EeS2Nl8j4FLlkptWU8NwkGjW3NWISi2qOzpJuUpQbNXW93nQRlU9AZNKwucY
1C1DHkbISR1xMoYslEE9oU+BcnOabfQ6E67Sz2tftPG2vYoJPW3axDwIGT5Z
DR4OWx5Nd6/5lLuDhr2QcWdAH9JSJ6xcJ78zqCZNOvhbIcPjJd/Dhd7Vfs2Y
jTFuJs+7aL85Cf3l2eTr1e4ZO9VMvQ3Hk1H9/XHjoynbSo9wtVd0f9y87pNM
2RhhDWHIQB6z0O9N2d5sBJ/OuZ/POO8NGwaliKCoPShoC0kQz8eNUPs+0U43
556X/6RPNCVqGec3Liq7psWt6ybigZt14OIce/h7LvaqkbSkI27ZmPvd/AOP
YNPCWTMyt+y8ZQN9yciY01PHFbgdv+zNsveTZe/LRc8nG32/2g+/XPU+nHW8
WPE+mupZ9igXe5RHY657056Tqe4Hs56Hc91LHvGCmw8v7P6IccFCX7IxD33S
NRtryUKd0eEn1Zg5A3HVydnqEda2xLeh0po6Eu/WX21pi+pExrS3XWtrvcSk
p7EYqWx2OokUx2SlaXW3lNoKND6GgEtubb6BQyeoFbdDflyvo1XOLcC0XqOg
YqGEzAKztk4nr2FQcoEgj1kuZd5mofLEhHINoyqgxsy6ucM6UkiF8zCbetkt
Q3L8hkc6pafPWtgbvbIH4/bHM56TMfukhbPuVx2P2mA9YmRO2njdImS/hjxi
ZsExbGLcm+3+dH/0wZxzxSuYtpGezJqezVseTBqgdgakn235Doc098YMHy33
Ho8YNvtkB2Ht7oDq3oR5L6RdC8iB4JJXDOv9sO6jBQ/UAmwGLd5NqxE3Zvbz
m7c9vN1ewZMh9Y6d9sgnmJN1AL5VLWZe3glMH/aJHgdkUPd8ol0nC/BtWOiL
OuKkDAkE55SwwI4Iu4Dglls4qSJMGSh7AcWnq/5PNwIPp20vl3t+dTj8eqPv
ZNL6dNa34dct9aq2B82H484ni30v1/qfLnmfzHYvdguWnNyjkBYwwb4a5LfN
aAgHfvGagwkQp7U4ILvm4mLIhUDwVvVVINjeGdvQfKWx4UJH+xUaJZmIj6FS
E+vrPyCS4ticDIOlikxPEQlKa6rO11ad5XPynabGgAdhUtzurL+AbLoMhUfE
cWg5Em45l1lEIxdQCXkkZFZXbSylPYvRkaOh3gko0T4xIqzGj6oIA2JkgIdY
svJm9Iwdn3K9W7LsEu4EdQ8mXcs9slWvAiCCEgHfql81bGK6hV0gQyDoEHQu
+ORf35/55v7Ey2XYrsx1Pw+UuDso+/VR6Nvj8H+8mn+90gMafDLjOBk1Ar7D
IR0QfLbgfr7geTjrXPZJ5j2CWQdnxs6GW/Rg1LTjl2z2CkGDpNIIQU3SkKRj
SoM99AlX9DgguKJB71opWyYioHwUEL8VZlAOBB/0Se77xfd8kn03b06NG+Q0
zatIswrClBw3wG6dVhGB4JSaOKYhTBupD8fMr5Z6HoP0ljwfbwZAhs+Wel6v
DD6Y8OwN2Tb7jVshExD8ZHvo+Yr/8+3wyZh5wc4GiLs+yYQGH2A3TSgwG6B6
OwOUuGAiQ8GCJ6luR6WVlJ9ubInC4FJray/W1JzBoKPxuFgcNoZKSyks+nFN
w+nG1nNWd5NaXykUFre1XMdj4pXicgEzG7po0N1pVlYycIlERAy6LYqASuIw
CsXCmwL+TTajVMy6ySMVqbnVtM4sbE0cvTmN2ZhhplUvunkTerIf9pWJNmdm
PpuwbfdKhxU4aKcfrwReLnihqU5ZGEse4XKP6PG8e6FHqKdUjZppTxZ6Juwc
vwK/HTY+nve8WHLvhaRP56ybAdGaj//RivvlkvPzbf/vH0yADKF/rvrE+0Pa
w2HDSq94Z0A97eTtDRuPxq3AETQ4bWfO2xkTBuJxSHk8qJjQYmVNaTZ82YqF
4qVXObCl82oUKG7DTDrycDYt5Alx60kvb9tK3zBRNs1U6KIPA9JXI4YXQ7q3
EFXYELtlQU3ctLBG+B2jgs5lA3lGg1u20uDKy07mvSHtF5t9n20HjseMxxPm
b07Gf7U39mZ96Mm8f3vQtOrXPJzxvNkaerbkfbXs/Xyrf9MrGVFhjvqVz6fM
+z7JlovjY9XB7po3kkCJUCs2OpmU19wUTSJmU8i5zU03GhquNDZebeuMpLOy
axvO17dcaEfeuFX7fn37RY6kUKqqEEuK6bQ0HjvHqLmjFJWQuqI5hDSPscmu
rWWRMqn4dCY1j0zK4gjKZJp6obiSSyvSCquoyPS6srOYhhghPp/RkYqtiujX
dY1ZCV5J06SFMGMhd7OqwrLOKT1+SkcZlmPHtcRtn3jeThvRIJfdjFEDatKC
Cyrbg/KOER3+ZNQElDf96nkH/8VC96eb3j88nAR2x6OaOSd9qZv768Oh3z+a
/HjduxmUH42bV/tkawHldlgPIwb2+VpQN+OWrPYptoLK+5OmRxOGRSdtzkq4
NyQ96OMNS5on5e0HPexpeafgdpQJkT8qbrvXJ342pN7r5iwbiYe9/M+m7aC7
Q49gSoYMc5tXdKTvVv0fDRue9qugFuSYIVb9igYXIN8Gza7qUKsGzJy6a1jY
eNDH3+sTfrnlfzbn2AtrYBf9+t7Udw8XvtgZ+Xgt+Onm4P0J635I+3rl7dD8
erv/s1XvSUi54xM+HFG/mXd+uuD6zWYAtoQVU7bpZO9082BNJeV2dcbRyHk0
Sg4WnYxCJXR2xuBJqXWNl8orf9nYdqWLEFvdfO5O0xk8M1WsLmfxsmXSEpmk
mElJISCjmfgkBafIILnVY2kTMPKJ6GQkIr6h6XobKp7AyMdRs8j4DCo2DY9I
JCESaeg0fGts+53LnXcuKWklAX37oB4xpEcMqtq7OXd6OFVeXh309hkDFTbe
kKLLybjTJ254Mmv4+tA/rEdM2vBLHvaQBgtNeNrCnrML7o85dgfUR6OGj1a9
356MHI3qdvrlq72Co2HtqxXPn5/N//7JLMyar45GD8eteyOmvTHri5XBo3H3
3ojteNwBqpyyUHeDoifTuuOwZMVFmjOi1p2kIx9738PatJHXTMRhcVsfp2HR
SP5kxv50WDcqRUA96ld+PGG555fC+FszUcdEHbNKzISo89mAGlrrSTdvw0B4
1CvYMhKWVYgpfu2WCbWs6ZySt65bSaOK9scTus83vLB51oPy7ZDu873h//37
p//3p7uPpx2fbgT//HD28YT16aTt9YL78xXvq1nb0YD8ICj+dMHxn48mvl71
frHYvevheyh3g5xGgEjCpWO6EuAIDpNKziKT0xGIaAo9o6MrsqH1Yic6kkRP
RRPi6toudGAj2eJ8HCleKMoTCHJQXde6Wi7z6BlG+S0ot7FRzC4iE1KRyPj6
xqsN7REIfAqKmIbqike03ACywJdByES3RHTUXm2vvshCproUtUM2tI1/28y6
6ZPV+ST1A8o2OTLfw2saNeDmXYyQBgW1G5LvDivne9gLvbyNgAya6n7YAJZ1
RMcMKAgb/WoYagejxk+2gvenbeBVgOb9Scuci7PcK3w0Y98b1i15Rfsjhjfb
A+AQ1gO6WZdkxafcGdAC+odTxqfTxqMh6ZqHfjgg3A/y113ULQ/j/oBkx8UY
ErW+mrI8HtM/GtKAsRmWdnZT78J8fDFmhDv55ZLnu43A7zaDmzbmsKAtQK+9
75eCNl+GNfd9gpeDisd+4boBM8GvPfHQ51Wd6xY8bAwguOFhPxx/a5VPxk3Q
z9cDmvvTzn//aP2/Ptl+Nt99OKT/cmfw9WLPy3knaPDXu/0fzTv2g9In44Y/
HA//x8PJ//54+jfbwbC4PchrGhC0UIhpJHwKFBYVz2bkspjZXYhIJitToayg
szLxpESWIEeiKKWw0rDkeI4oh8FJp7GT6YwUMDlUQhyLnKIQFjl0NTxKOhWX
hMckYrGJnV1xLV0xHbjELmJKV1cMXJBOyWTSMvHIeDI2kY5PQzRcbqu6wCdm
9GqbVIwCHbMkqG92iauCulaHsLpH1mxk3tFQKhT4CiOjZlBP7FNhZntE4w7e
lFMw55E9Ww5+fTJ7NOFaCWq9ClyfmjigJ4eM1M1B7aSTfTxhgaLVJCsxZUbK
XQA6qEY/X3RN2Whb/Yo/PJr/fHv41bJ/DhzCgOqr/f7vjkP3x5RHIcl6D3Pb
z30xbXiz5Hw8pr0/qHw6qof79tVW33cHoZcz1q1e/qINpjYZrOBni25IHE9G
dKDN11PW3+0M7PcKpxXoPTcPtAnD8b5fCD5200LatBAOuxnfE9x1M1ZtZCC4
7uHuDyjA2IDnfLXavztkgPru/syfnix+vOp/veL7Znfo1Xz36wXPd4fDfzgZ
e7Pc/WTCDNPw3x9N/uloGAiCKYWXATtKyi8WcQp4jBwyIVnIKxTxCwjYOD4v
V6O+JRIXcrjZcnWZxVojVZaweJkieb7BekeizOcJMnm8DCY9CSAKWBkmdWVr
3bn2povtLVc7OyPakdEN7dfr2q+1oKIxxEQkJppCSaPR0zDoWBIxkUZO62i+
VFn6DrrlqllaaZHf9mjre/X1PFyqkJihYhbruLcorUmtFVdr8y/cyTxfm3et
PPmMAH3Xq2ZsjrjWwlao1bBp1CWc8Sn07LbFft2wjTfTK98MGzxSNP5OihJf
CbYHBNjNb/l0w/94xvy/vtw0ESseTZjg5jyasv/l6cKb9b5nM7bdoOThuPbT
te4vNntfzFkejGkejure3qtpaGKez9f6oJU9njTDmS83+uBOfrHuX+vm+bnN
D4f1nyx0/2Y39MVy71FA/qtV34OQZslEW7EwoOU+H9I9CSmXdNhdF/1BQDjA
rg7z6mAUTik6F034PS8fXNPbGtKcjFmfLfo/2xk5HLUtdovebAwARPBdn232
vwQZznV/sRH84/2pPz+a+mY3DC/m43n37w6G4VfveMVhadeKg/3WkEhKZMIi
FjWVy84S8vOo5CQ+N4vHyZZICozGO3ZHvcFQCZ2Tw0ljc9MM9kqj445cU0Rn
JlAocSJBtl5VYVTfJCCjyLh4dFc0AhHZhY1vRETUtl1tw8UQGKnQfnGUBBig
FEYqEhUBUaUd8iYlRczJteuqeqyNfY5Wk/wmCRGJ74iQcQr18rvkruS7RWdT
I3584Wenrr/7dzFnfvLuD05lR57B1pXiG8tQNbl1JbEx53946RenGsvih1wy
v4H1+nD6yfog0Ew4/feYyqRhE/3JQveIgQDeZr2X899fTI0oOw4HpTbqXVZd
2tMp+/98s/4fz+dDCmRIgfhqJwD115dz390bOx7RQfqAG/jJWt+aV/K7+5Nf
7vQ/mDDtDiiezNh+tR18PmtfcrGHVOiTsOb/erH41yezy3YW3Ml1UF9IMwdj
UYV9M+8G47EGqnczjn18aW0C1KIeu2zEgxdaMpEeD2tfTJj2g/J7o9ZlrwLw
fbE39nyhFyAu90geTbs+WvbCa/h0te/5jOvVvOfXe0O/O54AiG+We35/PAoc
j0PqQXHnjIliM9bIhPkKcTGblkLGxXDoqUxKEogLIMok+W5nfXd3o1JeJJHk
wUMqPYEvy9bYbqpNZUxeMpebajHfdtlqNPJSMS9PJixkUNMIxAQyIwNBAIjX
kZQEND2RxEuj8jNo/Aw6Nx1LjOlCXiMQYuzWWl93q9VwF8qiv8NjphMxUcj2
y81N5xXycouh2axrpxNvpsf+8uzPTr3/T28r9sJ7xakx2bEXc5Ogzl9499S7
Pzn1L6dOpUe9fycvutfAXR6yb054ylLOG7nti37FuJ15Mm54MKaD3vhfzya+
2XA9GVVOG4kKRAG4+k/XvL/eD81AsHKxf3sy+rv745/vBL/cC/3l2SKMpK+P
Jz5aD0LBSAXz/+lWH1wKnNKrpW7gCGaph99sp1WN6fBbfvG4Fn84oNwLyMA/
r3uEk3ric4jqE8atbu6imbTpZJpRReSiyysm0qadvm6ljks7tt3sx2HNSb9y
q0/1eMZzNGJ+OOX89dHE0znPoku4P6h/OtMNfvvVou8wbNwOqO+NmSFhfbzk
/dXWwJdbAWgFr5e6l51sJ6PGZa2TCLJV0mIuMwWLvMqkJnAYySxaolxaIBbm
mI2VNksVEHTYarw9LUJhJoOfIjUU6223VPoSrb7MZr1j0JQLOOl8VpaEn0+n
pBJJiXRODpKYUNt2uQ0X1UqMkFlvSY3lGHosngGTNAs6MF+YJZXmd7saVIpi
KNgeaPS19vbz5Tf/uaH1NJWdTqSk4/DZTfWJUVf/+ewv/v7q6X+9cfrniPq7
dpWEjm0rSI+4+OE//vRHp868e+rKmR//86lTN878JD/lslaAt8kpdUVxbiVx
Kaj1K9GjRuKQCuHlVD8Iie4FOF+tOUZVneByv90b2PILoamCq4c2+/nOwB8e
z/z+ydw3J5NvdsJvdoY/Oxh7vhLYHTZuDCqnnIxFiPCLzk82fMBxq192OKIF
uwvoZ2z0oKSD35gOWt7wCg8GYZ5q522sbb8Mbi/UiAK95uJC7hbVpYzLEf3c
hkU9fkLWuWQggP9Zs7HWe8RLHvHegG4vpN/0K++P2aCmzCyAeDRkglAMiNe9
coAIZyBo3B8xQvP/Zm/w6bQVfl2/tBPoiISZOk05n5dGwN9gMROFggytpkSn
KtUoipXSArk4TyUrNGorrMZKk+kWlhKptt3UWiocnlqj+ZZBX04lxrCpiTJ+
AZsGpiiBRk1l8/JZ/HwiM6OLFEfgpxD4SWxFNpoWhWfEMgWpKMwV6MAqVREK
dZlIjFSri0WSbCI5Ck243oG5ROEnt2KvoEjxkERKyi5cvPCDs+/+4Px7P8mI
vSHlUNUCVnFWYk5axJkP/uFnPz114dyPz733w6TID1JjziVGvJ8Zey4/+Urz
7Qwtt3N73OFVYPpkXUsu5p6P82pK85t12xcLxo/mzC9mzdAzj8JKGENPZhy/
PhyBuQOO4rcPZ+d7pI8WvU+WAy+3hr59tHg05fxoM7AzrJ12c5b7JE8W3G+2
+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
GhQSM9TMwh5N44AF6VI2qDjlElohn5THxKdx2VlKZTGBEIXDRVFI8WRcjEJU
oBEWSmnpswOEjUl2v7PVpr0lE+XC8EURr7WSLjA1yXhBFI51XWsp0xpKOexk
hbgQxisdn4lrz8hP+zA9/mzExXfT4iMLMxJLMyJabqXLmJ0Lo93zYz3o1puX
PvjRpfd++JNTpyoyLj1e6//d0zmwnb/a6rk3KP5k2f6ro/Bf3mx+fjj69f2Z
3zxe+q8vTr6+t/jbx2vAccwmkmLu9shwUEZOi45WO9sj2gprNgdUn++Fv70/
+XjG+fn24F9frny62f/d/Slop98ejX21N7QVUMy+/aRY93zG9fXW0LyFI28r
bU69gCmJp1VlteVHNmVf6yiM5LTkwej89mj0L4+n/3h/+Nm0cVTRvuekbxoJ
+3baPQ8HCC6okUPcOgeqUN+a6cKWQTnQZUP81gOP4NgrXdJTng2b+zltHnLd
ooG+2y3Z75HiWBFdpCso/FUKJYZNT2JRk2HPc1nZVmuT0dYolJXh6Wk4ciIK
F41ERRCI8XhCDJEcQ6EksNnp4FTtplqHvhqUONSDClrbJaQsCSnnrRhl1WbB
HSE+XS/Il/MzqJSYDtTlDtwNMieVI8qDCUtGRWvYuWJcIqnhvBAXoxZkSTjJ
PEE8kXeVKL5Gl0VLjJkGR6lUncnhJ0ikmRbzrZ7uJpu5USK4zaRUdrWWlOcn
ZcdfKk8911YW7ZahR5yC57vDO1Pugrj3rvz81Ls/PMVDlf/1zdbnB+H9IfXL
Jfu2n/t02vhy1ftqs//lWgAsyh+fr/7bR5t/eLH+bx/vgP/89HByF1KkigRl
5nfKCNUT3cIJO2crpDsYs3yyHfrD08XDMcu8R/TV0TgEkC8PRn//ZAHqzXbo
YNS85JXOu3gHYR30VQAKBhX8Z3PmubqUD7BlUeL2gpqk9+QdhU+n7C9nXf/+
eOabnYGPpq397LptK/2+T7BpIa8ZCcc9nH0XY0beMcCsGhU0Tknbp6WIPsrd
EV7zY5/s2CNetzCP/LJNB7+P1WhGVvTSatnKFDI/lkiPhGjGZ6YK6Gkc6tup
h8bFk1iZSFJiXeflBsTlNvQNNDGazk4Dy0FnJvH5mUJhNgQNMDMaaZlaVBxw
tANEi+iWjJIjJ2XLiFl2QWWvstrIy5HQEgmYa0AQTY2jSXO48iKeKL+55jS+
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
sC4Q9kGD0EsBKIgUfMusXx4wM50KnFdPhTgz16cK27hOKQYuBZttbUAPr6Rb
glGRav0q0v44yLD3YMyxHTbCNliGeOIRbA6oHs05Zx2caRtrtVcMsfEgZBjW
UFWoO4zq7KbMCy15V6hVqUZa3ZiRDmGzFRtd13EJS47HESKxmCt0SiSFcp3D
ixXIk9iyBLY8mSKII3Bi+Mocua6YI85ow1zpJETi6HFUQRpLmk0TpmMZMR2E
qyhqJImbAMUQp0kMBWJ9PlueylKkooTRWNHbbcAXJ/K50UpRkkKYSCVeVKqz
nL1VGnMpU5AilRfoNDfBTRmk5TL+2zfMddoSjb6IL00nMxOBYHLKz+Pjzl45
fzozLoncjnDIRCGbImTleBTYEadwZ6r3i4criyH7zrTfq+dO+U3zA/ZRj1rH
RqmZHWGrYD1sHrZw7s32rA1ooSWCiPqUOCCoo9Rw2wpcos6glmhgNIqwtxSE
uwpytYZeL8bdprcUaulNbmFXrxQDApn18IMabK8MYWbVUepSUDej2K05TkHr
lIsz3ysctzNGrbRpD0QbLZiZoIHqFKOB2ttPNyzsfhMTFkZ2m0uEWglqj6e7
F/2KURtnxi0ZtwpOJj2vN4dOprphSi70ytYDGmitq37VslcxY+dPmNlrXvXJ
qHOzTx9W01W4u7jbCbXpZ4Ej8W4yoyELTU1EkuPefjRPuIYiXiEwbtB5kSxR
LI0f0UU+10W+QGTHUPlJLEEGnZ2GIUY2dpyuaXuPxk1UWcpBbjhGNJ4ZgyRf
pwlTmNJUmjiZrciQmop46myyIAEe4jlxGHoUkR3Hl2XJtflSRTZflMoRpZBZ
MWxpmtpaAcWT54hV+TrzTb2xQq4sAvfC5acJpNlMfjqWlHCn+lJi8n9LjP/g
9C//sSgzCdNUE7SoXEqmEF+jYbXKqC37c0Fg92J//tXhotcgCFpE8HDAIm6r
SKe0lomw1RJ8bUBHH3eJT+Z6YVSdTNsGdAQdtQqOFnYDvTHDzKoHrBpKtRx7
S0W6y+0oJNWm8TqLdJQ6HaneK8Et90jWghInv1aBz3OLajySuo7SCx2llyj1
SSZW9WQ3fXtUfjClOpzUrPklkNk3+pRw/yfsAhAadON+E6tXTQ4amSEzO2xi
jVjZ0IchXc52i2fdsiW/bnvIejzluTfTezDu2ug3LvQol3261T7DetC04tfP
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
HyuOpUrEGMAdwwN8oIsCGS6tLRyemFIZHpvVzecgSynryXom4VCW/DrQG/NO
oXYWrWBhnIqZtZTtk3urv3hx+PQgn3VLFyi9LhktqGVm7YLViOZs0fvqMPfZ
neo3D1fe7icfrXgANSA00CoBrPtVJ4AFCAIN6qYHfWIC2E9o6eBO0Dy3wrqC
VXDxhvZJ/Kv76W+f5zYSXD2nM6zDuxUoUDEzqRycWkmAv4GxmZ7ejDNz5tEH
q7qEkRjRjlZ8c68Owr94uvzr15tfPFwEKJ/txYAlfrYdAQWMKxiFb/fjwHy+
2AqBLaAJbgJq39wrf323+Plp9uV26OGy6+mG57OT9K+ernx6Vn4NWutm/Lzq
B0fm7aWARNMHCCqNA0JVx4Kk8c8QOwBEk6MbtFBfBAUMpC+IstgGQHl8yGSK
VCrS4jE8gBiL46MxHACayVPypQmAT2vuFMrrpOom0Gl1Fqg3ijB5u0xeqC8J
S1eJkTzG4u/2RofLa7TC8ngwiQD7/jgsEIdFs5hEHgeOGdCxQ/GxeIacyk9U
V3n7R7pUco4102nW0TNB9W4pBAS4n/fsZqw523xYPYWDXgIQD8rerx5vfHF/
/ePbi8DyCSi9GhYKuPedpBH0nJd7yY9P8l/eXfzq/uJvnq19fTv/bM17lNLs
RGSHSfVxWnuQUC255uMqKqiccTprYICbtwumF1uRz47LBynrx0eZrYTs2a4b
ELy/rncr4REjIaQfi5nJWQ+9GKTn/KS0B5vxYEpeQtaG+8WjyEp4JqzBhDT4
w4L6ya7/8U7g4/PsN0+WPr9XvLPi2Uqpj8uWV/uJi4tsbMc+2c98Cf7Ck+In
+6kX66FHVc+dgu3Zqu/np4VfPah+cZx5uuoBNz85ynx8Vn51VHq2l3u4mQQD
4qDglusHRaoeoRIqVHbyZC0AIpAhmGvp4jjw/K4ALFWgBCNYjR6i0XXanIOZ
LLm6yAAEPe5hgA9UMITK5ce9AbjdNQDY8aW3wFakqAc7cn2zztluDXall8Y2
T9mVLbo/BY/m0Kt7M7kqOZJBBxNwf2zEGxmKpFGgrO4ejRHq8MJjaRIgWF5m
7+yr0ykOh9Ut4qLyEd3JcmIlZs3aJOcVj19K0c/CQWpzSKjP9jNfPFg9Xw48
208DtxBQ0828sbWY+t6y7+lWGLSsL++Wf/fx0R+/vvv7j3a/vV8+zeoBo/24
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
+P2S7OWW4SwjSCoxpynxuou55mSdJ5VA1E8rtqOI7Ls7+e8fFh8umsH0PCsp
9/KcxwfKF6d68OJn3ESvFmEWDcrnIG4d1mfBJ4LjK+W57fX51VXG0jJ1bWXy
0bHmxYn5N59kvv8o88l970d33U8OjM+OzFtp9k6Bc7oiPFqaX88ytkvMw2Xu
ZmE6aB7M+LCLcUolRk75sXEPKhXAFWLkxTQ95MSkQ+OpAKiJ9ZLwaMvw4nb4
kztZYFzf7Kdf7iSAcX28FqKLrsyp68SWTrmjR27rAQgAO4kRIgV2xT9i8F58
Rq93d4kNdTzVNa272R7vssU6DeF2fbDDGu/zZJGuLMoSg4mtHVJblykE9+dJ
nsyY3j9sCY5ECqPhDNyf7IvkhlPL2NQqzl+Eu/PDgQrSkx4EwzFRRKXyyHQS
kY6OpENDyeBwuUrOFomlEjXiR/uMMLt0wCtDPli22ubgERl1xSsFTgbMgheH
2X/4/OwfP7/9j5/c/+XTk++en73Yr+6kvV/e3/vffvfVP3/5+Mla7OODfMEw
a6L3JyXEFdPUnbDwyx3PN+e+exXJiotaMhMfFtUXFzW1zTyrWD7fDn+yFQQE
X646QUfdiYjO89r1CPugxD5b4x1WOZXweMSEubhQgGRYyekKWoj5KGNtkbux
MrdSnawskvNldC6DPtkQPtzRf/M8DurT+/43564766r725rtPHe/zDtfE5+s
LGwXmAeLnNPVhZ0iK2pBZH1jy0n6SmoyGxyLu9HFOHlnaW5raS4VGk1FSCEP
zu/ApsITIQ8pZAdCVp9U7M+2Yx+dFT45LT3fS4Mxx9bWS509av+QxjukdPUr
nH0qZ7/EDAVqcqWwnhTaHh1W2FrEpjpjoMOV7nKlOx3JTsDRke71FRD+Itqd
QYARaYkOhUrE5AotViH6s5hQAZ9ZoRRXyfnlseIqsbhFSS7jnekhS6LPkRmy
RnqADBNFTDKHyqYxi/mxam6skMIsr9FyJUImSwx4EE7doEnU45YijnPatHbK
NY+7v+j1SSZOis5Xx/nffnn7X7998sfvXvz7b97833/47o/fvfr47tp/+vTu
//mv3/z7r18+Wo98dJjdiV0Eh7Jp6kFB+zCrfLtu+/5R6t6iYjM4ux3mPqro
1t3sXT//5bLrq8PEL08zoJ2C0fl83bUdA2FQuhZhH1a5W0VGMUwIW+BBIyps
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
0qlh5TSCT+gG5eSTcpa5g4zu8/Pc24PMV/dXXu5mTivek7JvKaRfiphfnaw+
2S796sX5f/3m7e8/e/Jqt/xqp/D9o/1PDhZfbqXe7mUvPjBdDj1eCR+mTI9X
/UCDJ0X9cUm9Gp9PeUGyJmcj5EycmL24zirKYR9yOpF2B0ql6l8QQGc5HdTJ
+nFaA4XaOA6KXEvCX50k1ahFQ2Bs5ZJTXjfKauxVKVvNhs7FxcmjfV4+T0xE
UdUq/XBPcHaqvODlQfuc6HnOLQ77ut+PTqfHA0F0OIQFBF3OYY8bVizQwc/x
ujHRMMVhApapjTl5k06+3tP4zgTqlpQ1JJ4ZmB5tIo1c0zig7jjSEYKbvYO+
+KgjiPrLuiS7F6uzDEqVEKNtUKXv4kvqFao2ruDmgqpe4+ryJbDxHCWaIjnd
MJmkZYbxoUjQIBY2zi/c4olqVcZOtb1Lae3Uunr17j5fChcpEFwxhMHTDbTp
jsP9GWQojwFeNFzAgFRoj/QaPK2WAMSb7Muu4Je2J5Y2p6orM04HWszv0orR
MjZcxcYIqUMMRAtvFAoi4aKLD7LevUUHENHP7yx+fW/l7WHh8/PlT89XPzlb
+/7F6b9///H/+Mef/39//O2f/td//tP/8rt//+rpf355+qc/fv8/f/Pmv7w9
+vK4/NVZ+eVG9DRjerrifbru24yJHm1a11PzPiMiEyQXQP90DfvcwxEfBogl
5L34FgCdblipHpGphtkL3Qw2hDbVPElvZrM6F+a6hJxutWjEbsDFIxNuN1Kj
7hAIbxkNndWlqY0Nptc/6PcP5fLkrU3u/oE4lRh3OBAOK4o9W8OavW61D8cS
5GickEiQotExrxfpdsOLxSmPBxXw4VOJSZN+eJJ6eRT7d+Ojl7rr35lA1MhZ
w4rZEQ6lbRJdozC0gDllsHXLtS1mx6DR1q9Sd1msI1YbQqvr12p7olFyIkH1
etEBH9Zg6vnLudmuCPLi1FzHkMXSb9L1aJUQnapTo+iQSps0uk5nAGELjOjd
PRag7uCIN4kGB4nOBVVYWg1eqCcJC+ZQgB3wOZEiOlxEOOO9em+zJdQRzA0u
7lJWD+mVDVq6OG40DQPnoJNhZVzkAm2Ahmgm99UsjHUF5fQlj3AnLD9Mqk8z
hjd7ic9Ocp8c5797vPlPb0//29dP/6/f//zfvnj4r5/e/8On9//f3//8T//P
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
uQMi76LU4RW5F5DQmm5hWaUzsVE1RYmTMS1Nb2F5AtLAitJop6t0s1YXd94t
kympIoSkUDERKY3DnWEwJ0jkD+jUpyTimBQhOuxSs5Gnxijzdv7Kis7pVgrF
s0TyGJP7PqohLIQUoG4SY8zh4zr9AteC2OYR6KwsOU4SyQgCyQyHNy7gPbMY
2G6bILqIeYzs6obs+y9TX328e9P29PfMjZJ2LcK0eZ9Z/ePWpcn55WlfmLCV
5B+1zV/crf/Dj7M/+bz09ZvdN4NQfVsVX2WNPqwDr88hy1vcYIIZ3uZt7ckg
DwBEyD/FA+nhpeHwUju4M11+aL/+2D58pe/dqg4u5Ud3+MmDrn+jbZ4oAWL7
BB9eWS8fPC++Fbn6KHDyYGnfoge3SPtOcngPBPHLB+tgaB10HR9fbf7ki973
Lgv/9ocvf/X9u7/8p59/9WH3urZ6Vlq6rUUO0+7GumGQ895VQl/e7v1/gmdp
1+W2px83/fgm/9s/vf/vf/nH3329XStgB23z0aWn0teXT8yJBrpZw7Idc7Zh
Te2Z41n94prC7uHbXEKjjTPvRsLrpqWwwWgVKDCKAqPBETYkfNfll6h0BJH8
qdpAsdiliJwuEJNEEsA3x2BM0+kzJNJTOnWCSZ/EUY7boZq3IUY9R6ehoyhZ
pqST6U+pjCdAh8V7YrJzVyI6Nm9Mb2E4fYg3gFodEhRnimRknojIEc7QWSM5
G43ceZtwdRF3mFi5FeH5vuuoZN5dExW35JlNkT9IcIeIluC0LvDMEBh3Lc+u
RGiZBL9b0NwfuL4Yrr5uBzppdSLACPtI66vstQ0hmK87TPWu01azgmxTXexq
svujD07rR+rhvWV4bx48GIcvjadvTMOPjd3n2N6FpH6JdO5Uo19lOlf1TtWn
15bbB/fNvef+zerF62D/1nxwody/lIAMe3fI4a3izR8FP/4kfNy2A8GvPzv4
8av9//bNj//+X339d998+Rd/NoL4UT/zorXRz3hKy+r6mvEs5/viOHO56x+k
nYOt+bJffl8Ift6L/8mLvb/580/+z+9/+VfffNRpWPbbpvZwvjawVga2eFW5
XlLG9zTxgm5jV7+R0S9HMb2NqbNwUC1VY+K4FlCHF8V0bClKkaloAmSWj0xp
TCzYnArNHFv0CFFOa/QCRMoQiih8PplFn+UwCUIencsii3kMMZ+mUwlsBqla
SZeJZqXCKQF/Uipn8RE6gzPD4k/NEsfY/KceH2oA91RTbPOSeacc17DFEgq8
H0QSOptPoHCesQUTOhPXbOMvBlGblR1fZO9uymNBeshDSMfFoClPYHY1yZ1f
JemD40DQuUpYWKUurVCTm0KwoV7BWN1Sri9QXeanPsfM6GRZlONZJnvDZD/0
kV1kr2eo9w2FprLUUh4caftXxuMb4+G1rnOF9+41x6/17TtVacAvHvP3L2Xd
a6x3Bd3ffP/a++L1wvWd+/rV8tlzf/fK1BjKq6ei/StR+1rSuZI2jyQffbrY
aWqfn4f++KPC9+93//2fvflPP//ub//5p9/8o+efnecOdzzDSgCmm5nv51zd
lP14x9lKGL97uf3D+0JYT7jbC/z6y7O/+snzv/3ms//9+5//j7/96rjjLJSx
8gGshYXysW1jDw3vyFdy8mBCuhiXhTbRwLpCY6apTXQZRoQBa1Mb2RIFSSid
g2Fwn9I5T+AVd0CJGxgs4ftc8QSqYkkQqkhM5fGJTPqUkEdVygSIiI3K+RIB
XS5hysR0CvH96YkxJu0DiZhIZU5xRJRJ4qN3Spwjjam1bKdbLlMQDSaBzsDn
i+YYrGmBiCoQM8isSSr3KVM8rjWzYS0sLCocTl7ATwmFmJEwKxxmrsU4iYwo
muIHY1TPOtkdpcA4o1RnlO6Jshc2BaEtsc07Z3VPW1xTNt+sd4kcXGMux1ih
OHNlgxHLcPN7ynbfcDy0HB7rWweq2r70+NzUO9WD0xVbwtYAPThDm0NF9xLv
XGD9a03vQjO4M9996B7dmOuF580Xa8c3zoMzY2OA7Z+i+xeK5pXs8E51+lJ3
9aH56Bzv9VTDvun50P/d55s/+7L7H3/15re/eP39N4VW3pSJiLfXpDsxRS4q
z67L4At4sZhAO0Xz6/NIKSH3m57U08q//vmL//Kbz/7zX3z+f//nr3/x51dL
qzSwgFzbuJqXeRM88wrFtEx1rPN8cbF/A/FGxGYPByIEZqIrdGSpmoDgc2LV
nFA5x5fPsESTIiXJ6EDm/SrcxONIpmnsxzIFBcxOLCIAHbmUjipYSpSrUHKY
zBkWY5pGGScRHs/OPSKSHjOYU1w+kc6emaM+ozInmdxpAvm9Z5NjPMGk26vS
GEZBCJGTaexn0+RHc7SnZM4UjT8pxglM5BGimkS1M26/cCtpjqzzVyIsmEiU
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
mOMcwZwC4/w/QMFYHA==
       "], {{0, 100.}, {150., 0}}, {0, 255},
       ColorFunction->RGBColor,
       ImageResolution->{72, 72}],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "RGB", Interleaving -> True, 
       MetaInformation -> <|
        "Source" -> "http://www.eol.org/pages/328605", "URL" -> 
         "http://www.wolframcdn.com/waimage/hset050/ac9/\
ac99116210e54c705c59c5a92e61cb14_v001s.jpg"|>],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{150., 100.},
     PlotRange->{{0, 150.}, {0, 100.}}]}]}], "\[RightAssociation]"}]], "Input",\
ExpressionUUID->"fcb7cf8b-9e2b-408f-9cb7-23a9cd7e8de1"],

Cell["\<\
Keys must be unique. If not, only the last key \[RightArrow] value pair \
remains:\
\>", "Text",ExpressionUUID->"3a60ade2-284e-4469-a677-0c810741f4c0"],

Cell[BoxData[
 RowBox[{"<|", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}], ",", 
   RowBox[{"c", "\[Rule]", "3"}], ",", 
   RowBox[{"d", "\[Rule]", "4"}], ",", 
   RowBox[{"b", "\[Rule]", "10"}]}], "|>"}]], "Input",
 CellLabel->"In[97]:=",ExpressionUUID->"b9a60671-7ab4-4ba0-8c3e-d0e610594d71"],

Cell[BoxData[{
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "10"}], ",", 
   RowBox[{"c", "\[Rule]", "3"}], ",", 
   RowBox[{"d", "\[Rule]", "4"}]}], 
  "\[RightAssociation]"}], "\[IndentingNewLine]", 
 RowBox[{"assoc", "[", "\"\<cat\>\"", "]"}]}], "Input",
 CellLabel->
  "In[100]:=",ExpressionUUID->"b3649e8f-c082-4e94-9a2d-49976c5fb427"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "10"}], ",", 
   RowBox[{"c", "\[Rule]", "3"}], ",", 
   RowBox[{"d", "\[Rule]", "4"}]}], "\[RightAssociation]"}]], "Input",
 CellChangeTimes->{3.9428481282163143`*^9},
 CellLabel->
  "In[102]:=",ExpressionUUID->"0ad4c605-11bc-4ec1-8924-f10f0216795e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "10"}], ",", 
   RowBox[{"c", "\[Rule]", "3"}], ",", 
   RowBox[{"d", "\[Rule]", "4"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[102]=",ExpressionUUID->"5225d986-d969-4385-9fdc-e58313685730"]
}, Open  ]],

Cell["only the last value will remain", "Text",ExpressionUUID->"3f6861ff-9381-46ee-82e3-a3467b6fd3ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Accessing Elements in an Association", "Section",ExpressionUUID->"734c54fb-f0bd-4193-9242-ff135b05eccb"],

Cell["\<\
Finding a value by its key is fast. Note the single pair of square brackets \
used to enclose the key:\
\>", "Text",ExpressionUUID->"8432b07d-1080-491b-85e7-f9742100fcaf"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"a", "\[Rule]", "1"}], ",", 
    RowBox[{"b", "\[Rule]", "2"}], ",", 
    RowBox[{"c", "\[Rule]", "3"}], ",", 
    RowBox[{"d", "\[Rule]", "4"}]}], "|>"}], "[", "a", "]"}]], "Input",
 CellLabel->
  "In[103]:=",ExpressionUUID->"4b079d09-8d92-4d6c-9c91-f2d5456cdbd0"],

Cell[BoxData["1"], "Output",
 CellLabel->
  "Out[103]=",ExpressionUUID->"d205d6f1-4a51-4080-8970-dc507acef67a"]
}, Open  ]],

Cell["\<\
Unlike List, the order of the association does not matter, because the value \
is directly associated with the key:\
\>", "Text",ExpressionUUID->"b2370f43-251e-43b9-a5f3-4f7dc76f2629"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellLabel->
  "In[104]:=",ExpressionUUID->"bc9343f4-354f-4b33-ba29-f98b116ea3f6"],

Cell[BoxData["b"], "Output",
 CellLabel->
  "Out[104]=",ExpressionUUID->"8c303d36-a2d6-4bb9-be4e-769ca39477d5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"a", ",", "d", ",", "b", ",", "c"}], "}"}], "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellLabel->
  "In[105]:=",ExpressionUUID->"37f6d632-f214-4f61-8d82-0a024f59c103"],

Cell[BoxData["d"], "Output",
 CellLabel->
  "Out[105]=",ExpressionUUID->"4ca7230c-4198-477e-a5ae-11070f37da75"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"\[LeftAssociation]", 
   RowBox[{
    RowBox[{"d", "\[Rule]", "4"}], ",", 
    RowBox[{"b", "\[Rule]", "2"}], ",", 
    RowBox[{"a", "\[Rule]", "1"}], ",", 
    RowBox[{"c", "\[Rule]", "3"}]}], "\[RightAssociation]"}], "[", "a", 
  "]"}]], "Input",
 CellLabel->
  "In[106]:=",ExpressionUUID->"fd29a0b8-84a7-497d-a6f6-cd4f85f47d71"],

Cell[BoxData["1"], "Output",
 CellLabel->
  "Out[106]=",ExpressionUUID->"13e6fb77-eb69-400c-94f2-817c32d83c02"]
}, Open  ]],

Cell[TextData[{
 "Whether or not an element exists in an association can be confirmed with ",
 ButtonBox["KeyExistsQ",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/KeyExistsQ.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/KeyExistsQ.html"],
 ". Missing elements are represented by ",
 ButtonBox["Missing",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Missing.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Missing.html"],
 ":"
}], "Text",
 CellTags->"Missing",ExpressionUUID->"c3a38294-209d-41d6-91ec-165643261438"],

Cell[CellGroupData[{

Cell[BoxData["assoc"], "Input",
 CellLabel->
  "In[107]:=",ExpressionUUID->"1270b969-364a-44a8-b19c-06755fdd9937"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "2"}], ",", 
   RowBox[{"4", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
35D/3Zc3/+WvfvCPv/js3331/h+9M/r0IPc7j1o/etZ5bxT58knxrT3viwPX
ixPXxchwdWR8drP6+Mzy+Gj10aHj0ZFztKVPxRnAjMJR1maI6fKRrU6M00W8
dcOMNBpkuFaQZu1sOEQqFLmgjqUyxN5AcvXIunsgjafh6RwWtK39Q329KTAY
H2i1D6pV5VZvZX2DCLZxKMaKJTiBMMUfJCUSDLBpC3ku6C+nJ+6zU0+jqgj6
iQ4b3KiaC63RTcIlHu41KfWuR4/L+kTpMqE9FJSbzFSBcBtUmtxsjlFviBpN
KfhNCgUWSGLjsaXfVwwHqnKVVd3iNXfF3T1Ze1vSbAtAXaoWWYUMtZil5dMU
kEjzRVpnKG0ORaUeq74raOyIAPHeoazYpafrxHKfDiS8cy4fXSp3L2R7Vwpg
hZ1DdqmPB0t155z/+APzi4/tj962nVytVKrCSIheTKqSflnQxrNJ8SYOPKhj
7KTsT7ci749SHx/lXp2Wf/rh+E8+O//Zpxd//cN3/s3Xr/7jr370f/79L//D
P/udf//z7//Dz7//3/7+l//0f/3Hf/yjV985rP7TP/7VP/1v/+q//ssf/09f
f/zr7z/70dPB96+bf/CiDy6A9w+jXzzNvxh799ua8z3TzYllPFLtbcsux+aL
A+vZweqwp81ludmsMFeSRdPCzSjX4SW7PdRYlJ9Ly5JRXnidvukmVEvCWk2Q
y9FicXSrzX3ydO3sQp/Joat1yt6+4vpm7fzclssxwiF8rSoFsDwb6HSO3eqq
+gNtf6DubSm7XfnWlrzTkXQ6svNT56PrjUpRYDZMK6R3tLJJmxJmk8AsomW7
DOEzEGJ2JlAHOL3tXUmtzx8cakGlzZbZhRpo2apinZ/IUCtNfrbECMXR6SzJ
H4YFs+h8lzEYqw7PzfvHxk5PnIyDojoXDWNiESxokYEoMluh5VqMTINW6LJB
ZB0cq/cu9UCM5S1mbZvTO5Rsn8p2LwBBBeA4PJO09tjlLWJ9SO0fcc6ea56+
Z336ztqT565OWxELMQoxRdIryXqVEYvAISUEtPRB3Pq4G3r/IPO9x+0vLtu/
/O7jX33v+dcfX/7ii2c//+LFzz5/69c/fvWff/3H/+Vvf/n//uPf/dP/+u/+
6X/5H/7zn/3o3/7k1T/946//67/46f/49Sd/+unNn31+85O391+dVn/0vP+j
lwOQS3/3ncbL481BRXq6YwLgtrvCQU+4N1AOu/Ldvmaroy4WhZkcMDKhN8h0
eKm2NfyqHe/10IIbjIiPmYuKWmX14Z6115OBVRaOICplGiD49tvu/jZ/e1tw
fmF69x3/tz+KHY9X2m1puyH3rsM968B3hAdjE5DneGzc39f1+7JeT3J1tQY4
Dgea4/EquCpWLRCt6t6Kdp6JnrBK4SmPML0u8plJqwp4okGuAqXsSys7wtpQ
ku9wo0V6OE8ttkXJMssXx0Xy5EASsxGDxwpET3hxMw3Nd2mjM+31i7XHb7mP
z8ylCtPnWwoG4aEI0utb9AaWMuXb9zhlm/RMi1rp88Di3b/Qbx8pO/uS/pFs
50K9e6kaP9YfPTEcPdKDYNMeccsdIpjGgDa+ll480928sD594d7qqqKb1EJE
ktuUJdaEGac0pGeC6YSM5/WNj06Lv/ji/OuPTv/s+89/8sHpq0f9z24GT3dL
T/dqX3324vfeu/6bH3/xP//513//J7/31Qc3X71/+evf/fbPPnr8k3ePv/7w
7IvL3u8+2/3h89HHx9Ufvtj+6YcHn12VPr3OvTjcPO6bjrdNZ3um00PD2ZFp
dyBvtwRADq22PJvlBsP0dR/FsopesWHMFuwKGBPSqFkEDpWLCsbDtfOjtX5P
3qiwsxlirUx7/Hj1k28HLi4M4335kyf2jz8Mf/4qc32+OthSDDqKTR/C513e
3lacnID2pBjtqnZ3lN2OcKsnvrq0g5/T7yn3R+Z2VR7xk9yrMLtpmYWdsMoR
CY8g5uI5tTijaGmzgk1tMfI7/FSbFSqT/fnfvNElT4nX2JEybSONi1eoyRot
VaeWtrj+DDxRx1R3mPvX6kfvrr389saTl67hgTxfpRbKtEyJFIzDAwlosc0A
Wks1iMD76gPe1oHi/+PpPYMbybNsv1HoxVNIqzUzO90z3dNd3tB7770vek8C
IEB474HMhEt47z1h6L33ZLGKZdtXmzE9dmcnVorVewrtPrkXoW/S5XSEIm5k
/JEAWSz88tx7TiIBqMw3oxMIapyNuKdJ46zXexqMviYgaHI1YMZSKZYrQXMU
mjy9o8LiqXH5WoOhAVRWSxx9zCVWCogNyGy3gTeqIHbQe8vY/ZXC0VoLb3An
hGwFkHdn6WdrHr+GbhJOKWgD7Il2GXXQpeKeLAaebyW+udz43cu937/a//Z0
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
KJlCSY3FPuQNTGs0HVRqHnkmi8cvpTNyZfIqjbpFyC+1GXswUQ3CrUBYFQZR
Y9g4mnaS/fiIXtqu4jcq2HUiRplMUoXjzUxmFp2exf3/SjrvqDbTM+17N5NN
NpOcbHYyM56xx73Qi+lgwAYbN2xselfvvfcu1CVASCAEAoTooiN676a6jG08
tmc8fZLMnE2ym6/t98f33STn3Oc9Qocj6Ty/57rv65L0viJHUvBhSvEVSI4y
esJgK3G6j9NSW2qruv2PH8JGk86Xkk+ytDEEYQiefaHKklVluM7lxCglVxnE
WAYhCV+emB7/UULk8aBT78dHBl9NjL6eGFRyO0HOqhzpcgx312NKb50++ovT
H7zz7pEjNxNP70y2fL83dDDV+Pls/Uab5EWg+vPV9p8OZl6tdL3dHPhmZ+xv
r9ffbox+uzO53u/qtoll2Hv1cjyUkVuio+cO1otn27UzrepXi+1fb/btDNS+
mmv785PxlzMt3236P5tt/Xq1+4tFHww7QAZJ89GA/e2sb9jCVZRdL447ib0W
Sc9JLksPLko5X3E1mFuS9jTg+nq166ed/j9udkAM7FKWL9YyZozEpWr6hpO7
YKWOaFA+Xl4N+qq+NMmOy4KqwWTB7Ft2CtdcsjE9db/D3MItc1LyRg2MBYd0
qV5G5sUUoU9h6GF4RgSCGHz4YT0umECLpjLiUdhQDCaczb4sk2bxeelUcgIB
HwX3s/kpbA44mStV8pugPgklWUxMrOJcP5SeIk/NucknpbIJoLIEZHkYnZUo
01ynM2KYzFgwrlzKJRU3FTKjVX5joIUw1EFtriu1Gu6JRKk4fEgl4QJeCMkl
GC8MY8riaNwoDOY89ASHpUzNv8fEXMUWp+XdjEcW3s67nXknKyM5Jjwm+JOM
pCBsxV2jiquVs29dT/rwdz//9TtHjv/bkfMf/JPHyPzLwfSftnoe9xtWm3mv
x2verHifL3lX/dWfLXd/+XD47cYwsHs80dljk4mQ2WpSHq0gFXEjUk2+L8Hc
aNETx9zSP+6P/Lg38mjE+cVSx18/nfxxd/i7jb6DqeY3895vV7ofD9YF7ILZ
Rvkjf+1uj61VhFWWZ3HupdBux/Pyr9JzUvLiz+UnnRMjb+0Ou/7P6+Uvlzu+
XW3f6la3y0u7FWUBHbpbkDdZhX7UIgOCDvw1ZW60/EGUi5KtLIirwd5Ydomf
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
RO3h6Uv/HxmiWBw=
       "], {{0, 100.}, {150., 0}}, {0, 255},
       ColorFunction->RGBColor,
       ImageResolution->{72, 72}],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "RGB", Interleaving -> True, 
       MetaInformation -> <|
        "Source" -> "http://www.eol.org/pages/328605", "URL" -> 
         "http://www.wolframcdn.com/waimage/hset050/ac9/\
ac99116210e54c705c59c5a92e61cb14_v001s.jpg"|>],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{150., 100.},
     PlotRange->{{0, 150.}, {0, 100.}}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[107]=",ExpressionUUID->"4fdce91a-4d8a-4275-976f-c3a69c6192fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeyExistsQ", "[", 
  RowBox[{"assoc", ",", "e"}], "]"}]], "Input",
 CellTags->"KeyExistsQ",
 CellLabel->
  "In[108]:=",ExpressionUUID->"5c0a114b-c0ca-49ac-bcbc-942d641aad8e"],

Cell[BoxData["False"], "Output",
 CellTags->"KeyExistsQ",
 CellLabel->
  "Out[108]=",ExpressionUUID->"f806fad2-4d40-4975-a327-71c978ae348a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"assoc", "[", "e", "]"}]], "Input",
 CellLabel->
  "In[109]:=",ExpressionUUID->"77e64b26-4f1f-48fd-8e42-23df0a2e1be3"],

Cell[BoxData[
 RowBox[{"Missing", "[", 
  RowBox[{"\<\"KeyAbsent\"\>", ",", "e"}], "]"}]], "Output",
 CellLabel->
  "Out[109]=",ExpressionUUID->"48faf57a-c265-4cc4-8b74-e2baf575c9cd"]
}, Open  ]],

Cell["\<\
Elements can also be accessed with the Part function. If Part is used with \
integer indexing, then the order of the Association matters. However, unlike \
List, the part can also be indexed by the key, so order does not matter:\
\>", "Text",
 CellTags->"Part",ExpressionUUID->"58a369b0-171a-4f80-bd18-337e298e9627"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"assoc", "[", 
   RowBox[{"[", "4", "]"}], "]"}], "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[110]:=",ExpressionUUID->"1001c3d4-49d1-4d70-9b85-6b46b7de97c8"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
35D/3Zc3/+WvfvCPv/js3331/h+9M/r0IPc7j1o/etZ5bxT58knxrT3viwPX
ixPXxchwdWR8drP6+Mzy+Gj10aHj0ZFztKVPxRnAjMJR1maI6fKRrU6M00W8
dcOMNBpkuFaQZu1sOEQqFLmgjqUyxN5AcvXIunsgjafh6RwWtK39Q329KTAY
H2i1D6pV5VZvZX2DCLZxKMaKJTiBMMUfJCUSDLBpC3ku6C+nJ+6zU0+jqgj6
iQ4b3KiaC63RTcIlHu41KfWuR4/L+kTpMqE9FJSbzFSBcBtUmtxsjlFviBpN
KfhNCgUWSGLjsaXfVwwHqnKVVd3iNXfF3T1Ze1vSbAtAXaoWWYUMtZil5dMU
kEjzRVpnKG0ORaUeq74raOyIAPHeoazYpafrxHKfDiS8cy4fXSp3L2R7Vwpg
hZ1DdqmPB0t155z/+APzi4/tj962nVytVKrCSIheTKqSflnQxrNJ8SYOPKhj
7KTsT7ci749SHx/lXp2Wf/rh+E8+O//Zpxd//cN3/s3Xr/7jr370f/79L//D
P/udf//z7//Dz7//3/7+l//0f/3Hf/yjV985rP7TP/7VP/1v/+q//ssf/09f
f/zr7z/70dPB96+bf/CiDy6A9w+jXzzNvxh799ua8z3TzYllPFLtbcsux+aL
A+vZweqwp81ludmsMFeSRdPCzSjX4SW7PdRYlJ9Ly5JRXnidvukmVEvCWk2Q
y9FicXSrzX3ydO3sQp/Joat1yt6+4vpm7fzclssxwiF8rSoFsDwb6HSO3eqq
+gNtf6DubSm7XfnWlrzTkXQ6svNT56PrjUpRYDZMK6R3tLJJmxJmk8AsomW7
DOEzEGJ2JlAHOL3tXUmtzx8cakGlzZbZhRpo2apinZ/IUCtNfrbECMXR6SzJ
H4YFs+h8lzEYqw7PzfvHxk5PnIyDojoXDWNiESxokYEoMluh5VqMTINW6LJB
ZB0cq/cu9UCM5S1mbZvTO5Rsn8p2LwBBBeA4PJO09tjlLWJ9SO0fcc6ea56+
Z336ztqT565OWxELMQoxRdIryXqVEYvAISUEtPRB3Pq4G3r/IPO9x+0vLtu/
/O7jX33v+dcfX/7ii2c//+LFzz5/69c/fvWff/3H/+Vvf/n//uPf/dP/+u/+
6X/5H/7zn/3o3/7k1T/946//67/46f/49Sd/+unNn31+85O391+dVn/0vP+j
lwOQS3/3ncbL481BRXq6YwLgtrvCQU+4N1AOu/Ldvmaroy4WhZkcMDKhN8h0
eKm2NfyqHe/10IIbjIiPmYuKWmX14Z6115OBVRaOICplGiD49tvu/jZ/e1tw
fmF69x3/tz+KHY9X2m1puyH3rsM968B3hAdjE5DneGzc39f1+7JeT3J1tQY4
Dgea4/EquCpWLRCt6t6Kdp6JnrBK4SmPML0u8plJqwp4okGuAqXsSys7wtpQ
ku9wo0V6OE8ttkXJMssXx0Xy5EASsxGDxwpET3hxMw3Nd2mjM+31i7XHb7mP
z8ylCtPnWwoG4aEI0utb9AaWMuXb9zhlm/RMi1rp88Di3b/Qbx8pO/uS/pFs
50K9e6kaP9YfPTEcPdKDYNMeccsdIpjGgDa+ll480928sD594d7qqqKb1EJE
ktuUJdaEGac0pGeC6YSM5/WNj06Lv/ji/OuPTv/s+89/8sHpq0f9z24GT3dL
T/dqX3324vfeu/6bH3/xP//513//J7/31Qc3X71/+evf/fbPPnr8k3ePv/7w
7IvL3u8+2/3h89HHx9Ufvtj+6YcHn12VPr3OvTjcPO6bjrdNZ3um00PD2ZFp
dyBvtwRADq22PJvlBsP0dR/FsopesWHMFuwKGBPSqFkEDpWLCsbDtfOjtX5P
3qiwsxlirUx7/Hj1k28HLi4M4335kyf2jz8Mf/4qc32+OthSDDqKTR/C513e
3lacnID2pBjtqnZ3lN2OcKsnvrq0g5/T7yn3R+Z2VR7xk9yrMLtpmYWdsMoR
CY8g5uI5tTijaGmzgk1tMfI7/FSbFSqT/fnfvNElT4nX2JEybSONi1eoyRot
VaeWtrj+DDxRx1R3mPvX6kfvrr389saTl67hgTxfpRbKtEyJFIzDAwlosc0A
Wks1iMD76gPe1oHi/+PpPYMbybNsv1HoxVNIqzUzO90z3dNd3tB7770vek8C
IEB474HMhEt47z1h6L33ZLGKZdtXmzE9dmcnVorVewrtPrkXoW/S5XSEIm5k
/JEAWSz88tx7TiIBqMw3oxMIapyNuKdJ46zXexqMviYgaHI1YMZSKZYrQXMU
mjy9o8LiqXH5WoOhAVRWSxx9zCVWCogNyGy3gTeqIHbQe8vY/ZXC0VoLb3An
hGwFkHdn6WdrHr+GbhJOKWgD7Il2GXXQpeKeLAaebyW+udz43cu937/a//Z0
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
KJlCSY3FPuQNTGs0HVRqHnkmi8cvpTNyZfIqjbpFyC+1GXswUQ3CrUBYFQZR
Y9g4mnaS/fiIXtqu4jcq2HUiRplMUoXjzUxmFp2exf3/SjrvqDbTM+17N5NN
NpOcbHYyM56xx73Qi+lgwAYbN2xselfvvfcu1CVASCAEAoTooiN676a6jG08
tmc8fZLMnE2ym6/t98f33STn3Oc9Qocj6Ty/57rv65L0viJHUvBhSvEVSI4y
esJgK3G6j9NSW2qruv2PH8JGk86Xkk+ytDEEYQiefaHKklVluM7lxCglVxnE
WAYhCV+emB7/UULk8aBT78dHBl9NjL6eGFRyO0HOqhzpcgx312NKb50++ovT
H7zz7pEjNxNP70y2fL83dDDV+Pls/Uab5EWg+vPV9p8OZl6tdL3dHPhmZ+xv
r9ffbox+uzO53u/qtoll2Hv1cjyUkVuio+cO1otn27UzrepXi+1fb/btDNS+
mmv785PxlzMt3236P5tt/Xq1+4tFHww7QAZJ89GA/e2sb9jCVZRdL447ib0W
Sc9JLksPLko5X3E1mFuS9jTg+nq166ed/j9udkAM7FKWL9YyZozEpWr6hpO7
YKWOaFA+Xl4N+qq+NMmOy4KqwWTB7Ft2CtdcsjE9db/D3MItc1LyRg2MBYd0
qV5G5sUUoU9h6GF4RgSCGHz4YT0umECLpjLiUdhQDCaczb4sk2bxeelUcgIB
HwX3s/kpbA44mStV8pugPgklWUxMrOJcP5SeIk/NucknpbIJoLIEZHkYnZUo
01ynM2KYzFgwrlzKJRU3FTKjVX5joIUw1EFtriu1Gu6JRKk4fEgl4QJeCMkl
GC8MY8riaNwoDOY89ASHpUzNv8fEXMUWp+XdjEcW3s67nXknKyM5Jjwm+JOM
pCBsxV2jiquVs29dT/rwdz//9TtHjv/bkfMf/JPHyPzLwfSftnoe9xtWm3mv
x2verHifL3lX/dWfLXd/+XD47cYwsHs80dljk4mQ2WpSHq0gFXEjUk2+L8Hc
aNETx9zSP+6P/Lg38mjE+cVSx18/nfxxd/i7jb6DqeY3895vV7ofD9YF7ILZ
Rvkjf+1uj61VhFWWZ3HupdBux/Pyr9JzUvLiz+UnnRMjb+0Ou/7P6+Uvlzu+
XW3f6la3y0u7FWUBHbpbkDdZhX7UIgOCDvw1ZW60/EGUi5KtLIirwd5Ydomf
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
RO3h6Uv/HxmiWBw=
    "], {{0, 100.}, {150., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{72, 72}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
    MetaInformation -> <|
     "Source" -> "http://www.eol.org/pages/328605", "URL" -> 
      "http://www.wolframcdn.com/waimage/hset050/ac9/\
ac99116210e54c705c59c5a92e61cb14_v001s.jpg"|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{150., 100.},
  PlotRange->{{0, 150.}, {0, 100.}}]], "Output",
 CellLabel->
  "Out[110]=",ExpressionUUID->"4a7453f3-9fe3-4e88-b116-9ac3984baf70"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"assoc", "[", 
  RowBox[{"[", "\"\<cat\>\"", "]"}], "]"}]], "Input",
 CellLabel->
  "In[111]:=",ExpressionUUID->"8fb28fa2-202d-4f9d-a8ef-470ace45f138"],

Cell[BoxData[
 GraphicsBox[
  TagBox[RasterBox[CompressedData["
1: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
35D/3Zc3/+WvfvCPv/js3331/h+9M/r0IPc7j1o/etZ5bxT58knxrT3viwPX
ixPXxchwdWR8drP6+Mzy+Gj10aHj0ZFztKVPxRnAjMJR1maI6fKRrU6M00W8
dcOMNBpkuFaQZu1sOEQqFLmgjqUyxN5AcvXIunsgjafh6RwWtK39Q329KTAY
H2i1D6pV5VZvZX2DCLZxKMaKJTiBMMUfJCUSDLBpC3ku6C+nJ+6zU0+jqgj6
iQ4b3KiaC63RTcIlHu41KfWuR4/L+kTpMqE9FJSbzFSBcBtUmtxsjlFviBpN
KfhNCgUWSGLjsaXfVwwHqnKVVd3iNXfF3T1Ze1vSbAtAXaoWWYUMtZil5dMU
kEjzRVpnKG0ORaUeq74raOyIAPHeoazYpafrxHKfDiS8cy4fXSp3L2R7Vwpg
hZ1DdqmPB0t155z/+APzi4/tj962nVytVKrCSIheTKqSflnQxrNJ8SYOPKhj
7KTsT7ci749SHx/lXp2Wf/rh+E8+O//Zpxd//cN3/s3Xr/7jr370f/79L//D
P/udf//z7//Dz7//3/7+l//0f/3Hf/yjV985rP7TP/7VP/1v/+q//ssf/09f
f/zr7z/70dPB96+bf/CiDy6A9w+jXzzNvxh799ua8z3TzYllPFLtbcsux+aL
A+vZweqwp81ludmsMFeSRdPCzSjX4SW7PdRYlJ9Ly5JRXnidvukmVEvCWk2Q
y9FicXSrzX3ydO3sQp/Joat1yt6+4vpm7fzclssxwiF8rSoFsDwb6HSO3eqq
+gNtf6DubSm7XfnWlrzTkXQ6svNT56PrjUpRYDZMK6R3tLJJmxJmk8AsomW7
DOEzEGJ2JlAHOL3tXUmtzx8cakGlzZbZhRpo2apinZ/IUCtNfrbECMXR6SzJ
H4YFs+h8lzEYqw7PzfvHxk5PnIyDojoXDWNiESxokYEoMluh5VqMTINW6LJB
ZB0cq/cu9UCM5S1mbZvTO5Rsn8p2LwBBBeA4PJO09tjlLWJ9SO0fcc6ea56+
Z336ztqT565OWxELMQoxRdIryXqVEYvAISUEtPRB3Pq4G3r/IPO9x+0vLtu/
/O7jX33v+dcfX/7ii2c//+LFzz5/69c/fvWff/3H/+Vvf/n//uPf/dP/+u/+
6X/5H/7zn/3o3/7k1T/946//67/46f/49Sd/+unNn31+85O391+dVn/0vP+j
lwOQS3/3ncbL481BRXq6YwLgtrvCQU+4N1AOu/Ldvmaroy4WhZkcMDKhN8h0
eKm2NfyqHe/10IIbjIiPmYuKWmX14Z6115OBVRaOICplGiD49tvu/jZ/e1tw
fmF69x3/tz+KHY9X2m1puyH3rsM968B3hAdjE5DneGzc39f1+7JeT3J1tQY4
Dgea4/EquCpWLRCt6t6Kdp6JnrBK4SmPML0u8plJqwp4okGuAqXsSys7wtpQ
ku9wo0V6OE8ttkXJMssXx0Xy5EASsxGDxwpET3hxMw3Nd2mjM+31i7XHb7mP
z8ylCtPnWwoG4aEI0utb9AaWMuXb9zhlm/RMi1rp88Di3b/Qbx8pO/uS/pFs
50K9e6kaP9YfPTEcPdKDYNMeccsdIpjGgDa+ll480928sD594d7qqqKb1EJE
ktuUJdaEGac0pGeC6YSM5/WNj06Lv/ji/OuPTv/s+89/8sHpq0f9z24GT3dL
T/dqX3324vfeu/6bH3/xP//513//J7/31Qc3X71/+evf/fbPPnr8k3ePv/7w
7IvL3u8+2/3h89HHx9Ufvtj+6YcHn12VPr3OvTjcPO6bjrdNZ3um00PD2ZFp
dyBvtwRADq22PJvlBsP0dR/FsopesWHMFuwKGBPSqFkEDpWLCsbDtfOjtX5P
3qiwsxlirUx7/Hj1k28HLi4M4335kyf2jz8Mf/4qc32+OthSDDqKTR/C513e
3lacnID2pBjtqnZ3lN2OcKsnvrq0g5/T7yn3R+Z2VR7xk9yrMLtpmYWdsMoR
CY8g5uI5tTijaGmzgk1tMfI7/FSbFSqT/fnfvNElT4nX2JEybSONi1eoyRot
VaeWtrj+DDxRx1R3mPvX6kfvrr389saTl67hgTxfpRbKtEyJFIzDAwlosc0A
Wks1iMD76gPe1oHi/+PpPYMbybNsv1HoxVNIqzUzO90z3dNd3tB7770vek8C
IEB474HMhEt47z1h6L33ZLGKZdtXmzE9dmcnVorVewrtPrkXoW/S5XSEIm5k
/JEAWSz88tx7TiIBqMw3oxMIapyNuKdJ46zXexqMviYgaHI1YMZSKZYrQXMU
mjy9o8LiqXH5WoOhAVRWSxx9zCVWCogNyGy3gTeqIHbQe8vY/ZXC0VoLb3An
hGwFkHdn6WdrHr+GbhJOKWgD7Il2GXXQpeKeLAaebyW+udz43cu937/a//Z0
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
KJlCSY3FPuQNTGs0HVRqHnkmi8cvpTNyZfIqjbpFyC+1GXswUQ3CrUBYFQZR
Y9g4mnaS/fiIXtqu4jcq2HUiRplMUoXjzUxmFp2exf3/SjrvqDbTM+17N5NN
NpOcbHYyM56xx73Qi+lgwAYbN2xselfvvfcu1CVASCAEAoTooiN676a6jG08
tmc8fZLMnE2ym6/t98f33STn3Oc9Qocj6Ty/57rv65L0viJHUvBhSvEVSI4y
esJgK3G6j9NSW2qruv2PH8JGk86Xkk+ytDEEYQiefaHKklVluM7lxCglVxnE
WAYhCV+emB7/UULk8aBT78dHBl9NjL6eGFRyO0HOqhzpcgx312NKb50++ovT
H7zz7pEjNxNP70y2fL83dDDV+Pls/Uab5EWg+vPV9p8OZl6tdL3dHPhmZ+xv
r9ffbox+uzO53u/qtoll2Hv1cjyUkVuio+cO1otn27UzrepXi+1fb/btDNS+
mmv785PxlzMt3236P5tt/Xq1+4tFHww7QAZJ89GA/e2sb9jCVZRdL447ib0W
Sc9JLksPLko5X3E1mFuS9jTg+nq166ed/j9udkAM7FKWL9YyZozEpWr6hpO7
YKWOaFA+Xl4N+qq+NMmOy4KqwWTB7Ft2CtdcsjE9db/D3MItc1LyRg2MBYd0
qV5G5sUUoU9h6GF4RgSCGHz4YT0umECLpjLiUdhQDCaczb4sk2bxeelUcgIB
HwX3s/kpbA44mStV8pugPgklWUxMrOJcP5SeIk/NucknpbIJoLIEZHkYnZUo
01ynM2KYzFgwrlzKJRU3FTKjVX5joIUw1EFtriu1Gu6JRKk4fEgl4QJeCMkl
GC8MY8riaNwoDOY89ASHpUzNv8fEXMUWp+XdjEcW3s67nXknKyM5Jjwm+JOM
pCBsxV2jiquVs29dT/rwdz//9TtHjv/bkfMf/JPHyPzLwfSftnoe9xtWm3mv
x2verHifL3lX/dWfLXd/+XD47cYwsHs80dljk4mQ2WpSHq0gFXEjUk2+L8Hc
aNETx9zSP+6P/Lg38mjE+cVSx18/nfxxd/i7jb6DqeY3895vV7ofD9YF7ILZ
Rvkjf+1uj61VhFWWZ3HupdBux/Pyr9JzUvLiz+UnnRMjb+0Ou/7P6+Uvlzu+
XW3f6la3y0u7FWUBHbpbkDdZhX7UIgOCDvw1ZW60/EGUi5KtLIirwd5Ydomf
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
RO3h6Uv/HxmiWBw=
    "], {{0, 100.}, {150., 0}}, {0, 255},
    ColorFunction->RGBColor,
    ImageResolution->{72, 72}],
   BoxForm`ImageTag[
   "Byte", ColorSpace -> "RGB", Interleaving -> True, 
    MetaInformation -> <|
     "Source" -> "http://www.eol.org/pages/328605", "URL" -> 
      "http://www.wolframcdn.com/waimage/hset050/ac9/\
ac99116210e54c705c59c5a92e61cb14_v001s.jpg"|>],
   Selectable->False],
  DefaultBaseStyle->"ImageGraphics",
  ImageSizeRaw->{150., 100.},
  PlotRange->{{0, 150.}, {0, 100.}}]], "Output",
 CellLabel->
  "Out[111]=",ExpressionUUID->"ae6b39bf-f095-40fe-b9c8-69092743da1a"]
}, Open  ]],

Cell[TextData[{
 "The ",
 ButtonBox["Key",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Key.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Key.html"],
 " wrapper is needed to avoid ambiguity:"
}], "Text",
 CellTags->"Key",ExpressionUUID->"97ca5672-6ab2-421f-8bc2-07df619f60eb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"assoc", "[", 
    RowBox[{"[", "4", "]"}], "]"}], ",", 
   RowBox[{"assoc", "[", 
    RowBox[{"[", 
     RowBox[{"Key", "[", "4", "]"}], "]"}], "]"}]}], "}"}]], "Input",
 CellLabel->
  "In[112]:=",ExpressionUUID->"d96d487c-93b8-4678-8c11-69f66e51c55c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
35D/3Zc3/+WvfvCPv/js3331/h+9M/r0IPc7j1o/etZ5bxT58knxrT3viwPX
ixPXxchwdWR8drP6+Mzy+Gj10aHj0ZFztKVPxRnAjMJR1maI6fKRrU6M00W8
dcOMNBpkuFaQZu1sOEQqFLmgjqUyxN5AcvXIunsgjafh6RwWtK39Q329KTAY
H2i1D6pV5VZvZX2DCLZxKMaKJTiBMMUfJCUSDLBpC3ku6C+nJ+6zU0+jqgj6
iQ4b3KiaC63RTcIlHu41KfWuR4/L+kTpMqE9FJSbzFSBcBtUmtxsjlFviBpN
KfhNCgUWSGLjsaXfVwwHqnKVVd3iNXfF3T1Ze1vSbAtAXaoWWYUMtZil5dMU
kEjzRVpnKG0ORaUeq74raOyIAPHeoazYpafrxHKfDiS8cy4fXSp3L2R7Vwpg
hZ1DdqmPB0t155z/+APzi4/tj962nVytVKrCSIheTKqSflnQxrNJ8SYOPKhj
7KTsT7ci749SHx/lXp2Wf/rh+E8+O//Zpxd//cN3/s3Xr/7jr370f/79L//D
P/udf//z7//Dz7//3/7+l//0f/3Hf/yjV985rP7TP/7VP/1v/+q//ssf/09f
f/zr7z/70dPB96+bf/CiDy6A9w+jXzzNvxh799ua8z3TzYllPFLtbcsux+aL
A+vZweqwp81ludmsMFeSRdPCzSjX4SW7PdRYlJ9Ly5JRXnidvukmVEvCWk2Q
y9FicXSrzX3ydO3sQp/Joat1yt6+4vpm7fzclssxwiF8rSoFsDwb6HSO3eqq
+gNtf6DubSm7XfnWlrzTkXQ6svNT56PrjUpRYDZMK6R3tLJJmxJmk8AsomW7
DOEzEGJ2JlAHOL3tXUmtzx8cakGlzZbZhRpo2apinZ/IUCtNfrbECMXR6SzJ
H4YFs+h8lzEYqw7PzfvHxk5PnIyDojoXDWNiESxokYEoMluh5VqMTINW6LJB
ZB0cq/cu9UCM5S1mbZvTO5Rsn8p2LwBBBeA4PJO09tjlLWJ9SO0fcc6ea56+
Z336ztqT565OWxELMQoxRdIryXqVEYvAISUEtPRB3Pq4G3r/IPO9x+0vLtu/
/O7jX33v+dcfX/7ii2c//+LFzz5/69c/fvWff/3H/+Vvf/n//uPf/dP/+u/+
6X/5H/7zn/3o3/7k1T/946//67/46f/49Sd/+unNn31+85O391+dVn/0vP+j
lwOQS3/3ncbL481BRXq6YwLgtrvCQU+4N1AOu/Ldvmaroy4WhZkcMDKhN8h0
eKm2NfyqHe/10IIbjIiPmYuKWmX14Z6115OBVRaOICplGiD49tvu/jZ/e1tw
fmF69x3/tz+KHY9X2m1puyH3rsM968B3hAdjE5DneGzc39f1+7JeT3J1tQY4
Dgea4/EquCpWLRCt6t6Kdp6JnrBK4SmPML0u8plJqwp4okGuAqXsSys7wtpQ
ku9wo0V6OE8ttkXJMssXx0Xy5EASsxGDxwpET3hxMw3Nd2mjM+31i7XHb7mP
z8ylCtPnWwoG4aEI0utb9AaWMuXb9zhlm/RMi1rp88Di3b/Qbx8pO/uS/pFs
50K9e6kaP9YfPTEcPdKDYNMeccsdIpjGgDa+ll480928sD594d7qqqKb1EJE
ktuUJdaEGac0pGeC6YSM5/WNj06Lv/ji/OuPTv/s+89/8sHpq0f9z24GT3dL
T/dqX3324vfeu/6bH3/xP//513//J7/31Qc3X71/+evf/fbPPnr8k3ePv/7w
7IvL3u8+2/3h89HHx9Ufvtj+6YcHn12VPr3OvTjcPO6bjrdNZ3um00PD2ZFp
dyBvtwRADq22PJvlBsP0dR/FsopesWHMFuwKGBPSqFkEDpWLCsbDtfOjtX5P
3qiwsxlirUx7/Hj1k28HLi4M4335kyf2jz8Mf/4qc32+OthSDDqKTR/C513e
3lacnID2pBjtqnZ3lN2OcKsnvrq0g5/T7yn3R+Z2VR7xk9yrMLtpmYWdsMoR
CY8g5uI5tTijaGmzgk1tMfI7/FSbFSqT/fnfvNElT4nX2JEybSONi1eoyRot
VaeWtrj+DDxRx1R3mPvX6kfvrr389saTl67hgTxfpRbKtEyJFIzDAwlosc0A
Wks1iMD76gPe1oHi/+PpPYMbybNsv1HoxVNIqzUzO90z3dNd3tB7770vek8C
IEB474HMhEt47z1h6L33ZLGKZdtXmzE9dmcnVorVewrtPrkXoW/S5XSEIm5k
/JEAWSz88tx7TiIBqMw3oxMIapyNuKdJ46zXexqMviYgaHI1YMZSKZYrQXMU
mjy9o8LiqXH5WoOhAVRWSxx9zCVWCogNyGy3gTeqIHbQe8vY/ZXC0VoLb3An
hGwFkHdn6WdrHr+GbhJOKWgD7Il2GXXQpeKeLAaebyW+udz43cu937/a//Z0
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
KJlCSY3FPuQNTGs0HVRqHnkmi8cvpTNyZfIqjbpFyC+1GXswUQ3CrUBYFQZR
Y9g4mnaS/fiIXtqu4jcq2HUiRplMUoXjzUxmFp2exf3/SjrvqDbTM+17N5NN
NpOcbHYyM56xx73Qi+lgwAYbN2xselfvvfcu1CVASCAEAoTooiN676a6jG08
tmc8fZLMnE2ym6/t98f33STn3Oc9Qocj6Ty/57rv65L0viJHUvBhSvEVSI4y
esJgK3G6j9NSW2qruv2PH8JGk86Xkk+ytDEEYQiefaHKklVluM7lxCglVxnE
WAYhCV+emB7/UULk8aBT78dHBl9NjL6eGFRyO0HOqhzpcgx312NKb50++ovT
H7zz7pEjNxNP70y2fL83dDDV+Pls/Uab5EWg+vPV9p8OZl6tdL3dHPhmZ+xv
r9ffbox+uzO53u/qtoll2Hv1cjyUkVuio+cO1otn27UzrepXi+1fb/btDNS+
mmv785PxlzMt3236P5tt/Xq1+4tFHww7QAZJ89GA/e2sb9jCVZRdL447ib0W
Sc9JLksPLko5X3E1mFuS9jTg+nq166ed/j9udkAM7FKWL9YyZozEpWr6hpO7
YKWOaFA+Xl4N+qq+NMmOy4KqwWTB7Ft2CtdcsjE9db/D3MItc1LyRg2MBYd0
qV5G5sUUoU9h6GF4RgSCGHz4YT0umECLpjLiUdhQDCaczb4sk2bxeelUcgIB
HwX3s/kpbA44mStV8pugPgklWUxMrOJcP5SeIk/NucknpbIJoLIEZHkYnZUo
01ynM2KYzFgwrlzKJRU3FTKjVX5joIUw1EFtriu1Gu6JRKk4fEgl4QJeCMkl
GC8MY8riaNwoDOY89ASHpUzNv8fEXMUWp+XdjEcW3s67nXknKyM5Jjwm+JOM
pCBsxV2jiquVs29dT/rwdz//9TtHjv/bkfMf/JPHyPzLwfSftnoe9xtWm3mv
x2verHifL3lX/dWfLXd/+XD47cYwsHs80dljk4mQ2WpSHq0gFXEjUk2+L8Hc
aNETx9zSP+6P/Lg38mjE+cVSx18/nfxxd/i7jb6DqeY3895vV7ofD9YF7ILZ
Rvkjf+1uj61VhFWWZ3HupdBux/Pyr9JzUvLiz+UnnRMjb+0Ou/7P6+Uvlzu+
XW3f6la3y0u7FWUBHbpbkDdZhX7UIgOCDvw1ZW60/EGUi5KtLIirwd5Ydomf
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
RO3h6Uv/HxmiWBw=
      "], {{0, 100.}, {150., 0}}, {0, 255},
      ColorFunction->RGBColor,
      ImageResolution->{72, 72}],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", Interleaving -> True, 
      MetaInformation -> <|
       "Source" -> "http://www.eol.org/pages/328605", "URL" -> 
        "http://www.wolframcdn.com/waimage/hset050/ac9/\
ac99116210e54c705c59c5a92e61cb14_v001s.jpg"|>],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{150., 100.},
    PlotRange->{{0, 150.}, {0, 100.}}], ",", "3"}], "}"}]], "Output",
 CellLabel->
  "Out[112]=",ExpressionUUID->"ade50cf6-4544-408e-8e96-9f14e22ba8f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["assoc"], "Input",
 CellLabel->
  "In[114]:=",ExpressionUUID->"a464ef7c-69e0-41a2-a532-43121693d852"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "2"}], ",", 
   RowBox[{"4", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", 
    GraphicsBox[
     TagBox[RasterBox[CompressedData["
1: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
35D/3Zc3/+WvfvCPv/js3331/h+9M/r0IPc7j1o/etZ5bxT58knxrT3viwPX
ixPXxchwdWR8drP6+Mzy+Gj10aHj0ZFztKVPxRnAjMJR1maI6fKRrU6M00W8
dcOMNBpkuFaQZu1sOEQqFLmgjqUyxN5AcvXIunsgjafh6RwWtK39Q329KTAY
H2i1D6pV5VZvZX2DCLZxKMaKJTiBMMUfJCUSDLBpC3ku6C+nJ+6zU0+jqgj6
iQ4b3KiaC63RTcIlHu41KfWuR4/L+kTpMqE9FJSbzFSBcBtUmtxsjlFviBpN
KfhNCgUWSGLjsaXfVwwHqnKVVd3iNXfF3T1Ze1vSbAtAXaoWWYUMtZil5dMU
kEjzRVpnKG0ORaUeq74raOyIAPHeoazYpafrxHKfDiS8cy4fXSp3L2R7Vwpg
hZ1DdqmPB0t155z/+APzi4/tj962nVytVKrCSIheTKqSflnQxrNJ8SYOPKhj
7KTsT7ci749SHx/lXp2Wf/rh+E8+O//Zpxd//cN3/s3Xr/7jr370f/79L//D
P/udf//z7//Dz7//3/7+l//0f/3Hf/yjV985rP7TP/7VP/1v/+q//ssf/09f
f/zr7z/70dPB96+bf/CiDy6A9w+jXzzNvxh799ua8z3TzYllPFLtbcsux+aL
A+vZweqwp81ludmsMFeSRdPCzSjX4SW7PdRYlJ9Ly5JRXnidvukmVEvCWk2Q
y9FicXSrzX3ydO3sQp/Joat1yt6+4vpm7fzclssxwiF8rSoFsDwb6HSO3eqq
+gNtf6DubSm7XfnWlrzTkXQ6svNT56PrjUpRYDZMK6R3tLJJmxJmk8AsomW7
DOEzEGJ2JlAHOL3tXUmtzx8cakGlzZbZhRpo2apinZ/IUCtNfrbECMXR6SzJ
H4YFs+h8lzEYqw7PzfvHxk5PnIyDojoXDWNiESxokYEoMluh5VqMTINW6LJB
ZB0cq/cu9UCM5S1mbZvTO5Rsn8p2LwBBBeA4PJO09tjlLWJ9SO0fcc6ea56+
Z336ztqT565OWxELMQoxRdIryXqVEYvAISUEtPRB3Pq4G3r/IPO9x+0vLtu/
/O7jX33v+dcfX/7ii2c//+LFzz5/69c/fvWff/3H/+Vvf/n//uPf/dP/+u/+
6X/5H/7zn/3o3/7k1T/946//67/46f/49Sd/+unNn31+85O391+dVn/0vP+j
lwOQS3/3ncbL481BRXq6YwLgtrvCQU+4N1AOu/Ldvmaroy4WhZkcMDKhN8h0
eKm2NfyqHe/10IIbjIiPmYuKWmX14Z6115OBVRaOICplGiD49tvu/jZ/e1tw
fmF69x3/tz+KHY9X2m1puyH3rsM968B3hAdjE5DneGzc39f1+7JeT3J1tQY4
Dgea4/EquCpWLRCt6t6Kdp6JnrBK4SmPML0u8plJqwp4okGuAqXsSys7wtpQ
ku9wo0V6OE8ttkXJMssXx0Xy5EASsxGDxwpET3hxMw3Nd2mjM+31i7XHb7mP
z8ylCtPnWwoG4aEI0utb9AaWMuXb9zhlm/RMi1rp88Di3b/Qbx8pO/uS/pFs
50K9e6kaP9YfPTEcPdKDYNMeccsdIpjGgDa+ll480928sD594d7qqqKb1EJE
ktuUJdaEGac0pGeC6YSM5/WNj06Lv/ji/OuPTv/s+89/8sHpq0f9z24GT3dL
T/dqX3324vfeu/6bH3/xP//513//J7/31Qc3X71/+evf/fbPPnr8k3ePv/7w
7IvL3u8+2/3h89HHx9Ufvtj+6YcHn12VPr3OvTjcPO6bjrdNZ3um00PD2ZFp
dyBvtwRADq22PJvlBsP0dR/FsopesWHMFuwKGBPSqFkEDpWLCsbDtfOjtX5P
3qiwsxlirUx7/Hj1k28HLi4M4335kyf2jz8Mf/4qc32+OthSDDqKTR/C513e
3lacnID2pBjtqnZ3lN2OcKsnvrq0g5/T7yn3R+Z2VR7xk9yrMLtpmYWdsMoR
CY8g5uI5tTijaGmzgk1tMfI7/FSbFSqT/fnfvNElT4nX2JEybSONi1eoyRot
VaeWtrj+DDxRx1R3mPvX6kfvrr389saTl67hgTxfpRbKtEyJFIzDAwlosc0A
Wks1iMD76gPe1oHi/+PpPYMbybNsv1HoxVNIqzUzO90z3dNd3tB7770vek8C
IEB474HMhEt47z1h6L33ZLGKZdtXmzE9dmcnVorVewrtPrkXoW/S5XSEIm5k
/JEAWSz88tx7TiIBqMw3oxMIapyNuKdJ46zXexqMviYgaHI1YMZSKZYrQXMU
mjy9o8LiqXH5WoOhAVRWSxx9zCVWCogNyGy3gTeqIHbQe8vY/ZXC0VoLb3An
hGwFkHdn6WdrHr+GbhJOKWgD7Il2GXXQpeKeLAaebyW+udz43cu937/a//Z0
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
KJlCSY3FPuQNTGs0HVRqHnkmi8cvpTNyZfIqjbpFyC+1GXswUQ3CrUBYFQZR
Y9g4mnaS/fiIXtqu4jcq2HUiRplMUoXjzUxmFp2exf3/SjrvqDbTM+17N5NN
NpOcbHYyM56xx73Qi+lgwAYbN2xselfvvfcu1CVASCAEAoTooiN676a6jG08
tmc8fZLMnE2ym6/t98f33STn3Oc9Qocj6Ty/57rv65L0viJHUvBhSvEVSI4y
esJgK3G6j9NSW2qruv2PH8JGk86Xkk+ytDEEYQiefaHKklVluM7lxCglVxnE
WAYhCV+emB7/UULk8aBT78dHBl9NjL6eGFRyO0HOqhzpcgx312NKb50++ovT
H7zz7pEjNxNP70y2fL83dDDV+Pls/Uab5EWg+vPV9p8OZl6tdL3dHPhmZ+xv
r9ffbox+uzO53u/qtoll2Hv1cjyUkVuio+cO1otn27UzrepXi+1fb/btDNS+
mmv785PxlzMt3236P5tt/Xq1+4tFHww7QAZJ89GA/e2sb9jCVZRdL447ib0W
Sc9JLksPLko5X3E1mFuS9jTg+nq166ed/j9udkAM7FKWL9YyZozEpWr6hpO7
YKWOaFA+Xl4N+qq+NMmOy4KqwWTB7Ft2CtdcsjE9db/D3MItc1LyRg2MBYd0
qV5G5sUUoU9h6GF4RgSCGHz4YT0umECLpjLiUdhQDCaczb4sk2bxeelUcgIB
HwX3s/kpbA44mStV8pugPgklWUxMrOJcP5SeIk/NucknpbIJoLIEZHkYnZUo
01ynM2KYzFgwrlzKJRU3FTKjVX5joIUw1EFtriu1Gu6JRKk4fEgl4QJeCMkl
GC8MY8riaNwoDOY89ASHpUzNv8fEXMUWp+XdjEcW3s67nXknKyM5Jjwm+JOM
pCBsxV2jiquVs29dT/rwdz//9TtHjv/bkfMf/JPHyPzLwfSftnoe9xtWm3mv
x2verHifL3lX/dWfLXd/+XD47cYwsHs80dljk4mQ2WpSHq0gFXEjUk2+L8Hc
aNETx9zSP+6P/Lg38mjE+cVSx18/nfxxd/i7jb6DqeY3895vV7ofD9YF7ILZ
Rvkjf+1uj61VhFWWZ3HupdBux/Pyr9JzUvLiz+UnnRMjb+0Ou/7P6+Uvlzu+
XW3f6la3y0u7FWUBHbpbkDdZhX7UIgOCDvw1ZW60/EGUi5KtLIirwd5Ydomf
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
RO3h6Uv/HxmiWBw=
       "], {{0, 100.}, {150., 0}}, {0, 255},
       ColorFunction->RGBColor,
       ImageResolution->{72, 72}],
      BoxForm`ImageTag[
      "Byte", ColorSpace -> "RGB", Interleaving -> True, 
       MetaInformation -> <|
        "Source" -> "http://www.eol.org/pages/328605", "URL" -> 
         "http://www.wolframcdn.com/waimage/hset050/ac9/\
ac99116210e54c705c59c5a92e61cb14_v001s.jpg"|>],
      Selectable->False],
     DefaultBaseStyle->"ImageGraphics",
     ImageSizeRaw->{150., 100.},
     PlotRange->{{0, 150.}, {0, 100.}}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[114]=",ExpressionUUID->"1433055c-ec1f-49f2-9320-a5b4c0a7c46e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"assoc", "[", 
    RowBox[{"[", 
     RowBox[{"{", 
      RowBox[{"2", ",", "3"}], "}"}], "]"}], "]"}], ",", 
   RowBox[{"assoc", "[", 
    RowBox[{"[", 
     RowBox[{"Key", "[", 
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], "]"}], "]"}], "]"}]}], "}"}]], "Input",\

 CellLabel->
  "In[113]:=",ExpressionUUID->"1a8cb7bf-e968-4c16-b916-b0c5bcc3113b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{
      RowBox[{"{", 
       RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "2"}], ",", 
     RowBox[{"4", "\[Rule]", "3"}]}], "\[RightAssociation]"}], ",", "2"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[113]=",ExpressionUUID->"794108bf-6036-47bc-bf3f-dd373284c5eb"]
}, Open  ]],

Cell[TextData[{
 "An Association can be broken down into a list of just its ",
 ButtonBox["Keys",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Keys.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Keys.html"],
 " or ",
 ButtonBox["Values",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Values.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Values.html"],
 ":"
}], "Text",ExpressionUUID->"0e1e2fd5-f6fa-4c05-901b-022a7f6fbee0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Keys", "[", "assoc", "]"}]], "Input",
 CellTags->"Keys",
 CellLabel->
  "In[115]:=",ExpressionUUID->"03cfeb64-16e5-4449-97e1-9a2dd5098ccf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", "4", ",", "\<\"cat\"\>"}], 
  "}"}]], "Output",
 CellTags->"Keys",
 CellLabel->
  "Out[115]=",ExpressionUUID->"026d94af-d2a8-4280-b062-a15665910415"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Values", "[", "assoc", "]"}]], "Input",
 CellTags->"Values",
 CellLabel->
  "In[116]:=",ExpressionUUID->"15fb3f69-357d-43f2-8ac4-bf49b7227f70"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", 
   GraphicsBox[
    TagBox[RasterBox[CompressedData["
1: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
35D/3Zc3/+WvfvCPv/js3331/h+9M/r0IPc7j1o/etZ5bxT58knxrT3viwPX
ixPXxchwdWR8drP6+Mzy+Gj10aHj0ZFztKVPxRnAjMJR1maI6fKRrU6M00W8
dcOMNBpkuFaQZu1sOEQqFLmgjqUyxN5AcvXIunsgjafh6RwWtK39Q329KTAY
H2i1D6pV5VZvZX2DCLZxKMaKJTiBMMUfJCUSDLBpC3ku6C+nJ+6zU0+jqgj6
iQ4b3KiaC63RTcIlHu41KfWuR4/L+kTpMqE9FJSbzFSBcBtUmtxsjlFviBpN
KfhNCgUWSGLjsaXfVwwHqnKVVd3iNXfF3T1Ze1vSbAtAXaoWWYUMtZil5dMU
kEjzRVpnKG0ORaUeq74raOyIAPHeoazYpafrxHKfDiS8cy4fXSp3L2R7Vwpg
hZ1DdqmPB0t155z/+APzi4/tj962nVytVKrCSIheTKqSflnQxrNJ8SYOPKhj
7KTsT7ci749SHx/lXp2Wf/rh+E8+O//Zpxd//cN3/s3Xr/7jr370f/79L//D
P/udf//z7//Dz7//3/7+l//0f/3Hf/yjV985rP7TP/7VP/1v/+q//ssf/09f
f/zr7z/70dPB96+bf/CiDy6A9w+jXzzNvxh799ua8z3TzYllPFLtbcsux+aL
A+vZweqwp81ludmsMFeSRdPCzSjX4SW7PdRYlJ9Ly5JRXnidvukmVEvCWk2Q
y9FicXSrzX3ydO3sQp/Joat1yt6+4vpm7fzclssxwiF8rSoFsDwb6HSO3eqq
+gNtf6DubSm7XfnWlrzTkXQ6svNT56PrjUpRYDZMK6R3tLJJmxJmk8AsomW7
DOEzEGJ2JlAHOL3tXUmtzx8cakGlzZbZhRpo2apinZ/IUCtNfrbECMXR6SzJ
H4YFs+h8lzEYqw7PzfvHxk5PnIyDojoXDWNiESxokYEoMluh5VqMTINW6LJB
ZB0cq/cu9UCM5S1mbZvTO5Rsn8p2LwBBBeA4PJO09tjlLWJ9SO0fcc6ea56+
Z336ztqT565OWxELMQoxRdIryXqVEYvAISUEtPRB3Pq4G3r/IPO9x+0vLtu/
/O7jX33v+dcfX/7ii2c//+LFzz5/69c/fvWff/3H/+Vvf/n//uPf/dP/+u/+
6X/5H/7zn/3o3/7k1T/946//67/46f/49Sd/+unNn31+85O391+dVn/0vP+j
lwOQS3/3ncbL481BRXq6YwLgtrvCQU+4N1AOu/Ldvmaroy4WhZkcMDKhN8h0
eKm2NfyqHe/10IIbjIiPmYuKWmX14Z6115OBVRaOICplGiD49tvu/jZ/e1tw
fmF69x3/tz+KHY9X2m1puyH3rsM968B3hAdjE5DneGzc39f1+7JeT3J1tQY4
Dgea4/EquCpWLRCt6t6Kdp6JnrBK4SmPML0u8plJqwp4okGuAqXsSys7wtpQ
ku9wo0V6OE8ttkXJMssXx0Xy5EASsxGDxwpET3hxMw3Nd2mjM+31i7XHb7mP
z8ylCtPnWwoG4aEI0utb9AaWMuXb9zhlm/RMi1rp88Di3b/Qbx8pO/uS/pFs
50K9e6kaP9YfPTEcPdKDYNMeccsdIpjGgDa+ll480928sD594d7qqqKb1EJE
ktuUJdaEGac0pGeC6YSM5/WNj06Lv/ji/OuPTv/s+89/8sHpq0f9z24GT3dL
T/dqX3324vfeu/6bH3/xP//513//J7/31Qc3X71/+evf/fbPPnr8k3ePv/7w
7IvL3u8+2/3h89HHx9Ufvtj+6YcHn12VPr3OvTjcPO6bjrdNZ3um00PD2ZFp
dyBvtwRADq22PJvlBsP0dR/FsopesWHMFuwKGBPSqFkEDpWLCsbDtfOjtX5P
3qiwsxlirUx7/Hj1k28HLi4M4335kyf2jz8Mf/4qc32+OthSDDqKTR/C513e
3lacnID2pBjtqnZ3lN2OcKsnvrq0g5/T7yn3R+Z2VR7xk9yrMLtpmYWdsMoR
CY8g5uI5tTijaGmzgk1tMfI7/FSbFSqT/fnfvNElT4nX2JEybSONi1eoyRot
VaeWtrj+DDxRx1R3mPvX6kfvrr389saTl67hgTxfpRbKtEyJFIzDAwlosc0A
Wks1iMD76gPe1oHi/+PpPYMbybNsv1HoxVNIqzUzO90z3dNd3tB7770vek8C
IEB474HMhEt47z1h6L33ZLGKZdtXmzE9dmcnVorVewrtPrkXoW/S5XSEIm5k
/JEAWSz88tx7TiIBqMw3oxMIapyNuKdJ46zXexqMviYgaHI1YMZSKZYrQXMU
mjy9o8LiqXH5WoOhAVRWSxx9zCVWCogNyGy3gTeqIHbQe8vY/ZXC0VoLb3An
hGwFkHdn6WdrHr+GbhJOKWgD7Il2GXXQpeKeLAaebyW+udz43cu937/a//Z0
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
KJlCSY3FPuQNTGs0HVRqHnkmi8cvpTNyZfIqjbpFyC+1GXswUQ3CrUBYFQZR
Y9g4mnaS/fiIXtqu4jcq2HUiRplMUoXjzUxmFp2exf3/SjrvqDbTM+17N5NN
NpOcbHYyM56xx73Qi+lgwAYbN2xselfvvfcu1CVASCAEAoTooiN676a6jG08
tmc8fZLMnE2ym6/t98f33STn3Oc9Qocj6Ty/57rv65L0viJHUvBhSvEVSI4y
esJgK3G6j9NSW2qruv2PH8JGk86Xkk+ytDEEYQiefaHKklVluM7lxCglVxnE
WAYhCV+emB7/UULk8aBT78dHBl9NjL6eGFRyO0HOqhzpcgx312NKb50++ovT
H7zz7pEjNxNP70y2fL83dDDV+Pls/Uab5EWg+vPV9p8OZl6tdL3dHPhmZ+xv
r9ffbox+uzO53u/qtoll2Hv1cjyUkVuio+cO1otn27UzrepXi+1fb/btDNS+
mmv785PxlzMt3236P5tt/Xq1+4tFHww7QAZJ89GA/e2sb9jCVZRdL447ib0W
Sc9JLksPLko5X3E1mFuS9jTg+nq166ed/j9udkAM7FKWL9YyZozEpWr6hpO7
YKWOaFA+Xl4N+qq+NMmOy4KqwWTB7Ft2CtdcsjE9db/D3MItc1LyRg2MBYd0
qV5G5sUUoU9h6GF4RgSCGHz4YT0umECLpjLiUdhQDCaczb4sk2bxeelUcgIB
HwX3s/kpbA44mStV8pugPgklWUxMrOJcP5SeIk/NucknpbIJoLIEZHkYnZUo
01ynM2KYzFgwrlzKJRU3FTKjVX5joIUw1EFtriu1Gu6JRKk4fEgl4QJeCMkl
GC8MY8riaNwoDOY89ASHpUzNv8fEXMUWp+XdjEcW3s67nXknKyM5Jjwm+JOM
pCBsxV2jiquVs29dT/rwdz//9TtHjv/bkfMf/JPHyPzLwfSftnoe9xtWm3mv
x2verHifL3lX/dWfLXd/+XD47cYwsHs80dljk4mQ2WpSHq0gFXEjUk2+L8Hc
aNETx9zSP+6P/Lg38mjE+cVSx18/nfxxd/i7jb6DqeY3895vV7ofD9YF7ILZ
Rvkjf+1uj61VhFWWZ3HupdBux/Pyr9JzUvLiz+UnnRMjb+0Ou/7P6+Uvlzu+
XW3f6la3y0u7FWUBHbpbkDdZhX7UIgOCDvw1ZW60/EGUi5KtLIirwd5Ydomf
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
RO3h6Uv/HxmiWBw=
      "], {{0, 100.}, {150., 0}}, {0, 255},
      ColorFunction->RGBColor,
      ImageResolution->{72, 72}],
     BoxForm`ImageTag[
     "Byte", ColorSpace -> "RGB", Interleaving -> True, 
      MetaInformation -> <|
       "Source" -> "http://www.eol.org/pages/328605", "URL" -> 
        "http://www.wolframcdn.com/waimage/hset050/ac9/\
ac99116210e54c705c59c5a92e61cb14_v001s.jpg"|>],
     Selectable->False],
    DefaultBaseStyle->"ImageGraphics",
    ImageSizeRaw->{150., 100.},
    PlotRange->{{0, 150.}, {0, 100.}}]}], "}"}]], "Output",
 CellTags->"Values",
 CellLabel->
  "Out[116]=",ExpressionUUID->"4f92b9c2-90b3-4e6d-9a7e-8e92f66c2057"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "CYUButton"], 
          TextCell[#, "CYUButton" <> "Active"]]& )[
          Framed[
           Style["Check Your Understanding", "CYUButton"], RoundingRadius -> 
           5, FrameMargins -> {{18, 18}, {15, 15}}, ImageSize -> {205, 51}, 
           BaseStyle -> "Text"]], (WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         Framed[
          Column[{
            TextCell["True or False? assoc[[b]] returns 2.", "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "True", "info" -> 
                    "With an association, Part only understands integers, \
strings, and Key.", "index" -> 1, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "True", "info" -> 
                    "With an association, Part only understands integers, \
strings, and Key.", "index" -> 1, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "True", "info" -> 
                    "With an association, Part only understands integers, \
strings, and Key.", "index" -> 1, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "True", "info" -> 
                    "With an association, Part only understands integers, \
strings, and Key.", "index" -> 1, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "True", "info" -> 
                    "With an association, Part only understands integers, \
strings, and Key.", "index" -> 1, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "True", "info" -> 
                    "With an association, Part only understands integers, \
strings, and Key.", "index" -> 1, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}], 
            Spacer[0], 
            TextCell[
            "True or False? assoc[4] is the same as assoc[[4]].", "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "True", "info" -> 
                    "assoc[4] returns 3, while assoc[[4]] returns 4.", 
                    "index" -> 1, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "True", "info" -> 
                    "assoc[4] returns 3, while assoc[[4]] returns 4.", 
                    "index" -> 1, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "True", "info" -> 
                    "assoc[4] returns 3, while assoc[[4]] returns 4.", 
                    "index" -> 1, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "True", "info" -> 
                    "assoc[4] returns 3, while assoc[[4]] returns 4.", 
                    "index" -> 1, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "True", "info" -> 
                    "assoc[4] returns 3, while assoc[[4]] returns 4.", 
                    "index" -> 1, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "True", "info" -> 
                    "assoc[4] returns 3, while assoc[[4]] returns 4.", 
                    "index" -> 1, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}], 
            Spacer[0], 
            TextCell["True or False? assoc[Key[a]] returns 1.", "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "True", "info" -> 
                    "The Key wrapper is only necessary to avoid ambiguity \
when using Part [[]].", "index" -> 1, "correct" -> False|>["statement"], 
                    "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "True", "info" -> 
                    "The Key wrapper is only necessary to avoid ambiguity \
when using Part [[]].", "index" -> 1, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "True", "info" -> 
                    "The Key wrapper is only necessary to avoid ambiguity \
when using Part [[]].", "index" -> 1, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "True", "info" -> 
                    "The Key wrapper is only necessary to avoid ambiguity \
when using Part [[]].", "index" -> 1, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "True", "info" -> 
                    "The Key wrapper is only necessary to avoid ambiguity \
when using Part [[]].", "index" -> 1, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "True", "info" -> 
                    "The Key wrapper is only necessary to avoid ambiguity \
when using Part [[]].", "index" -> 1, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "False", "info" -> "Correct", "index" -> 2,
                     "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}]}], 
          FrameStyle -> Directive[
            GrayLevel[0.92], 
            Thickness[Large]], RoundingRadius -> 0, Background -> 
          GrayLevel[0.97], FrameMargins -> 15]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1011.5, {298.24163452148434`, 309.09026733398434`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"1fdd7828-c2dd-4d77-8aa5-\
ff9ef01363ba"]], "Text",
 CellTags->"CYU",ExpressionUUID->"6df8c60e-c169-4568-b472-f09abff47632"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Making Associations", "Section",ExpressionUUID->"91dee0ca-3bde-402e-b12f-645b7a302993"],

Cell["\<\
Creating associations is as easy as working with them. For example, lists of \
rules can be converted into associations:\
\>", "Text",ExpressionUUID->"47af6d3d-d56d-4cb7-9c1b-513a4bb071f9"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"ruleList", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "1"}], ",", 
     RowBox[{"b", "\[Rule]", "2"}], ",", 
     RowBox[{"4", "\[Rule]", "3"}], ",", 
     RowBox[{"\"\<cat\>\"", "\[Rule]", "4"}]}], "}"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"<|", "ruleList", "|>"}], "\[IndentingNewLine]", 
 RowBox[{"Association", "[", "ruleList", "]"}]}], "Input",
 CellLabel->
  "In[123]:=",ExpressionUUID->"dfa52d9f-3d27-4579-870d-3705fb7ba861"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}], ",", 
   RowBox[{"4", "\[Rule]", "3"}], ",", 
   RowBox[{"\"\<cat\>\"", "\[Rule]", "4"}]}], 
  "\[RightAssociation]"}], "\[IndentingNewLine]", 
 RowBox[{"\[LeftAssociation]", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"a", "\[Rule]", "1"}], ",", 
    RowBox[{"b", "\[Rule]", "2"}], ",", 
    RowBox[{"4", "\[Rule]", "3"}], ",", 
    RowBox[{"\"\<cat\>\"", "\[Rule]", "4"}]}], "}"}], 
  "\[RightAssociation]"}]}], "Input",
 CellLabel->
  "In[126]:=",ExpressionUUID->"07cf74b5-1c25-4c1a-a4e6-2e04606d0a81"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}], ",", 
   RowBox[{"4", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "4"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[126]=",ExpressionUUID->"d4bd35bf-b841-41fe-bfc2-c2ba264ea23a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}], ",", 
   RowBox[{"4", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "4"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[127]=",ExpressionUUID->"9cfa0c79-6a0d-41a5-9602-e97cce8d0cdc"]
}, Open  ]],

Cell["Or associations can be converted into lists of rules:", "Text",ExpressionUUID->"319de779-2c39-4ae6-90fd-686f3281d38b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<dog\>\"", "\[Rule]", "1"}], ",", 
    RowBox[{"\"\<bird\>\"", "\[Rule]", "2"}], ",", 
    RowBox[{"\"\<cat\>\"", "\[Rule]", "3"}]}], "|>"}], "]"}]], "Input",
 CellTags->"Normal",
 CellLabel->
  "In[128]:=",ExpressionUUID->"7c84bef6-8203-42a0-bc6a-9bec242c570f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"dog\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"bird\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "3"}]}], "}"}]], "Output",
 CellTags->"Normal",
 CellLabel->
  "Out[128]=",ExpressionUUID->"08f8843a-f387-410b-a1af-8698e56c43c7"]
}, Open  ]],

Cell["Combined associations automatically flatten:", "Text",ExpressionUUID->"464469b8-8a6e-40fc-8277-42cb472dd8c8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"<|", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<dog\>\"", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<bird\>\"", "\[Rule]", "2"}], ",", 
     RowBox[{"\"\<cat\>\"", "\[Rule]", "3"}]}], "|>"}], ",", 
   RowBox[{"\"\<horse\>\"", "\[Rule]", "4"}]}], "|>"}]], "Input",
 CellLabel->
  "In[129]:=",ExpressionUUID->"e745d829-2b9f-467c-a0ba-446c585068ef"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"dog\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"bird\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"horse\"\>", "\[Rule]", "4"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[129]=",ExpressionUUID->"f077877a-85b4-4fd8-b741-6db2c60109cb"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Constructing Associations from Lists", "Subsection",ExpressionUUID->"3ef7274f-efe2-4f8b-85ce-a688636a535c"],

Cell[TextData[{
 "Functions such as ",
 ButtonBox["AssociationMap",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/AssociationMap.html"], 
    None},
  ButtonNote->
   "https://reference.wolfram.com/language/ref/AssociationMap.html"],
 " and ",
 ButtonBox["AssociationThread",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/AssociationThread.html"], 
    None},
  ButtonNote->
   "https://reference.wolfram.com/language/ref/AssociationThread.html"],
 " can construct associations from lists:"
}], "Text",ExpressionUUID->"24a19cd1-af42-47f9-973e-f65caba3a880"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationMap", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}]}], "]"}]], "Input",
 CellTags->"AssociationMap",
 CellLabel->
  "In[130]:=",ExpressionUUID->"1f3e7008-1c35-4138-a62e-69e133089a87"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", 
    RowBox[{"f", "[", "a", "]"}]}], ",", 
   RowBox[{"b", "\[Rule]", 
    RowBox[{"f", "[", "b", "]"}]}], ",", 
   RowBox[{"c", "\[Rule]", 
    RowBox[{"f", "[", "c", "]"}]}], ",", 
   RowBox[{"d", "\[Rule]", 
    RowBox[{"f", "[", "d", "]"}]}]}], "\[RightAssociation]"}]], "Output",
 CellTags->"AssociationMap",
 CellLabel->
  "Out[130]=",ExpressionUUID->"a4da4a2c-d890-445d-861c-b6e24f29b322"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociationThread", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellTags->"AssociationThread",
 CellLabel->
  "In[131]:=",ExpressionUUID->"27140286-095b-431b-af93-35ac32e4b80f"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}], ",", 
   RowBox[{"c", "\[Rule]", "3"}], ",", 
   RowBox[{"d", "\[Rule]", "4"}]}], "\[RightAssociation]"}]], "Output",
 CellTags->"AssociationThread",
 CellLabel->
  "Out[131]=",ExpressionUUID->"177f2da3-4ec1-400f-96e4-b73adedbe31c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Association", "[", 
  RowBox[{"Thread", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\""}], "}"}], 
    "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[132]:=",ExpressionUUID->"ef0abea5-891f-49e5-9ce5-82051c330a78"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"a\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", "3"}]}], "\[RightAssociation]"}]], "Output",\

 CellLabel->
  "Out[132]=",ExpressionUUID->"f3d3fd62-1ea5-4696-b7e2-c8f14216348f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Modifying Associations in Place", "Subsection",ExpressionUUID->"27582177-cdad-41f9-a6d4-09b3c19bab4d"],

Cell[TextData[{
 "Use ",
 ButtonBox["AssociateTo",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/AssociateTo.html"], None},
  
  ButtonNote->"https://reference.wolfram.com/language/ref/AssociateTo.html"],
 " and ",
 ButtonBox["KeyDropFrom",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/KeyDropFrom.html"], None},
  
  ButtonNote->"https://reference.wolfram.com/language/ref/KeyDropFrom.html"],
 " to modify an Association in place:"
}], "Text",ExpressionUUID->"4f589650-9174-4ace-9599-e8ff3f547ba6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"assoc", "=", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<dog\>\"", "\[Rule]", "1"}], ",", 
    RowBox[{"\"\<bird\>\"", "\[Rule]", "2"}], ",", 
    RowBox[{"\"\<cat\>\"", "\[Rule]", "3"}]}], "|>"}]}]], "Input",
 CellLabel->
  "In[133]:=",ExpressionUUID->"412d9229-14ca-4ac6-92f4-d7507c1a5a57"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"dog\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"bird\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "3"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[133]=",ExpressionUUID->"706c2514-726b-46c7-ae40-211dc4a7b9ce"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AssociateTo", "[", 
  RowBox[{"assoc", ",", 
   RowBox[{"\"\<horse\>\"", "\[Rule]", "4"}]}], "]"}]], "Input",
 CellTags->"AssociateTo",
 CellLabel->
  "In[134]:=",ExpressionUUID->"b8157844-229c-4925-b03b-cdc57a1bfe13"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"dog\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"bird\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"horse\"\>", "\[Rule]", "4"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellTags->"AssociateTo",
 CellLabel->
  "Out[134]=",ExpressionUUID->"022b83a9-8a7a-4beb-ab95-5d94b7ed833c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["assoc"], "Input",
 CellTags->"AssociateTo",
 CellLabel->
  "In[135]:=",ExpressionUUID->"222c7fcf-d970-4691-aac4-cccf73d3e32d"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"dog\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"bird\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"horse\"\>", "\[Rule]", "4"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellTags->"AssociateTo",
 CellLabel->
  "Out[135]=",ExpressionUUID->"756ad6b8-63fb-4193-ad3f-f6e7b7648178"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeyDropFrom", "[", 
  RowBox[{"assoc", ",", "\"\<dog\>\""}], "]"}]], "Input",
 CellTags->"KeyDropFrom",
 CellLabel->
  "In[136]:=",ExpressionUUID->"b0843041-ede8-4960-9e21-923a13e9b81e"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"bird\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"horse\"\>", "\[Rule]", "4"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellTags->"KeyDropFrom",
 CellLabel->
  "Out[136]=",ExpressionUUID->"5076319e-f86c-4735-ad0e-1a7c6bfdc962"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["assoc"], "Input",
 CellTags->"KeyDropFrom",
 CellLabel->
  "In[137]:=",ExpressionUUID->"d3bc2484-5b9e-4c71-a0ba-aef92e1dd531"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"bird\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "3"}], ",", 
   RowBox[{"\<\"horse\"\>", "\[Rule]", "4"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellTags->"KeyDropFrom",
 CellLabel->
  "Out[137]=",ExpressionUUID->"75095bc9-47ab-461f-a664-293a5af4004c"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 ButtonBox["Set",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Set.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Set.html"],
 "(=) to modify a value in place:"
}], "Text",ExpressionUUID->"710218da-ce5b-4622-a27f-5bf5be22a62d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"assoc", "[", "\"\<cat\>\"", "]"}], "=", "5"}]], "Input",
 CellLabel->
  "In[138]:=",ExpressionUUID->"0042d65a-20e4-4809-a6b5-2804817449e1"],

Cell[BoxData["5"], "Output",
 CellLabel->
  "Out[138]=",ExpressionUUID->"f7e633b3-1281-4faa-a7fa-291fd6a9a68c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["assoc"], "Input",
 CellLabel->
  "In[139]:=",ExpressionUUID->"49c2fd19-6191-4db1-943a-daf3cd3e21e7"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"bird\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"horse\"\>", "\[Rule]", "4"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[139]=",ExpressionUUID->"3c258194-dbc1-4a44-9834-21a8f4c51f7e"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Special Functions That Create Associations", "Subsection",ExpressionUUID->"0d313015-f6a3-433b-be2a-5b69e7505ab3"],

Cell[TextData[{
 "Other functions that create associations include ",
 ButtonBox["Counts",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Counts.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Counts.html"],
 ", ",
 ButtonBox["CountsBy",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/CountsBy.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/CountsBy.html"],
 ", ",
 ButtonBox["GroupBy",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/GroupBy.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/GroupBy.html"],
 " and ",
 ButtonBox["PositionIndex",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/PositionIndex.html"], 
    None},
  ButtonNote->"https://reference.wolfram.com/language/ref/PositionIndex.html"],
 ":"
}], "Text",ExpressionUUID->"3e793638-125c-436d-a678-b8a2e878e9f3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Counts", "[", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"0", ",", "1"}], "}"}], ",", "100"}], "]"}], "]"}]], "Input",
 CellTags->"Counts",
 CellLabel->
  "In[140]:=",ExpressionUUID->"b2b71193-2ffd-425b-aabc-58af8b661490"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "50"}], ",", 
   RowBox[{"0", "\[Rule]", "50"}]}], "\[RightAssociation]"}]], "Output",
 CellTags->"Counts",
 CellLabel->
  "Out[140]=",ExpressionUUID->"b44dcd4c-8553-43d6-a736-4a3e8f6f7a73"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CountsBy", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "1"}], "}"}], 
   ",", "EvenQ"}], "]"}]], "Input",
 CellTags->"CountsBy",
 CellLabel->
  "In[142]:=",ExpressionUUID->"325fa064-dca5-4463-8082-465a561a1cdb"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"False", "\[Rule]", "4"}], ",", 
   RowBox[{"True", "\[Rule]", "2"}]}], "\[RightAssociation]"}]], "Output",
 CellTags->"CountsBy",
 CellLabel->
  "Out[142]=",ExpressionUUID->"93b9e480-9212-4d56-a4de-466fb6a8f7b2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"GroupBy", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "2", ",", "1", ",", "1"}], "}"}], 
   ",", "EvenQ"}], "]"}]], "Input",
 CellTags->"GroupBy",
 CellLabel->
  "In[143]:=",ExpressionUUID->"b2e25fec-2bfc-4e2a-bbb4-7ab7a37f55c2"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"False", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3", ",", "1", ",", "1"}], "}"}]}], ",", 
   RowBox[{"True", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "2"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellTags->"GroupBy",
 CellLabel->
  "Out[143]=",ExpressionUUID->"eac985d0-d4ba-4c25-bbc5-02306c9955d8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PositionIndex", "[", 
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "a", ",", "c", ",", "a"}], "}"}], 
  "]"}]], "Input",
 CellTags->"PositionIndex",
 CellLabel->
  "In[144]:=",ExpressionUUID->"53ce393f-8da2-47a3-9ce3-3a9d4aef3aa0"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "4", ",", "6"}], "}"}]}], ",", 
   RowBox[{"b", "\[Rule]", 
    RowBox[{"{", "2", "}"}]}], ",", 
   RowBox[{"c", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "5"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellTags->"PositionIndex",
 CellLabel->
  "Out[144]=",ExpressionUUID->"f02c7225-5a01-416e-8a36-3e3086a004bc"]
}, Open  ]],

Cell[TextData[{
 "Some string functions return associations, such as ",
 ButtonBox["LetterCounts",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/LetterCounts.html"], None},
  ButtonNote->
   "https://reference.wolfram.com/language/ref/LetterCounts.html"],
 ", ",
 ButtonBox["CharacterCounts",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/CharacterCounts.html"], 
    None},
  ButtonNote->
   "https://reference.wolfram.com/language/ref/CharacterCounts.html"],
 " and ",
 ButtonBox["WordCounts",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/WordCounts.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/WordCounts.html"],
 ":"
}], "Text",ExpressionUUID->"310ff6c0-8e64-482a-9ba2-008e0a633780"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"CharacterCounts", "[", "\"\<YT-1300!\>\"", "]"}]], "Input",
 CellTags->"CharacterCounts",
 CellLabel->
  "In[145]:=",ExpressionUUID->"600fde2c-0e8f-455e-8c7f-eb873b50471b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"0\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"!\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"3\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"1\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"-\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"T\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"Y\"\>", "\[Rule]", "1"}]}], "\[RightAssociation]"}]], "Output",\

 CellTags->"CharacterCounts",
 CellLabel->
  "Out[145]=",ExpressionUUID->"de85965d-02de-4a82-aaee-a714089c5f7e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LetterCounts", "[", "\"\<YT-1300!\>\"", "]"}]], "Input",
 CellTags->"LetterCounts",
 CellLabel->
  "In[151]:=",ExpressionUUID->"867d8711-ab91-44de-99a3-d88a3544d030"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"T\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"Y\"\>", "\[Rule]", "1"}]}], "\[RightAssociation]"}]], "Output",\

 CellTags->"LetterCounts",
 CellLabel->
  "Out[151]=",ExpressionUUID->"00d8d9a1-7792-4116-ae89-5a7bb3f3ce57"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"WordCounts", "[", "\"\<one fish, two fish, red fish, blue fish\>\"",
   "]"}]], "Input",
 CellTags->"WordCounts",
 CellLabel->
  "In[152]:=",ExpressionUUID->"edde0c0c-9cf7-43d5-b8f1-fd46cdf1049c"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"fish\"\>", "\[Rule]", "4"}], ",", 
   RowBox[{"\<\"blue\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"red\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"two\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"one\"\>", "\[Rule]", "1"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellTags->"WordCounts",
 CellLabel->
  "Out[152]=",ExpressionUUID->"30c6dbfa-0b2c-451a-bec2-50b8e8e4a08f"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "CYUButton"], 
          TextCell[#, "CYUButton" <> "Active"]]& )[
          Framed[
           Style["Check Your Understanding", "CYUButton"], RoundingRadius -> 
           5, FrameMargins -> {{18, 18}, {15, 15}}, ImageSize -> {205, 51}, 
           BaseStyle -> "Text"]], (WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         Framed[
          Column[{
            TextCell[
            "How might you create \[LeftAssociation]\"a\" \[Rule] 1, \"b\" \
\[Rule] 2, \"c\" \[Rule] 3\[RightAssociation]?", "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> 
                    "AssociationThread[{\"a\", \"b\", \"c\"}, {1, 2, 3}]", 
                    "info" -> "Correct", "index" -> 1, "correct" -> True|>[
                    "statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> 
                    "AssociationThread[{\"a\", \"b\", \"c\"}, {1, 2, 3}]", 
                    "info" -> "Correct", "index" -> 1, "correct" -> True|>[
                    "index"], {}, 
                    <|
                    "statement" -> 
                    "AssociationThread[{\"a\", \"b\", \"c\"}, {1, 2, 3}]", 
                    "info" -> "Correct", "index" -> 1, "correct" -> True|>[
                    "correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> 
                    "AssociationThread[{\"a\", \"b\", \"c\"}, {1, 2, 3}]", 
                    "info" -> "Correct", "index" -> 1, "correct" -> True|>[
                    "index"], 
                    TextCell[
                    <|
                    "statement" -> 
                    "AssociationThread[{\"a\", \"b\", \"c\"}, {1, 2, 3}]", 
                    "info" -> "Correct", "index" -> 1, "correct" -> True|>[
                    "info"], "Text", FontColor -> If[
                    <|
                    "statement" -> 
                    "AssociationThread[{\"a\", \"b\", \"c\"}, {1, 2, 3}]", 
                    "info" -> "Correct", "index" -> 1, "correct" -> True|>[
                    "correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "AssociationMap[f, {\"a\", \"b\", \"c\"}]",
                     "info" -> 
                    "This creates \[LeftAssociation]\"a\" \[Rule] f[\"a\"], \
\"b\" \[Rule] f[\"b\"], \"c\" \[Rule] f[\"c\"]\[RightAssociation], which only \
works if f is defined to be an appropriate function, like LetterNumber.", 
                    "index" -> 2, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "AssociationMap[f, {\"a\", \"b\", \"c\"}]",
                     "info" -> 
                    "This creates \[LeftAssociation]\"a\" \[Rule] f[\"a\"], \
\"b\" \[Rule] f[\"b\"], \"c\" \[Rule] f[\"c\"]\[RightAssociation], which only \
works if f is defined to be an appropriate function, like LetterNumber.", 
                    "index" -> 2, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "AssociationMap[f, {\"a\", \"b\", \"c\"}]",
                     "info" -> 
                    "This creates \[LeftAssociation]\"a\" \[Rule] f[\"a\"], \
\"b\" \[Rule] f[\"b\"], \"c\" \[Rule] f[\"c\"]\[RightAssociation], which only \
works if f is defined to be an appropriate function, like LetterNumber.", 
                    "index" -> 2, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "AssociationMap[f, {\"a\", \"b\", \"c\"}]",
                     "info" -> 
                    "This creates \[LeftAssociation]\"a\" \[Rule] f[\"a\"], \
\"b\" \[Rule] f[\"b\"], \"c\" \[Rule] f[\"c\"]\[RightAssociation], which only \
works if f is defined to be an appropriate function, like LetterNumber.", 
                    "index" -> 2, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "AssociationMap[f, {\"a\", \"b\", \"c\"}]",
                     "info" -> 
                    "This creates \[LeftAssociation]\"a\" \[Rule] f[\"a\"], \
\"b\" \[Rule] f[\"b\"], \"c\" \[Rule] f[\"c\"]\[RightAssociation], which only \
works if f is defined to be an appropriate function, like LetterNumber.", 
                    "index" -> 2, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "AssociationMap[f, {\"a\", \"b\", \"c\"}]",
                     "info" -> 
                    "This creates \[LeftAssociation]\"a\" \[Rule] f[\"a\"], \
\"b\" \[Rule] f[\"b\"], \"c\" \[Rule] f[\"c\"]\[RightAssociation], which only \
works if f is defined to be an appropriate function, like LetterNumber.", 
                    "index" -> 2, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}]}], 
          FrameStyle -> Directive[
            GrayLevel[0.92], 
            Thickness[Large]], RoundingRadius -> 0, Background -> 
          GrayLevel[0.97], FrameMargins -> 15]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1004.5, {128.39016723632812`, 139.23880004882812`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"2f887a94-ee3e-4ea8-bce3-\
d10132797423"]], "Text",
 CellTags->"CYU",ExpressionUUID->"745efc71-e6ba-48d0-8243-26bd71419b9c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Operations on Values of an Association", "Section",ExpressionUUID->"4130138d-2565-40ee-9793-b1d876e5307a"],

Cell["\<\
Many common list operations work directly on the values in an Association:\
\>", "Text",ExpressionUUID->"2bf43ca3-97c2-440d-940d-dae752845668"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sort", "[", 
  RowBox[{"<|", 
   RowBox[{
    RowBox[{"\"\<dog\>\"", "\[Rule]", "1"}], ",", 
    RowBox[{"\"\<bird\>\"", "\[Rule]", "2"}], ",", 
    RowBox[{"\"\<cat\>\"", "\[Rule]", "3"}]}], "|>"}], "]"}]], "Input",
 CellTags->"Sort",
 CellLabel->
  "In[146]:=",ExpressionUUID->"474496b9-792d-4b3c-8a2b-2a6ad0ab3d95"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"dog\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"bird\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "3"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellTags->"Sort",
 CellLabel->
  "Out[146]=",ExpressionUUID->"cbaaa765-9f90-4ebf-b066-ec34326d7c6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SortBy", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<dog\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"1", ",", "c"}], "}"}]}], ",", 
     RowBox[{"\"\<bird\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"2", ",", "b"}], "}"}]}], ",", 
     RowBox[{"\"\<cat\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"3", ",", "a"}], "}"}]}]}], "|>"}], ",", "Last"}], 
  "]"}]], "Input",
 CellTags->"SortBy",
 CellLabel->
  "In[148]:=",ExpressionUUID->"35731940-4a68-49bc-8d39-135be432a9cc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"cat\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"3", ",", "a"}], "}"}]}], ",", 
   RowBox[{"\<\"bird\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"2", ",", "b"}], "}"}]}], ",", 
   RowBox[{"\<\"dog\"\>", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "c"}], "}"}]}]}], "\[RightAssociation]"}]], "Output",
 CellTags->"SortBy",
 CellLabel->
  "Out[148]=",ExpressionUUID->"46bc649a-d45b-48d6-a150-59dbb3556fd9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<dog\>\"", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<bird\>\"", "\[Rule]", "2"}], ",", 
     RowBox[{"\"\<cat\>\"", "\[Rule]", "3"}]}], "|>"}], ",", "OddQ"}], 
  "]"}]], "Input",
 CellTags->"Select",
 CellLabel->
  "In[149]:=",ExpressionUUID->"4b9318f2-d733-46ff-a8d3-8349fe9b8757"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"dog\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "3"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellTags->"Select",
 CellLabel->
  "Out[149]=",ExpressionUUID->"9c293e4c-7fe8-4c93-a00e-8a8720d9921e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DeleteCases", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<dog\>\"", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<bird\>\"", "\[Rule]", "2"}], ",", 
     RowBox[{"\"\<cat\>\"", "\[Rule]", "3"}]}], "|>"}], ",", 
   RowBox[{"_", "?", "EvenQ"}]}], "]"}]], "Input",
 CellTags->"DeleteCases",
 CellLabel->
  "In[150]:=",ExpressionUUID->"4a0bdcf0-dbbc-4a2e-bbfe-a64db8a8b08d"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"dog\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"cat\"\>", "\[Rule]", "3"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellTags->"DeleteCases",
 CellLabel->
  "Out[150]=",ExpressionUUID->"db2a4e42-2cf2-4eae-8088-c1f97a2663a9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<dog\>\"", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<bird\>\"", "\[Rule]", "2"}], ",", 
     RowBox[{"\"\<cat\>\"", "\[Rule]", "3"}]}], "|>"}], ",", "2"}], 
  "]"}]], "Input",
 CellTags->"Take",ExpressionUUID->"a74317d3-9be6-4859-ae14-99e44878a3e7"],

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<dog\>\"", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<bird\>\"", "\[Rule]", "2"}], ",", 
     RowBox[{"\"\<cat\>\"", "\[Rule]", "3"}]}], "|>"}], ",", "2"}], 
  "]"}]], "Input",
 CellTags->"Drop",ExpressionUUID->"0ddfd449-4cd1-4ab5-a6f4-fdab80ab6e46"],

Cell["\<\
Also, many common aggregation functions work directly on the values in an \
Association:\
\>", "Text",ExpressionUUID->"ca3c0e6e-7dfe-46cd-b9d5-f7a80d21d73d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Total", "[", "assoc", "]"}]], "Input",
 CellTags->"Total",
 CellLabel->
  "In[153]:=",ExpressionUUID->"9544e123-40de-41bd-87b7-8a9d472d2a79"],

Cell[BoxData["11"], "Output",
 CellTags->"Total",
 CellLabel->
  "Out[153]=",ExpressionUUID->"ba9096ca-be83-458c-8535-6ac8b5e0e16d"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Mean", "[", "assoc", "]"}]], "Input",
 CellTags->"Mean",
 CellLabel->
  "In[154]:=",ExpressionUUID->"8a1e8176-01aa-4ada-bff4-256f74f0b607"],

Cell[BoxData[
 FractionBox["11", "3"]], "Output",
 CellTags->"Mean",
 CellLabel->
  "Out[154]=",ExpressionUUID->"442e6edb-4229-4319-a073-5c2d9ed9156c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Nearest", "[", 
  RowBox[{"assoc", ",", "0"}], "]"}]], "Input",
 CellTags->"Nearest",
 CellLabel->
  "In[155]:=",ExpressionUUID->"4581359f-8e76-4dae-9bfa-c18acdee672f"],

Cell[BoxData[
 RowBox[{"{", "\<\"bird\"\>", "}"}]], "Output",
 CellTags->"Nearest",
 CellLabel->
  "Out[155]=",ExpressionUUID->"26333ffd-9ead-457e-aec5-6233b7ab2f6b"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "CYUButton"], 
          TextCell[#, "CYUButton" <> "Active"]]& )[
          Framed[
           Style["Check Your Understanding", "CYUButton"], RoundingRadius -> 
           5, FrameMargins -> {{18, 18}, {15, 15}}, ImageSize -> {205, 51}, 
           BaseStyle -> "Text"]], (WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         Framed[
          Column[{
            TextCell[
            "How could you select only the odd-valued entries?", "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Select[assoc, OddQ]", "info" -> "Correct",
                     "index" -> 1, "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Select[assoc, OddQ]", "info" -> "Correct",
                     "index" -> 1, "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "Select[assoc, OddQ]", "info" -> "Correct",
                     "index" -> 1, "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Select[assoc, OddQ]", "info" -> "Correct",
                     "index" -> 1, "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Select[assoc, OddQ]", "info" -> "Correct",
                     "index" -> 1, "correct" -> True|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Select[assoc, OddQ]", "info" -> "Correct",
                     "index" -> 1, "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Select[assoc, EvenQ]", "info" -> 
                    "This selects the even-valued entries.", "index" -> 2, 
                    "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Select[assoc, EvenQ]", "info" -> 
                    "This selects the even-valued entries.", "index" -> 2, 
                    "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Select[assoc, EvenQ]", "info" -> 
                    "This selects the even-valued entries.", "index" -> 2, 
                    "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Select[assoc, EvenQ]", "info" -> 
                    "This selects the even-valued entries.", "index" -> 2, 
                    "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Select[assoc, EvenQ]", "info" -> 
                    "This selects the even-valued entries.", "index" -> 2, 
                    "correct" -> False|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "Select[assoc, EvenQ]", "info" -> 
                    "This selects the even-valued entries.", "index" -> 2, 
                    "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Take[assoc, OddQ]", "info" -> 
                    "Take does not accept OddQ as a second argument.", 
                    "index" -> 3, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Take[assoc, OddQ]", "info" -> 
                    "Take does not accept OddQ as a second argument.", 
                    "index" -> 3, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Take[assoc, OddQ]", "info" -> 
                    "Take does not accept OddQ as a second argument.", 
                    "index" -> 3, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Take[assoc, OddQ]", "info" -> 
                    "Take does not accept OddQ as a second argument.", 
                    "index" -> 3, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Take[assoc, OddQ]", "info" -> 
                    "Take does not accept OddQ as a second argument.", 
                    "index" -> 3, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Take[assoc, OddQ]", "info" -> 
                    "Take does not accept OddQ as a second argument.", 
                    "index" -> 3, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}]}], 
          FrameStyle -> Directive[
            GrayLevel[0.92], 
            Thickness[Large]], RoundingRadius -> 0, Background -> 
          GrayLevel[0.97], FrameMargins -> 15]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1011.5, {147.03128814697266`, 157.87992095947266`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"bd1e1ba1-dccf-44c8-a7d4-\
b33296bde67b"]], "Text",
 CellTags->"CYU",ExpressionUUID->"8b66bb55-f5ec-45d7-9505-5e3f3aee9d6a"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Operations on Keys of an Association", "Section",ExpressionUUID->"9e7a66a2-2d26-4398-b1e1-ee12b0374721"],

Cell["\<\
A list of functions is available to perform common list selection and mapping \
operations on the keys of an Association instead of its values. \
\>", "Text",ExpressionUUID->"786709d1-3581-4d1e-98e0-8320d07249b3"],

Cell["\<\
Common list selection and mapping operations work directly on the keys in an \
Association if \[OpenCurlyDoubleQuote]Key\[CloseCurlyDoubleQuote] is added to \
the name, but these functions create new associations:\
\>", "Text",ExpressionUUID->"566e56a1-a2ad-49a0-b8c2-58f4d5545535"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeySort", "[", 
  StyleBox[
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"b", "\[Rule]", "y"}], ",", 
     RowBox[{"c", "\[Rule]", "z"}], ",", 
     RowBox[{"a", "\[Rule]", "x"}]}], "|>"}], "Input"], "]"}]], "Input",
 CellTags->"KeySort",
 CellLabel->
  "In[156]:=",ExpressionUUID->"bb0bceab-5d17-4cf0-8b9d-b7364aa16b77"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "x"}], ",", 
   RowBox[{"b", "\[Rule]", "y"}], ",", 
   RowBox[{"c", "\[Rule]", "z"}]}], "\[RightAssociation]"}]], "Output",
 CellTags->"KeySort",
 CellLabel->
  "Out[156]=",ExpressionUUID->"67600e02-2545-4a83-a15b-e30c8c875ba1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeySortBy", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<aaa\>\"", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<ab\>\"", "\[Rule]", "2"}], ",", 
     RowBox[{"\"\<abcd\>\"", "\[Rule]", "3"}]}], "|>"}], ",", 
   "StringLength"}], "]"}]], "Input",
 CellTags->"KeySortBy",
 CellLabel->
  "In[157]:=",ExpressionUUID->"017d4b4b-6ba8-4175-86eb-e819be589b5b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"ab\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"aaa\"\>", "\[Rule]", "1"}], ",", 
   RowBox[{"\<\"abcd\"\>", "\[Rule]", "3"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellTags->"KeySortBy",
 CellLabel->
  "Out[157]=",ExpressionUUID->"eb694190-8c57-46bd-a8da-bf5782936c88"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeySelect", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"1", "\[Rule]", "a"}], ",", 
     RowBox[{"2", "\[Rule]", "b"}], ",", 
     RowBox[{"3", "\[Rule]", "c"}]}], "|>"}], ",", "OddQ"}], "]"}]], "Input",
 CellTags->"KeySelect",
 CellLabel->
  "In[158]:=",ExpressionUUID->"9b0f2ec3-e4c0-4ddc-85ac-ab263afbbd50"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"1", "\[Rule]", "a"}], ",", 
   RowBox[{"3", "\[Rule]", "c"}]}], "\[RightAssociation]"}]], "Output",
 CellTags->"KeySelect",
 CellLabel->
  "Out[158]=",ExpressionUUID->"763ee32d-8a6f-49be-b91d-28d2258a0776"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeyTake", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "1"}], ",", 
     RowBox[{"b", "\[Rule]", "2"}], ",", 
     RowBox[{"c", "\[Rule]", "3"}]}], "|>"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b"}], "}"}]}], "]"}]], "Input",
 CellTags->"KeyTake",
 CellLabel->
  "In[159]:=",ExpressionUUID->"e0d7e2f7-3a56-4eff-81ad-41385c25b733"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}]}], "\[RightAssociation]"}]], "Output",
 CellTags->"KeyTake",
 CellLabel->
  "Out[159]=",ExpressionUUID->"dd6562f8-7f15-4fcf-8ea2-38df24c85584"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeyDrop", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"a", "\[Rule]", "1"}], ",", 
     RowBox[{"b", "\[Rule]", "2"}], ",", 
     RowBox[{"c", "\[Rule]", "3"}], ",", 
     RowBox[{"d", "\[Rule]", "4"}]}], "|>"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "d"}], "}"}]}], "]"}]], "Input",
 CellTags->"KeyDrop",
 CellLabel->
  "In[160]:=",ExpressionUUID->"76b18033-82fe-4f88-8020-a10923d0099b"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"b", "\[Rule]", "2"}], ",", 
   RowBox[{"c", "\[Rule]", "3"}]}], "\[RightAssociation]"}]], "Output",
 CellTags->"KeyDrop",
 CellLabel->
  "Out[160]=",ExpressionUUID->"40b841e8-bf76-462c-a623-9d4f8ff1c601"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",ExpressionUUID->"4737779a-1df6-4a30-904b-1bb2b89aaa61"],

Cell[CellGroupData[{

Cell["Elementary Introduction to the Wolfram Language", "Item",ExpressionUUID->"d1c959d9-61d0-42db-87a0-18832e03a297"],

Cell[TextData[{
 ButtonBox["First Look at Lists",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/wolfram-u/an-elementary-introduction-to-the-\
wolfram-language/03-first-look-at-lists.html"], None},
  ButtonNote->
   "https://www.wolfram.com/wolfram-u/an-elementary-introduction-to-the-\
wolfram-language/03-first-look-at-lists.html"],
 " "
}], "Subitem",ExpressionUUID->"a3fbd9c7-4621-4f77-8b42-8e1a89806d7e"],

Cell[TextData[{
 ButtonBox["Displaying Lists",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/wolfram-u/an-elementary-introduction-to-the-\
wolfram-language/04-displaying-lists.html"], None},
  ButtonNote->
   "https://www.wolfram.com/wolfram-u/an-elementary-introduction-to-the-\
wolfram-language/04-displaying-lists.html"],
 " "
}], "Subitem",ExpressionUUID->"e27fa8c8-bb4b-4104-be63-4950124a1427"],

Cell[TextData[{
 ButtonBox["Operations on Lists",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/wolfram-u/an-elementary-introduction-to-the-\
wolfram-language/05-operations-on-lists.html"], None},
  ButtonNote->
   "https://www.wolfram.com/wolfram-u/an-elementary-introduction-to-the-\
wolfram-language/05-operations-on-lists.html"],
 " "
}], "Subitem",ExpressionUUID->"6aa451ed-8c7a-4364-9be8-d763335cca9c"],

Cell[TextData[{
 ButtonBox["Arrays, or Lists of Lists",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/wolfram-u/an-elementary-introduction-to-the-\
wolfram-language/13-arrays-or-lists-of-lists.html"], None},
  ButtonNote->
   "https://www.wolfram.com/wolfram-u/an-elementary-introduction-to-the-\
wolfram-language/13-arrays-or-lists-of-lists.html"],
 " "
}], "Subitem",ExpressionUUID->"d6757f74-4aec-4042-b27a-6f8b7e9d3aac"],

Cell[TextData[{
 ButtonBox["Associations",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://www.wolfram.com/wolfram-u/an-elementary-introduction-to-the-\
wolfram-language/34-associations.html"], None},
  ButtonNote->
   "https://www.wolfram.com/wolfram-u/an-elementary-introduction-to-the-\
wolfram-language/34-associations.html"],
 " "
}], "Subitem",ExpressionUUID->"a11e90fc-7987-4b80-93d1-d3f5825b4191"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Wolfram Documentation", "Item",ExpressionUUID->"68ef8a4f-26df-442e-b22f-9a446b0747e8"],

Cell[TextData[ButtonBox["Lists",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/tutorial/ListsOverview.html"], 
   None},
 ButtonNote->
  "https://reference.wolfram.com/language/tutorial/ListsOverview.html"]], \
"Subitem",ExpressionUUID->"ae502c1a-75e5-4c8d-97e0-ce8f2529b18e"],

Cell[TextData[ButtonBox["Associations",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/guide/Associations.html"], 
   None},
 ButtonNote->
  "https://reference.wolfram.com/language/guide/Associations.html"]], \
"Subitem",ExpressionUUID->"ad7f0f15-57da-42d9-9a6a-1c70da85c0c6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises", "Section",ExpressionUUID->"638c0194-6b8a-4f3e-bce2-a2ba1b830527"],

Cell["\<\
How would you represent the seven days of the week in a list?\
\>", "ItemNumbered",ExpressionUUID->"e1c56eee-d928-428a-9c7c-5644fbabba81"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
          "Remember that a list is a collection of items enclosed within \
braces {}. Also, Wolfram Language has built-in definitions for the days of \
the week.", "Text"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {67.85792541503906, 78.70655822753906}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"9e4074a2-4cfc-4ee9-a278-\
cab816b95ed7"]], "Text",
 CellTags->"CYU",ExpressionUUID->"21c796b2-137e-41b6-a25a-2081b9dcc804"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"{", 
              
              RowBox[{"Sunday", ",", "Monday", ",", "Tuesday", ",", 
                "Wednesday", ",", "Thursday", ",", "Friday", ",", 
                "Saturday"}], "}"}]], "Input"]]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1011.5, {49.581321716308594`, 60.429954528808594`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"a1a5e6fe-45db-44d7-bd80-\
55e6d948242f"]], "Text",
 CellTags->"CYU",ExpressionUUID->"e22bd11e-ff99-4634-baee-125ead514b5b"],

Cell[CellGroupData[{

Cell["Use a built-in function to create the following list.", "ItemNumbered",ExpressionUUID->"36dd8264-7a6e-4346-9e9a-2c2b4d683a95"],

Cell[CellGroupData[{

Cell[BoxData[{
 StyleBox[
  RowBox[{"{", 
   RowBox[{"a", ",", 
    RowBox[{"a", "^", "2"}], ",", 
    RowBox[{"a", "^", "3"}], ",", 
    RowBox[{"a", "^", "4"}], ",", 
    RowBox[{"a", "^", "5"}]}], "}"}], "Input"], "\[IndentingNewLine]", 
 RowBox[{
  StyleBox["l", "Input"], 
  StyleBox[" ", "Input"], 
  StyleBox["=", "Input"], 
  StyleBox[" ", "Input"], 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"a", "^", "n"}], ",", " ", 
    RowBox[{"{", 
     RowBox[{"n", ",", " ", "5"}], "}"}]}], "]"}]}]}], "Input",
 CellLabel->
  "In[161]:=",ExpressionUUID->"de67dfc0-1c29-44ae-8719-c79537320aa7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", 
   SuperscriptBox["a", "2"], ",", 
   SuperscriptBox["a", "3"], ",", 
   SuperscriptBox["a", "4"], ",", 
   SuperscriptBox["a", "5"]}], "}"}]], "Output",
 CellLabel->
  "Out[161]=",ExpressionUUID->"a701e705-a7a2-47e2-95b8-986696bcb22f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", 
   SuperscriptBox["a", "2"], ",", 
   SuperscriptBox["a", "3"], ",", 
   SuperscriptBox["a", "4"], ",", 
   SuperscriptBox["a", "5"]}], "}"}]], "Output",
 CellLabel->
  "Out[162]=",ExpressionUUID->"5f714988-9cc5-4a3b-aa68-e768c461ac36"]
}, Open  ]]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{"Try ", 
             ButtonBox["Table", BaseStyle -> "Hyperlink", ButtonData -> {
                URL["https://reference.wolfram.com/language/ref/Table.html"], 
                None}, ButtonNote -> 
              "https://reference.wolfram.com/language/ref/Table.html"], "."}],
            "Text"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"cbdf6b35-7f56-47ac-bb30-\
854b14bce2ad"]], "Text",
 CellTags->"CYU",ExpressionUUID->"ff1745f7-2254-4600-8c87-a41fe658a8f3"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"l", " ", "=", " ", 
              RowBox[{"Table", "[", 
                RowBox[{
                  RowBox[{"a", "^", "n"}], ",", " ", 
                  RowBox[{"{", 
                    RowBox[{"n", ",", "5"}], "}"}]}], "]"}]}]], 
           "Input"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {49.581321716308594`, 60.429954528808594`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"34e2f025-fc21-4ec0-8cea-\
fdfe6a69c95c"]], "Text",
 CellTags->"CYU",ExpressionUUID->"26433b94-6125-481a-a22d-7823f3815bc2"],

Cell[CellGroupData[{

Cell["The population of five cities is given as follows.", "ItemNumbered",ExpressionUUID->"1077b561-72e7-46aa-9186-67b19d402160"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "200", ",", " ", "400", ",", " ", "368", ",", " ", "800", ",", " ", "290"}],
   "}"}]], "Input",ExpressionUUID->"e34b53b5-a0a5-495c-98ab-5aa9c7b1d7c0"]
}, Open  ]],

Cell["\<\
You find out from a note that the population is given in thousands. Convert \
the list of numbers to represent the actual population.\
\>", "Text",ExpressionUUID->"3088a881-d026-4a77-afc2-ae42c979a47d"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[
            StyleBox[
            "Try to multiply a list by a constant.", FontWeight -> "Plain"]], 
           "Text"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {51.46680450439453, 62.31543731689453}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"5d2940cf-0eda-41bb-a8c6-\
79acb8b681b8"]], "Text",
 CellTags->"CYU",ExpressionUUID->"c0e9cb51-2429-4901-89ee-82e8e4196dfc"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{
              RowBox[{"{", 
                
                RowBox[{
                 "200", ",", " ", "400", ",", " ", "368", ",", " ", "800", 
                  ",", " ", "290"}], "}"}], " ", "*", " ", "1000"}]], 
           "Input"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {49.581321716308594`, 60.429954528808594`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"5d896007-ba9f-469d-a991-\
1ae90757234f"]], "Text",
 CellTags->"CYU",ExpressionUUID->"2c8dafea-0af6-4a8d-aa98-4dca81f9fd70"],

Cell[TextData[{
 "Get elements at odd-numbered positions in the list from ",
 StyleBox["2",
  FontWeight->"Bold"],
 "., i.e. elements at indices 1, 3, 5."
}], "ItemNumbered",ExpressionUUID->"e0a5cb24-1404-4761-941a-78d76002a81e"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{"Given a list ", 
             Cell[
              BoxData[
               RowBox[{"l", "=", 
                 RowBox[{"{", 
                   RowBox[{"a", ",", " ", "b", ",", " ", "c"}], "}"}]}]], 
              "InlineCode"], ", you can get the first element with ", 
             Cell[
              BoxData[
               RowBox[{"l", "[", 
                 RowBox[{"[", "1", "]"}], "]"}]], "InlineCode"], "."}], 
           "Text"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {51.46680450439453, 62.31543731689453}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"caeedf03-8d85-4e41-b3bb-\
012b18b3c862"]], "Text",
 CellTags->"CYU",ExpressionUUID->"4747a4c4-9b81-4aae-9855-92953c71f178"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"l", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5"}], "}"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[163]:=",ExpressionUUID->"5f10082e-d056-4007-8580-75f20cad51d8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", 
   SuperscriptBox["a", "3"], ",", 
   SuperscriptBox["a", "5"]}], "}"}]], "Output",
 CellLabel->
  "Out[163]=",ExpressionUUID->"aee6b4f8-e312-4034-a4e4-a0a8741e4d60"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"l", "[", 
              RowBox[{"[", 
                RowBox[{"{", 
                  RowBox[{"1", ",", "3", ",", "5"}], "}"}], "]"}], "]"}]], 
           "Input"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {49.581321716308594`, 60.429954528808594`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"91714a22-d9e2-48c3-976d-\
6a25d7158382"]], "Text",
 CellTags->"CYU",ExpressionUUID->"896f5693-eaa9-4c6c-a918-569bc1e63444"],

Cell[CellGroupData[{

Cell["Give every other word from the list.", "ItemNumbered",ExpressionUUID->"0b76d2c5-3e6f-4502-812c-e4b40131dbf6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  StyleBox["l", "Input"], 
  StyleBox[" ", "Input"], 
  StyleBox["=", "Input"], 
  StyleBox[" ", "Input"], 
  RowBox[{"RandomWord", "[", "20", "]"}]}]], "Input",
 CellLabel->
  "In[165]:=",ExpressionUUID->"7aad4d0a-8704-4fbc-8dd8-039e69980a26"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"drier\"\>", ",", "\<\"lolly\"\>", ",", "\<\"dissemination\"\>",
    ",", "\<\"jitney\"\>", ",", "\<\"espresso\"\>", ",", "\<\"churchman\"\>", 
   ",", "\<\"erg\"\>", ",", "\<\"iatrogenic\"\>", ",", "\<\"parboil\"\>", 
   ",", "\<\"rep\"\>", ",", "\<\"fancier\"\>", ",", "\<\"bounty\"\>", 
   ",", "\<\"knowledge\"\>", ",", "\<\"embitterment\"\>", 
   ",", "\<\"hypertrophy\"\>", ",", "\<\"suppurate\"\>", 
   ",", "\<\"humming\"\>", ",", "\<\"disparagement\"\>", 
   ",", "\<\"waffle\"\>", ",", "\<\"fauvism\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[165]=",ExpressionUUID->"0e71eead-7b70-461f-9f53-589d08f2c68b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{"l", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", 
     RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[166]:=",ExpressionUUID->"744c68e7-7a75-42e0-844e-6db7bc58e999"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"drier\"\>", ",", "\<\"dissemination\"\>", 
   ",", "\<\"espresso\"\>", ",", "\<\"erg\"\>", ",", "\<\"parboil\"\>", 
   ",", "\<\"fancier\"\>", ",", "\<\"knowledge\"\>", 
   ",", "\<\"hypertrophy\"\>", ",", "\<\"humming\"\>", 
   ",", "\<\"waffle\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[166]=",ExpressionUUID->"017a1a08-986f-409c-83e4-10ab5bb941e4"]
}, Open  ]]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{"Try ", 
             ButtonBox["Take", BaseStyle -> "Hyperlink", ButtonData -> {
                URL["https://reference.wolfram.com/language/ref/Take.html"], 
                None}, ButtonNote -> 
              "https://reference.wolfram.com/language/ref/Take.html"], "."}], 
           "Text"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {51.46680450439453, 62.31543731689453}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"41f0c6ce-37e2-4780-8f2e-\
0460c3023399"]], "Text",
 CellTags->"CYU",ExpressionUUID->"f89e65e6-57d3-4bdb-ad6b-8be74083fbec"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"Take", "[", 
              RowBox[{"l", ",", 
                RowBox[{"{", 
                  RowBox[{"1", ",", 
                    RowBox[{"-", "1"}], ",", "2"}], "}"}]}], "]"}]], 
           "Input"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {49.581321716308594`, 60.429954528808594`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"48e6b6d7-3804-44d7-bef2-\
4efc7a0466b2"]], "Text",
 CellTags->"CYU",ExpressionUUID->"b0bb2760-9a6a-445e-8310-0729757e9b1a"],

Cell[CellGroupData[{

Cell["\<\
Insert x after every five letters in the list of letters of the English \
alphabet from a to t.\
\>", "ItemNumbered",ExpressionUUID->"32a80aae-3ac4-4847-b179-c7daecc1669b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Insert", "[", 
   RowBox[{
    RowBox[{"CharacterRange", "[", 
     RowBox[{"\"\<a\>\"", ",", " ", "\"\<t\>\""}], "]"}], ",", " ", "x", ",", 
    " ", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "6", "}"}], ",", " ", 
      RowBox[{"{", "11", "}"}]}], "}"}]}], "]"}], 
  "\[IndentingNewLine]"}]], "Input",
 CellLabel->
  "In[167]:=",ExpressionUUID->"11c477c1-8086-44a7-8fee-82643f35ffad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "x", ",", "\<\"f\"\>", ",", "\<\"g\"\>", 
   ",", "\<\"h\"\>", ",", "\<\"i\"\>", ",", "\<\"j\"\>", ",", "x", 
   ",", "\<\"k\"\>", ",", "\<\"l\"\>", ",", "\<\"m\"\>", ",", "\<\"n\"\>", 
   ",", "\<\"o\"\>", ",", "\<\"p\"\>", ",", "\<\"q\"\>", ",", "\<\"r\"\>", 
   ",", "\<\"s\"\>", ",", "\<\"t\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[167]=",ExpressionUUID->"81998f85-084a-4ef9-838b-1c99ec26cb18"]
}, Open  ]]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{
             StyleBox[
              ButtonBox[
              "CharacterRange", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL[
                 "https://reference.wolfram.com/language/ref/CharacterRange.\
html"], None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/CharacterRange.\
html"], FontWeight -> "Plain"], 
             StyleBox[
             " will give a list of letters. As the question suggests, ", 
              FontWeight -> "Plain"], 
             StyleBox[
              ButtonBox["Insert", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL[
                 "https://reference.wolfram.com/language/ref/Insert.html"], 
                 None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/Insert.html"], 
              FontWeight -> "Plain"], 
             StyleBox[
             " would be a good function to look at.", FontWeight -> 
              "Plain"]}], "Text"]]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1011.5, {67.85792541503906, 78.70655822753906}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"eff27a96-1e34-494d-b3b5-\
1f5b9c1b43a6"]], "Text",
 CellTags->"CYU",ExpressionUUID->"06fb626c-5b8c-453b-8ef1-d3c8ddba0056"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"Insert", "[", 
              RowBox[{
                RowBox[{"CharacterRange", "[", 
                  RowBox[{"\"a\"", ",", "\"t\""}], "]"}], ",", "x", ",", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"{", "6", "}"}], ",", 
                    RowBox[{"{", "11", "}"}], ",", 
                    RowBox[{"{", "16", "}"}], ",", 
                    RowBox[{"{", "21", "}"}]}], "}"}]}], "]"}]], 
           "Input"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {49.581321716308594`, 60.429954528808594`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"995f276c-b582-4e63-8a26-\
ec6d07aab2e9"]], "Text",
 CellTags->"CYU",ExpressionUUID->"ad9b09da-6468-4cf5-82e0-d7b47d57979a"],

Cell[CellGroupData[{

Cell[TextData[{
 "Replace all occurrences of ",
 StyleBox["0", "Input"],
 " in the following list with a small positive number like ",
 StyleBox["0.0001", "Input"],
 "."
}], "ItemNumbered",ExpressionUUID->"36cc8a7a-3eb2-4d7f-ae54-e2d8e6927e64"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"numbers", " ", "=", " ", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{"10", ",", "200"}], "]"}]}]], "Input",
 CellLabel->
  "In[168]:=",ExpressionUUID->"9b9721a3-61b2-44db-9c28-f1605fc5e33b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7", ",", "0", ",", "0", ",", "9", ",", "5", ",", "10", ",", "5", ",", "10",
    ",", "4", ",", "9", ",", "5", ",", "7", ",", "4", ",", "3", ",", "7", ",",
    "0", ",", "9", ",", "7", ",", "1", ",", "3", ",", "0", ",", "9", ",", "6",
    ",", "0", ",", "5", ",", "1", ",", "4", ",", "10", ",", "3", ",", "9", 
   ",", "3", ",", "9", ",", "2", ",", "9", ",", "7", ",", "0", ",", "6", ",", 
   "1", ",", "3", ",", "5", ",", "6", ",", "8", ",", "5", ",", "9", ",", "2", 
   ",", "6", ",", "9", ",", "6", ",", "1", ",", "8", ",", "10", ",", "1", ",",
    "6", ",", "6", ",", "7", ",", "2", ",", "2", ",", "0", ",", "5", ",", "9",
    ",", "8", ",", "5", ",", "10", ",", "5", ",", "7", ",", "0", ",", "3", 
   ",", "6", ",", "0", ",", "0", ",", "5", ",", "8", ",", "2", ",", "4", ",", 
   "0", ",", "9", ",", "5", ",", "7", ",", "4", ",", "8", ",", "9", ",", "3", 
   ",", "2", ",", "3", ",", "2", ",", "6", ",", "1", ",", "4", ",", "1", ",", 
   "9", ",", "3", ",", "1", ",", "2", ",", "8", ",", "9", ",", "2", ",", "6", 
   ",", "1", ",", "9", ",", "10", ",", "0", ",", "8", ",", "3", ",", "9", ",",
    "6", ",", "1", ",", "9", ",", "1", ",", "9", ",", "2", ",", "8", ",", "5",
    ",", "5", ",", "0", ",", "0", ",", "4", ",", "4", ",", "9", ",", "10", 
   ",", "0", ",", "1", ",", "7", ",", "5", ",", "8", ",", "4", ",", "3", ",", 
   "3", ",", "8", ",", "3", ",", "6", ",", "7", ",", "3", ",", "6", ",", "7", 
   ",", "5", ",", "6", ",", "2", ",", "1", ",", "2", ",", "8", ",", "1", ",", 
   "5", ",", "1", ",", "9", ",", "9", ",", "1", ",", "10", ",", "7", ",", 
   "10", ",", "3", ",", "5", ",", "3", ",", "1", ",", "3", ",", "6", ",", "4",
    ",", "2", ",", "6", ",", "3", ",", "6", ",", "5", ",", "1", ",", "9", ",",
    "2", ",", "8", ",", "10", ",", "4", ",", "7", ",", "0", ",", "6", ",", 
   "0", ",", "0", ",", "0", ",", "4", ",", "9", ",", "7", ",", "10", ",", "0",
    ",", "1", ",", "4", ",", "4", ",", "8", ",", "5", ",", "7", ",", "3", ",",
    "1", ",", "3", ",", "2", ",", "5", ",", "10", ",", "0", ",", "4", ",", 
   "7", ",", "5", ",", "4", ",", "1", ",", "7", ",", "0", ",", "7", ",", 
   "3"}], "}"}]], "Output",
 CellLabel->
  "Out[168]=",ExpressionUUID->"70b07279-8cdb-4a70-8cbf-5d0447cfd71e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"numbers", " ", "/.", " ", 
   RowBox[{"0", "->", "0.0001"}]}]}]], "Input",
 CellLabel->
  "In[169]:=",ExpressionUUID->"d75c5b41-d9ef-45a2-9da3-e9ce5ec204b6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "7", ",", "0.0001`", ",", "0.0001`", ",", "9", ",", "5", ",", "10", ",", 
   "5", ",", "10", ",", "4", ",", "9", ",", "5", ",", "7", ",", "4", ",", "3",
    ",", "7", ",", "0.0001`", ",", "9", ",", "7", ",", "1", ",", "3", ",", 
   "0.0001`", ",", "9", ",", "6", ",", "0.0001`", ",", "5", ",", "1", ",", 
   "4", ",", "10", ",", "3", ",", "9", ",", "3", ",", "9", ",", "2", ",", "9",
    ",", "7", ",", "0.0001`", ",", "6", ",", "1", ",", "3", ",", "5", ",", 
   "6", ",", "8", ",", "5", ",", "9", ",", "2", ",", "6", ",", "9", ",", "6", 
   ",", "1", ",", "8", ",", "10", ",", "1", ",", "6", ",", "6", ",", "7", ",",
    "2", ",", "2", ",", "0.0001`", ",", "5", ",", "9", ",", "8", ",", "5", 
   ",", "10", ",", "5", ",", "7", ",", "0.0001`", ",", "3", ",", "6", ",", 
   "0.0001`", ",", "0.0001`", ",", "5", ",", "8", ",", "2", ",", "4", ",", 
   "0.0001`", ",", "9", ",", "5", ",", "7", ",", "4", ",", "8", ",", "9", ",",
    "3", ",", "2", ",", "3", ",", "2", ",", "6", ",", "1", ",", "4", ",", "1",
    ",", "9", ",", "3", ",", "1", ",", "2", ",", "8", ",", "9", ",", "2", ",",
    "6", ",", "1", ",", "9", ",", "10", ",", "0.0001`", ",", "8", ",", "3", 
   ",", "9", ",", "6", ",", "1", ",", "9", ",", "1", ",", "9", ",", "2", ",", 
   "8", ",", "5", ",", "5", ",", "0.0001`", ",", "0.0001`", ",", "4", ",", 
   "4", ",", "9", ",", "10", ",", "0.0001`", ",", "1", ",", "7", ",", "5", 
   ",", "8", ",", "4", ",", "3", ",", "3", ",", "8", ",", "3", ",", "6", ",", 
   "7", ",", "3", ",", "6", ",", "7", ",", "5", ",", "6", ",", "2", ",", "1", 
   ",", "2", ",", "8", ",", "1", ",", "5", ",", "1", ",", "9", ",", "9", ",", 
   "1", ",", "10", ",", "7", ",", "10", ",", "3", ",", "5", ",", "3", ",", 
   "1", ",", "3", ",", "6", ",", "4", ",", "2", ",", "6", ",", "3", ",", "6", 
   ",", "5", ",", "1", ",", "9", ",", "2", ",", "8", ",", "10", ",", "4", ",",
    "7", ",", "0.0001`", ",", "6", ",", "0.0001`", ",", "0.0001`", ",", 
   "0.0001`", ",", "4", ",", "9", ",", "7", ",", "10", ",", "0.0001`", ",", 
   "1", ",", "4", ",", "4", ",", "8", ",", "5", ",", "7", ",", "3", ",", "1", 
   ",", "3", ",", "2", ",", "5", ",", "10", ",", "0.0001`", ",", "4", ",", 
   "7", ",", "5", ",", "4", ",", "1", ",", "7", ",", "0.0001`", ",", "7", ",",
    "3"}], "}"}]], "Output",
 CellLabel->
  "Out[169]=",ExpressionUUID->"3c3d1227-831c-4c07-a055-6bf8e25bf6bb"]
}, Open  ]]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{
             StyleBox[
             "To replace all occurrences, use ", FontWeight -> "Plain"], 
             StyleBox[
              ButtonBox["ReplaceAll", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL[
                 "https://reference.wolfram.com/language/ref/ReplaceAll.html"]\
, None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/ReplaceAll.html"], 
              FontWeight -> "Plain"], "."}], "Text"]]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1011.5, {51.46680450439453, 62.31543731689453}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"e95e1896-33e9-4274-88c3-\
324c0c4fc4a9"]], "Text",
 CellTags->"CYU",ExpressionUUID->"ddda4ce9-4c39-4137-9bb6-9a88e5215a89"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"numbers", " ", "/.", " ", 
              RowBox[{"0", "\[Rule]", " ", "0.0001"}]}]], "Input"]]}}, {}]], 
     Spacings -> 2, Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], 
     BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {49.581321716308594`, 60.429954528808594`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"f09f1237-f7f9-4d6e-a3ab-\
5876509703f5"]], "Text",
 CellTags->"CYU",ExpressionUUID->"2b3b094c-8f28-45ae-9bcb-21b5652e1c88"],

Cell[TextData[{
 "Find the 10 most common words in ",
 StyleBox["ExampleData[{\[OpenCurlyDoubleQuote]Text\[CloseCurlyDoubleQuote],\
\[CloseCurlyDoubleQuote]AliceInWonderland\[CloseCurlyDoubleQuote]}]", "Input"],
 ". (Challenge: Ignore stopwords like a, an and the, while counting the most \
common words.)"
}], "ItemNumbered",ExpressionUUID->"4e57228b-7fa0-42d7-b909-6e6c11f78fb5"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{
             StyleBox[
              ButtonBox["WordCounts", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL[
                 "https://reference.wolfram.com/language/ref/WordCounts.html"]\
, None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/WordCounts.html"], 
              FontWeight -> "Plain"], 
             StyleBox[
             " will give the number of times a word occurs in a piece of \
text. For stopwords, look for a function with \
\[OpenCurlyDoubleQuote]Stopwords\[CloseCurlyDoubleQuote] in its name.", 
              FontWeight -> "Plain"]}], "Text"]]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1011.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"b0ce7814-5156-4270-993a-\
e31741251c3f"]], "Text",
 CellTags->"CYU",ExpressionUUID->"11b3b001-f2dc-4b3b-835c-47f8b8738c30"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"Keys", "[", 
              RowBox[{"TakeLargest", "[", 
                RowBox[{
                  RowBox[{"WordCounts", "[", 
                    RowBox[{"ExampleData", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"AliceInWonderland\""}], "}"}],
                     "]"}], "]"}], ",", "10"}], "]"}], "]"}]], "Input", 
           CellLabel -> "In[2]:="]]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1011.5, {49.581321716308594`, 60.429954528808594`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"a8690eb8-9e98-4ec1-a93c-\
55fcd65abefd"]], "Text",
 CellTags->"CYU",ExpressionUUID->"bb3c97af-9eee-4fd3-82df-318a5bf118b9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Keys", "[", 
  RowBox[{"TakeLargest", "[", 
   RowBox[{
    RowBox[{"WordCounts", "[", 
     RowBox[{"ExampleData", "[", 
      RowBox[{"{", 
       RowBox[{"\"\<Text\>\"", ",", " ", "\"\<AliceInWonderland\>\""}], "}"}],
       "]"}], "]"}], ",", " ", "10"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[170]:=",ExpressionUUID->"cf4e0508-2b90-4c05-849c-4e5d62587c73"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"the\"\>", ",", "\<\"and\"\>", ",", "\<\"a\"\>", 
   ",", "\<\"to\"\>", ",", "\<\"she\"\>", ",", "\<\"of\"\>", 
   ",", "\<\"was\"\>", ",", "\<\"Alice\"\>", ",", "\<\"in\"\>", 
   ",", "\<\"it\"\>"}], "}"}]], "Output",
 CellLabel->
  "Out[170]=",ExpressionUUID->"d2e920c8-96eb-4a06-a1c0-07698e6483d3"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"Keys", "[", 
              RowBox[{"TakeLargest", "[", 
                RowBox[{
                  RowBox[{"WordCounts", "[", 
                    RowBox[{"DeleteStopwords", "[", 
                    RowBox[{"ExampleData", "[", 
                    RowBox[{"{", 
                    RowBox[{"\"Text\"", ",", "\"AliceInWonderland\""}], "}"}],
                     "]"}], "]"}], "]"}], ",", "10"}], "]"}], "]"}]], "Input",
            CellLabel -> "In[1]:="]]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1011.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"063da7eb-b93a-4b1f-8db5-\
a18a61d14897"]], "Text",
 CellTags->"CYU",ExpressionUUID->"b2eebacb-d9fb-4714-ba8e-52805e796c59"],

Cell[TextData[{
 "Make an association giving the five most common first letters of words in \
",
 StyleBox["WordList[]", "Input"],
 " and their counts."
}], "ItemNumbered",ExpressionUUID->"232590ea-b2bf-442a-9526-3fb28e627283"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{
             StyleBox[
              ButtonBox["CountsBy", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL[
                 "https://reference.wolfram.com/language/ref/CountsBy.html"], 
                 None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/CountsBy.html"], 
              FontWeight -> "Plain"], 
             StyleBox[
             " counts items in a list according to the result of a function ",
               FontWeight -> "Plain"], 
             Cell[
              BoxData[
               FormBox[
                StyleBox["f", FontWeight -> "Plain"], TraditionalForm]]], 
             StyleBox[" applied to the items.", FontWeight -> "Plain"]}], 
           "Text"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1011.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"060f9727-e533-46db-b75d-\
651453b1de14"]], "Text",
 CellTags->"CYU",ExpressionUUID->"46dc54f1-f00b-4fac-8de1-cb9011743d6e"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"TakeLargest", "[", 
              RowBox[{
                RowBox[{"CountsBy", "[", 
                  RowBox[{
                    RowBox[{"WordList", "[", "]"}], ",", 
                    RowBox[{
                    RowBox[{"StringTake", "[", 
                    RowBox[{"#", ",", "1"}], "]"}], "&"}]}], "]"}], ",", 
                "5"}], "]"}]], "Input"]]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1011.5, {49.581321716308594`, 60.429954528808594`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"26a5f772-2230-4352-9247-\
499d6dbb0e83"]], "Text",
 CellTags->"CYU",ExpressionUUID->"9a1dbeeb-d5aa-4cae-ba1f-b36d65999e35"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"myAssoc", " ", "=", " ", 
  RowBox[{"AssociationThread", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"a", ",", " ", "b", ",", " ", "c"}], "}"}], " ", "->", " ", 
    RowBox[{"{", 
     RowBox[{"1", ",", " ", "2", ",", " ", "3"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[171]:=",ExpressionUUID->"d648803e-c7ad-40a4-9183-e8cacffe2de3"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"a", "\[Rule]", "1"}], ",", 
   RowBox[{"b", "\[Rule]", "2"}], ",", 
   RowBox[{"c", "\[Rule]", "3"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[171]=",ExpressionUUID->"b41db78e-4f8f-4a04-876d-b8c717edada3"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
Editable->True,
Saveable->True,
ScreenStyleEnvironment->"Working",
WindowToolbars->{},
PageWidth->Automatic,
WindowSize->{1147, 1029},
WindowMargins->{{Automatic, 606}, {Automatic, 111}},
WindowTitle->"Lists and Associations",
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{
       Cell[
        BoxData[
         TagBox[
          GridBox[{{
             ButtonBox[
              TagBox[
               TooltipBox[
                GraphicsBox[{
                  Thickness[0.022727272727272728`], {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{0., 40.099998474121094`}, {44., 
                    40.099998474121094`}, {44., 31.999998092651367`}, {0., 
                    31.999998092651367`}, {0., 40.099998474121094`}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{0., 24.099998474121094`}, {44., 
                    24.099998474121094`}, {44., 15.999998092651367`}, {0., 
                    15.999998092651367`}, {0., 24.099998474121094`}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{0., 8.099998474121094}, {44., 
                    8.099998474121094}, {44., 0.}, {0., 0.}, {0., 
                    8.099998474121094}}}]}}, {
                 ImageSize -> {Automatic, 27}, 
                  ImagePadding -> {{0, 0}, {3, 3}}, AspectRatio -> Automatic, 
                  ImageSize -> {44., 41.}, 
                  PlotRange -> {{0., 44.}, {0., 40.099998474121094`}}}], 
                "\"Table of Contents\"", TooltipStyle -> "TextStyling"], 
               Annotation[#, WolframUTools`Private`tooltip$218802, 
                "Tooltip"]& ], BaseStyle -> "Hyperlink", Evaluator -> 
              Automatic, Method -> "Preemptive", ButtonNote -> 
              "DEV210-WolframLanguageProgrammingFundamentals-TableOfContents.\
nb", ButtonFunction :> If[FileNameTake[
                  Directory[], {2, 2}] == "wolframcloud", 
                SystemOpen[
                "https://www.wolframcloud.com/obj/online-courses/Published/\
DEV210/DEV210-WolframLanguageProgrammingFundamentals-TableOfContents.nb"], 
                SystemOpen[
                 FileNameJoin[{
                   NotebookDirectory[], 
                   "DEV210-WolframLanguageProgrammingFundamentals-\
TableOfContents.nb"}]]]], 
             Cell[
              BoxData[
               ButtonBox[
               "Wolfram Language Programming Fundamentals", Tooltip -> 
                "Wolfram Language Programming Fundamentals: Wolfram U Course",
                 BaseStyle -> {
                 "Hyperlink", "DockedTitle", FontColor -> GrayLevel[1]}, 
                ButtonData -> {
                  URL[
                  "https://www.wolfram.com/wolfram-u/courses/programming-\
applications/programming-fundamentals-dev210"], None}, ButtonNote -> 
                "https://www.wolfram.com/wolfram-u/courses/programming-\
applications/programming-fundamentals-dev210"]], "DockedTitle"]}}, BaseStyle -> 
           "DockedTitle", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {"Columns" -> {{0.75}}, "Rows" -> {{0}}}], 
          "TextGrid"]], "DockedTitle", CellMargins -> {{0, 0}, {0, 0}}, 
        StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
        CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
        CellFrameMargins -> {{20, 20}, {15, 15}}, LineSpacing -> {1, 4}, 
        LanguageCategory -> "NaturalLanguage", CounterIncrements -> "Title", 
        CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
          "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {
          "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
          "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}}, MenuSortingValue -> 
        1100, MenuCommandKey :> First[{"1"}], FontFamily -> "Source Sans Pro",
         FontSize -> 34, FontTracking -> -0.5, FontColor -> GrayLevel[1], 
        Background -> RGBColor[
          Rational[22, 255], 
          Rational[8, 51], 
          Rational[21, 85]], Alignment -> {Left, Center}], 
       PaneBox[
        TemplateBox[{
          TagBox[
           TooltipBox[
            GraphicsBox[{
              Thickness[0.0022222222222222222`], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                0}}}, CompressedData["
1:eJxtlTFo20AUhtUGAoVsgUC3dvEcEBQ8xciOQsAgpZ4sbCHrUpEh0EHQ2ZOh
kM1LtBkKmrIFAtkEgUBBQ8AQ8ObJEMiWKZAhL/p/YZ2wwZy+e/+9+9+7s/w9
/P3z15ZhGJ/keyrfz0bxCaKboCXjWTQ5+Rhb5nT0MWb5zhH4X8FB1LDB1wXL
0yHGjPGog3U511+0Mf9Izi3olyPkMQueJU8Fj5OFhfkXbX2Wv5G7Hei/hPR3
iPx7IeYX5EZIX/R7R33XQfw+pF+NZT8Hef4znjr0XebTOIhWDuYfyNsu9pvT
z1eNxVct3qzFbZf9Knjf7GksTzWeubqfexd5b0t/1KfUGyeI/y34Id/heSuN
xddGlifyk9rEpV581Pimxqliv7g+UVV/cg4K868u5sdc/8x6/jC+YP3nqlq/
1EP9FfvRZ3zCfK6q9nOWHCv022S8pZDnxcG4W/bvAByPdO4FZN6niV+Ni2JY
ZTkfD/669H/lYf+Y+8/IU9Yz9dg31j/xoMsYj6mfc33A+JL5u161f/K786r9
lXtKPfovH+63TV72dc40Fn8b+TJJqA+Gm7jUy+9YYznHQS3foOpXzntQq4/6
8v43qU80Xp83uOz/Wt8sz5/5Guy3PUB/d7X91vejx/wZ3x8J61nZ4Nsh6+T7
aM77gPdnlj8PMR93WLePMW1D963gcbSyoDN5v1oW/fn0Y2G/PuNZm3l9+uL7
+YL6mO/L1GddNvvIuHkE/qH9P2j/F++mXnJA
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, CompressedData["
1:eJxtVD1IHFEQfkQIBFLYCjYhIARswlWCmKfn3+np7dnZSXj73hUHEWwtrkqV
QhCE7bYSAnap0r3K6hVWgp1wIAgphICQzrmdb3LzQhaW4dv5n/lm333+clDO
GGNe0fsRkp4j7weWZcdm+GFrIuvqsMHGjDYn0rbawHaD9R+AzTr7vR6w3e81
1t+FiYzpLfD3Bo/8wir7HQe2P7GIFxDP8vexB/7E8S+ARyscdznDxtyXuf5b
mftvCraQYm9Zf+10fXVVOV1/TEOX99dxun/bajk9n5jmnZ6fMbOO8/B8BVP/
HY3p2dX+tIeujk917en8NOd9XR/F7+n6aa+F7o/sC4430/R/kxb7iAc87HMd
Z8BXfbYfN3jgr6G3XmPK9w9+BL7sc32LIY9/HHT+mK6Crk/4I/XX1RvhZw/x
Brp/4ed0PszfmLpdxBF+7mgs/KdK3P8w7X+bv98CJ9zDGPuKGyyf4H8p9wB+
xTbbvxf+tTE/YLuGvCXb/VhleV6iftxLbPDIP+Be/og98JLXOKbTDJP02p/u
xev41GfI87eCrs+YQu6zzfbDoPujyEH3T/cnevwvKtkv7qGW/8O2xtP51+K/
o/3p6er45L+n89fVnNyD6Ht5/bGn+6O5Ffx9Fvm/Fno+dfWz0PO7Sb8KPV/a
M/i+lOEj/1xqLPsTf9mvxJf9T/P/5QfshT9c/5RfBv09Od2/8FPmI/yV+Qm/
Zb4Z/18AiE9a0w==
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxtkz1LA0EQhlcFQbAQUqVTAqkPFlIJuUvQemMXsDgEF+8DFAKCYJFKEOxS
bZcqlV0qweJ+wBWBgGAXEALW16ZwvXkXd4IHy96z887szNzcydXtxfWeEGLH
rq5du6J+Qrm8Cem1G3o81rPwd5+ab8ZFuWEsxFHicyhbCe1zsExIV4D7pDef
8Fewi4jiXyJeu+ZYa+iHEenuwAb2excP/o+4X/Z8tvkxXpSHyudYnyuq96Hm
QI6Uf18gJ7An4Lny812UpeL1rJRfbyArxfshBn6/Yr0Pbrj8BtAxdt/Dsfte
22yVA4r7kf7Hf/ELxkX5ynhqzBY/p36+tv+pX4/tT+rXa/sD/dr1B/alQt9T
8nuD/tTlC3sHPIZ/AP2QsRDHjMd6jXl9yXyO9Szj9veM+lZhHhdkN82Izr8y
Og/BFfQjzNsGPI8or4McOugbYJrHqWnmqKeHvHOKU/ZI18qh61O+7Zx2De4g
3uiM9gnjWD8hPv+fa/4BI1HiVA==
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxtlL9Lw0AUx68KguAgCEIRhKIIboVMTl7qoiD2qovdgmC2mExCt4Dg5CAI
4m2BgiA4FJwKHQJOQoaAU8HBP6BDoZObZ9/38F3pwXF88n7ce9/jpXYRn14u
CiEqZh+YvSCmS3o3V9KcZTFSknGmh0d/ZxCuJ/NYiPSQ+89yGj43OEvPa1D8
Ldn10Ke4e7D2yf4IbvsU10W+Hfj3cJ+Ycl4MbD5JXMCeg79w/5uk72NbH1jE
nE1/sWtXc9msfdJlN5rH//7SYemdORyE4QxfR7xeo1fE+zH6ROgT+brwn+C+
HuXTVZ/q6SNeQs93cAr7h80PfUvkX2lwNv4OZ7qqOJfFsUJdsHcUvy/TGvYB
uK94vXXvU/F+hPhWvN+6N1Fcj0z/KK6XWS2uZxAutbjelu17WLbvNctPWtv4
hLMQ55iH9gn8Hc6L7YTOuybFb9n5adJZS6ifNdS/Cfse+t+w+WC389eBXquI
f1D0fTkh/V/BFcxnDv9xzPU18xBzfc37xBQ/QvyLw87/4Rfi3/f7
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {CompressedData["
1:eJxtlD9IHEEUxgeLVEcqm2sEmzSBIEyaEPBmr7p/6l4MQSHIonHhmrh7abTT
xkaxCsHpNgRsLLUJhLCVEFhFCAREi0BADFxx4Sq7jPe+h2/kBpbhNzPvzfe+
2ZnJ5bVXq2NKqUX33fWuZbbTNa7ftBdVMxxZB5eHHMXbQ86L3YD6j0M2WgfU
f+F4Q3xEHB8Yij/xOLM/RrJrFcr/zePMfvbY6B3WV5F6ldaIf0d82sL8AtZb
xDex/3WF9E2DnxiKfw6OUc9T1HsEvZOsJyAuY/5DQPkegwfgTyn8qlH+1kh2
O1Yl3/s/i/kcfs/zeuR/AzY4n7cp9SWsX8F+A+jvYL4Ap5wfvJH69W6RHpyX
899j9z947CJGssL5OU5G8X3+Q4/z4tjjKP7+gE8SqTeKzxJZTxT/SmS9eXGV
SD+M/pPA74DibhLfz14i/Vaqz/nh7wD5S1XJfJ7M7j8JJZ8XrZDG/2F+I5T7
ZdZi/i/4ayj1TumfoaxHqd+hrHdKD0LpR2ZvQ+mXa23pZxQ/aku/mfk8mPm8
HvK+tci3l0o2+tLjvBjH/YnapOtFl/zoQd9SV/rh/s8ujR/MSc7sxYzP5Rla
957vY4s4Rvx108+/2CQ9rzlfg3TVOL5B/Uu8f6UGxT/j96BOPMHrwXz/dR0+
83tQI+7z/avRvuL9/Q8PwFRN
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQDQQJaX6FDmBWgyeIPnCmB4WfkLYMTX4PmL9g5kyo
/Dmo/AFPCP0AzHcw/gxV/wbKN/aCyP8ohNrjBTGHsQhizjMon7MIQkd6Q8T5
YPLeEHOEiyB0sQ/EHJEiCM3ji8o/g8bv8YOYKwg1T80fqg9q3mZ/iPs4oPZL
BkD4DGC+gXFwAET9F6j/KwMg9MtCaDgFQMy5DQsPqPzJQoj+y1DzdkDVP4Oq
XwzmXzjzBqq+E4V/4IwPVj4ifpDiDwD9RnX7
                 "]}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {CompressedData["
1:eJxtk7FKBDEQhqPdwTU24oIIhyIKIsiCIBYmUbY80EKwWwVTKribQhQ5sbEQ
wTJd4OB68RDLa4V7AV/AWvAFzO78wWTZwDJ8yT9/JpNN7+zy6HyWMbbnviq6
wdNhwV20Jsko3tfM03S/irm6q9mNmifTW/BEku6moPknSfnXNQ/MScxqNWI3
Inb5ItzP7S9I9wj+5aR/8ftzihb+I04+44it+WzlqgsUf67a+F8/08jvNHgO
9b2hnoWovlwt4XxTTrpl5H9Dv4Z+JYJ0G8jngvy3wAP0Z9v7C/LbhX9XIg/+
StL8Afy/0O9Oib4dkl+/wfOa8v19JRr5qG8RbFBfT1MdBdZXdFz/ug7Pl6tN
rDPUn+qwH9bs6LBfTqHjfmY67Lerv8HHEVtz2soM952ri7KN/f3y9CHiXI0i
ZuyjDM/n2f2vorEuQ3YKSX7v8PP3NS4p0ntydUNP782aV++P/GfouxnND4s2
rt/3H69t4mk=
                 "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQDQQHzriUOIBpHx8Q7WBsDeYvmCnpC+Ebg/kJac+g
fG2o/Ew/CF8Zpt8fQsuA+UAQAKElwHwD4+AAiDliUPPUAiD6hVHUL5gpWAIR
3+wPUccHVZ/mDxHnhtrH4w/RxwHVf8APIs4C1V/sBzGPEeYfqPyfYqh6Xwj9
oxhqvi9E/gtUnsEXIv6uGCLe4wOht0DlG9wh/JoSVD5SeAIAy/FP8g==
                 "]}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}}}, CompressedData["
1:eJxtlLFLHEEUxicKVvkHbARBhECKgwUrwdk7ESSHzHlVSLMILgYEr9m9TXdi
e12aDFhsJYIiiE1CmgUhCG5xIAhiYyFB8TgUKzvHm++5b5ZbWGZ/8968ee+b
Nzu9trW6Pi6E+GDeNfOOieEjvYO2tJ8LknEn3JNvYxAeOSzE7xJnJT5r2zgn
4B7iZ4h3OeQsz6X1u4b/M/xvYP/o2/EW66Vvxztwx7frHig+/Pu0vmr3GyC/
0OGK91O9jamedupP9VPMOctnhtzLu4pzR+uqw+Es4s/GqM+38T6Bu8jvM7iO
eiqIN+nb9XMx1yPL5yke9KrFXF/pfYm5/tJrUn7gbw4HYehwqr+P5KL+3WgU
F+e973Cqjx2W3t8Sn0Zu/ueIn4EvIl5vqq8irofpj4jrZfoD6yX0vgd3qB8o
PvR+RHzbH8TG3+FUTyrOvbyurH4D2H8ovl+qNez/wX8Uz7fiXShej5lXvN6K
96y4Hql+UVwv8zS4nkE40eB6E9N5ENN5lfmX1g07b/uh4Kk25mvIr83t5isZ
xUX8rsPS23HY6OawEK2E12f2TXj9Ziax+veh31fYr6BPE/H+Qf8V+B/Cfxnc
hX0JvIn1NewvHTb5OUz3/Z1x37N8MbEj3fdlMN33Orju83ypf6meor8Digfe
gJ3+py3sT/cvofxwX7YdpvMgpvMqsyj9/4f8CjTreeM=
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxtlT9oE1Ecx19VnEoXFwsOunQsgTd1qXeXxCnDRboEOhxSD8RAlYCYu1Aq
QqcOgosHRQKF4FCEEigtOqQIXbyhkMUgiFAoCBmEQCGL+Gt+3x+8X8hBePm8
7+/v+3P34Mnm46c3jTFz9Nuk3w0zeaL4V+LRuB3Hq9ejZ78o7uV7zFk2YfoH
XnzI+obo4Ar8l7zrsZ2tgDsTjuIl0X2Odzdhv9xnfUHiBTx/K+H5uMj2JuG4
tZLLnm2Utb4YunyeV0KO86/JejPkcQzOoF+BT+D/d8IF24f9nybP/w457wX0
Efgn/MfgPuxNlfl7k/PcrrLdqWJjjhX38oOZ/CHLqjz/OZnFYu/Z/UTnyxKd
753iKN5J3Hp7eStx+4niV1jPIdbnBfQB1ucZ4p2F7L8B+wPYR+Bd6OvgOvxr
yO8ppvqm9bLLtP8lNx79K7r5PWvBdTmPgdsP6QGPb3H+Br67PjQDbkt+n/Mf
yn3w2f8b4o08tvsh8TzOP1RMfaVav5e6/lG8zDruSzvzYV9DPSH0jo/+Ux7n
A+wH4jXAL2F/GbD/65Tz8P2K4i3wZZHt36Tov+Qy3eOyywV7J9T6I+z3NvQG
7kMKfh+6+Qu2G7r1nec57J+nPD+Q8wR9KOcH/iPwGuzH4Arql/tXVEzvJ8Wy
3tNM9eI+zLdmsdjT09L+Vyoe7f9UPReqXupT9UPvD9kP9JND7+M+niFeD/6n
sO/A/it4B/qJ7Df8j5B/RTE9iqnPssu0/zgPh9AreD9/Au8GbPcRnMt9wnm0
eN9vgbs4/3XRwWs47/x9kf2S748x97le211lfQ7nm79f6vv2H6WjrZs=
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{37.099998474121094`, 33.400001525878906`}, {42., 
                25.}, {42., 33.900001525878906`}, {36.900001525878906`, 
                41.400001525878906`}, {37.099998474121094`, 
                33.400001525878906`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{31.899999618530273`, 56.900001525878906`}, {25.5, 
                48.599998474121094`}, {35.5, 45.599998474121094`}, {41.5, 
                53.70000076293945}, {31.899999618530273`, 
                56.900001525878906`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{26.100000381469727`, 40.400001525878906`}, {
                24.899999618530273`, 29.300003051757812`}, {35.20000076293945,
                 33.80000305175781}, {35., 43.29999923706055}, {
                26.100000381469727`, 40.400001525878906`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{43., 52.599998474121094`}, {37.099998474121094`, 
                44.5}, {43., 35.900001525878906`}, {48.900001525878906`, 
                44.5}, {43., 52.599998474121094`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{53.79999923706055, 69.20000076293945}, {
                43.900001525878906`, 65.70000076293945}, {43.900001525878906`,
                 55.5}, {53.5, 58.70000076293945}, {53.79999923706055, 
                69.20000076293945}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{51., 43.29999923706055}, {50.79999923706055, 
                33.80000305175781}, {61., 29.300003051757812`}, {
                59.900001525878906`, 40.400001525878906`}, {51., 
                43.29999923706055}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{54.099998474121094`, 56.900001525878906`}, {44.5, 
                53.70000076293945}, {50.400001525878906`, 
                45.599998474121094`}, {60.5, 48.599998474121094`}, {
                54.099998474121094`, 56.900001525878906`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{42., 55.5}, {42., 65.70000076293945}, {
                32.20000076293945, 69.20000076293945}, {32.5, 
                58.70000076293945}, {42., 55.5}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{40.20000076293945, 68.29999923706055}, {
                35.599998474121094`, 74.29999923706055}, {26.700000762939453`,
                 78.20000076293945}, {31.799999237060547`, 
                71.29999923706055}, {40.20000076293945, 
                68.29999923706055}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{30.5, 61.099998474121094`}, {30.299999237060547`, 
                70.20000076293945}, {25.100000381469727`, 
                77.10000038146973}, {26.100000381469727`, 67.4000015258789}, {
                30.5, 61.099998474121094`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{28.799999237060547`, 56.}, {21.5, 
                53.29999923706055}, {15.100000381469727`, 
                46.099998474121094`}, {23.299999237060547`, 
                48.900001525878906`}, {28.799999237060547`, 56.}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{30.100000381469727`, 58.5}, {24.799999237060547`, 
                66.}, {13.800000190734863`, 63.599998474121094`}, {
                21.299999237060547`, 55.20000076293945}, {30.100000381469727`,
                 58.5}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{32.70000076293945, 44.5}, {23.899999618530273`, 
                47.099998474121094`}, {15.5, 44.20000076293945}, {
                25.100000381469727`, 42.099998474121094`}, {32.70000076293945,
                 44.5}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{43.900001525878906`, 25.}, {48.900001525878906`, 
                33.400001525878906`}, {49., 41.400001525878906`}, {
                43.900001525878906`, 33.900001525878906`}, {
                43.900001525878906`, 25.}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJRKA0BIg5gKiHUAYnfMHOmHYh2MDbWA4sbG+uD6AUz
Ix2gfCUQfeAMjyuYn5YmBlXvCjVHDKoewp81UxQiXwzhmxiLQuRnoslvRtN/
E8V8oHovZPuB6gOR3Qe0PwTN/SHI/lsw8ydEPYNCOIQv6QvhO0RA6AZXZP6B
M2eskflA83SQ9aOHH9A8TxB94QxPMNS9/lBzwe5ISHvmB6INjD8HQMx/EwTh
G0P5PQFQc7yR5YHucEXWf+CMjwuy+Q1paVbI9oOciuwfYHgYQ/U7IssDw88M
zD/rA9NvAfWvC0R9mgqEf8AVqt4YYj+PN7L8hTM6Acj6L5x5E4BiPsL/jhD/
CgejhrdCGEb4AQAnYISO
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 
                 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBmIQDQQOxsIhDkA6I21ZmAOYPzkQRKeluUU4gFU0+IBo
Y2PjSCjfFZXPYIvMT0hL0wfRZ874gPUfOHNGDNn8BTNnCkLkc8Kg8hwg2sTY
OAxqHgOInjHzZyjUvG/2YP5NFD7QHbZQ/X/A/LNnbKD6NZHphLRndmA+1B0O
xsUuyPbA/MNgYPzZHmxejxuavDeyfqCJQcjmHzjDA3YXg/FmG4h9amB+Q1qa
LTLfxPhyKFQflP85FBIeO0Mg4aETBvVfCHL4oMQPANLHWh4=
                 "], CompressedData["
1:eJxTTMoPSmViYGBQA2IQDQYHQhyA5IyZM0MdkPhAYAeiHYw3Q/jGm21B9IKZ
kkFg/tkz2iA6IU3NG8w/c0YGos/BDcrnIYbvYGyMxv/sCuabGHND7YfwZ8zk
hPCLXaHqOaD6IfyMNC6ou12hNNS8zS6o5uPnJ6QtQ+EvmDnTHtl/B86c0UL2
PxBwIIcPjN+Q9gyFb2D8OQSZb2I8ORRFP8OCUIj9aQIOYO/eDIX6TxSiXjgM
Ki/lAPauWxjEPT4GIDot7Vk4VL0thH8sAmJugysyf8HMSB9kPtC8QGT9C2be
DHYAe9cHar4ONH1IhkHkK6H+eICSXjLSlqHwwekJADolewo=
                 "]}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{48.70000076293945, 75.10000038146973}, {43., 
                84.79999923706055}, {37.29999923706055, 75.10000038146973}, {
                43., 67.9000015258789}, {48.70000076293945, 
                75.10000038146973}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{53.29999923706055, 44.5}, {60.79999923706055, 
                42.099998474121094`}, {70.5, 44.20000076293945}, {
                62.099998474121094`, 47.099998474121094`}, {53.29999923706055,
                 44.5}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{54.20000076293945, 71.29999923706055}, {
                59.29999923706055, 78.10000038146973}, {50.400001525878906`, 
                74.29999923706055}, {45.70000076293945, 68.29999923706055}, {
                54.20000076293945, 71.29999923706055}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{57.20000076293945, 56.}, {62.70000076293945, 
                48.900001525878906`}, {70.9000015258789, 
                46.099998474121094`}, {64.5, 53.29999923706055}, {
                57.20000076293945, 56.}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{64.69999694824219, 55.20000076293945}, {
                72.19999694824219, 63.599998474121094`}, {61.20000076293945, 
                66.}, {55.900001525878906`, 58.5}, {64.69999694824219, 
                55.20000076293945}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{55.5, 61.099998474121094`}, {59.900001525878906`, 
                67.4000015258789}, {60.900001525878906`, 77.10000038146973}, {
                55.70000076293945, 70.20000076293945}, {55.5, 
                61.099998474121094`}}}]}}, {
             ImageSize -> 170, AspectRatio -> Automatic, 
              ImageSize -> {450., 102.}, 
              PlotRange -> {{0., 450.}, {0., 102.}}}], 
            "\"Wolfram U: Learning Resources for the Computational \
Universe\"", TooltipStyle -> "TextStyling"], 
           Annotation[#, 
            "Wolfram U: Learning Resources for the Computational Universe", 
            "Tooltip"]& ], "https://www.wolfram.com/wolfram-u/"}, 
         "HyperlinkURL"], ImageSize -> Full, Alignment -> {Right, Center}]}}, 
     GridBoxAlignment -> {"Columns" -> {Left, Right}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> {"Columns" -> {
         Scaled[0.75], 
         Scaled[0.25]}}, 
     GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
    "Grid"]], "DockedTitle", CellMargins -> {{0, 0}, {0, 0}}, 
  StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
  CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
  CellFrameMargins -> {{20, 20}, {15, 15}}, LineSpacing -> {1, 4}, 
  LanguageCategory -> "NaturalLanguage", CounterIncrements -> "Title", 
  CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {"Figure", 0}, {
    "Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {"Subitem", 0}, {
    "Subsubitem", 0}, {"ItemNumbered", 0}, {"SubitemNumbered", 0}, {
    "SubsubitemNumbered", 0}}, MenuSortingValue -> 1100, MenuCommandKey :> 
  First[{"1"}], FontFamily -> "Source Sans Pro", FontSize -> 34, 
  FontTracking -> -0.5, FontColor -> GrayLevel[1], Background -> RGBColor[
    Rational[22, 255], 
    Rational[8, 51], 
    Rational[21, 85]]],
ShowCellBracket->True,
TaggingRules->{
 "WolframUNotebook" -> True, 
  "PresenterSettings" -> {"ShowNavigationBar" -> True}, "ShowNavigationBar" -> 
  True},
ShowCellTags->False,
TrackCellChangeTimes->False,
Magnification:>1.5 Inherited,
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Title and Section Cells", "Section"], 
      Cell[
       StyleData["Title"], CellMargins -> {{27, Inherited}, {10, 30}}, 
       FontSize -> 40, FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["DockedTitle", StyleDefinitions -> StyleData["Title"]], 
       CellMargins -> {{0, 0}, {0, 0}}, 
       CellFrameMargins -> {{20, 20}, {15, 15}}, FontSize -> 34, FontColor -> 
       GrayLevel[1], Background -> RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Subtitle"], CellMargins -> {{27, Inherited}, {0, 20}}, 
       FontSize -> 34, FontWeight -> 400, FontColor -> RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Subsubtitle"], CellMargins -> {{27, Inherited}, {0, 2}}, 
       FontSize -> 20, FontWeight -> "Thin", FontSlant -> "Italic", FontColor -> 
       RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Chapter"], FontSize -> 31, FontColor -> RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Section"], CellMargins -> {{27, Inherited}, {8, 25}}, 
       CellFrameMargins -> {{7, 7}, {7, 22}}, CellFrameColor -> 
       GrayLevel[0.8], FontColor -> RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Subsection"], CellMargins -> {{50, 3.}, {5., 10.}}, 
       FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Subsubsection"], CellMargins -> {{50, 3.}, {8., 12.}}, 
       CounterAssignments -> {{"Subsubsubsection", 0}, {"Item", 0}, {
         "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
         "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}, {
         "ItemRomanNumbered", 0}}, FontSize -> 15, FontWeight -> "Bold", 
       FontVariations -> {"CapsType" -> "AllCaps"}, FontColor -> GrayLevel[
         Rational[4, 15]]], 
      Cell[
       StyleData["Subsubsubsection"], CellMargins -> {{50, 3.}, {2., 10.}}, 
       CounterAssignments -> {{"Subsubsubsubsection", 0}, {"Item", 0}, {
         "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
         "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}, {
         "ItemRomanNumbered", 0}}, FontWeight -> "Bold", FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Subsubsubsubsection"], CellMargins -> {{50, 3.}, {2., 10.}},
        FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["WolframULogo"], CellMargins -> {{27, 0}, {0, 25}}, 
          CellGroupingRules -> "GraphicsGrouping", PageBreakWithin -> False], 
         
         Cell[
          StyleData[
          "WolframULogo", "SlideShow", StyleDefinitions -> 
           StyleData["WolframULogo"]], 
          CellFrameLabels -> {{None, None}, {None, None}}], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Working", StyleDefinitions -> 
           StyleData["WolframULogo", "SlideShow"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData[
          "TitleGraphic", StyleDefinitions -> StyleData["WolframULogo"]], 
          StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
          CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
          LineSpacing -> {1, 4}, CounterIncrements -> "Title", 
          CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
            "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {
            "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
            "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}}, 
          FontTracking -> -0.5], 
         Cell[
          StyleData[
          "TitleGraphic", "SlideShow", StyleDefinitions -> 
           StyleData["TitleGraphic"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Slideshow Working", StyleDefinitions -> 
           StyleData["TitleGraphic", "SlideShow"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["TitleGraphic", "SlideShow"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["TitleGraphic", "SlideShow"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Open]]}, 
     Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Body Content", "Section"], 
      Cell[
       StyleData["Author"], CellMargins -> {{27, Inherited}, {0, 2}}, 
       FontWeight -> "Thin", FontSlant -> "Italic"], 
      Cell[
       StyleData["Affiliation"], CellMargins -> {{27, Inherited}, {0, 2}}, 
       FontWeight -> "Thin", FontSlant -> "Italic"], 
      Cell[
       StyleData["Text"], CellMargins -> {{50, 10.}, {7., 8.}}, FontColor -> 
       GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData[
       "OpenCollapsedSection", StyleDefinitions -> StyleData["Text"]], 
       CellMargins -> {{27, Inherited}, {8, 10}}, MenuSortingValue -> 10000, 
       FontSize -> 11], 
      Cell[
       StyleData["CodeText"], CellMargins -> {{50, 10.}, {3., 15.}}], 
      Cell[
       StyleData["Item"], CellDingbat -> 
       StyleBox["\[FilledSmallCircle]", FontColor -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], FontSize -> 12], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["Subitem"], CellDingbat -> 
       StyleBox["\[FilledSmallCircle]", FontColor -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], FontSize -> 12], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["Subsubitem"], CellDingbat -> 
       StyleBox["\[FilledSmallCircle]", FontColor -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], FontSize -> 12], 
       StyleKeyMapping -> {
        "Tab" -> "Subsubsubitem", "*" -> "Subsubsubitem", "Backspace" -> 
         "Subitem", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> "Subitem"}, 
       FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["Subsubsubitem"], CellDingbat -> 
       StyleBox[
        "\[FilledSmallCircle]", Alignment -> Baseline, FontColor -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], FontSize -> 12], 
       CellMargins -> {{153, 12}, {4, 4}}, ReturnCreatesNewCell -> True, 
       StyleKeyMapping -> {
        "Backspace" -> 
         "Subsubitem", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> "Subsubitem"}, 
       CellGroupingRules -> {"ItemGrouping", 100}, CellFrameLabelMargins -> 4,
        CounterIncrements -> "Subsubsubitem", MenuSortingValue -> 1630, 
       FontFamily -> "Source Sans Pro", FontSize -> 12, FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["ItemNumbered"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubitemNumbered"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubsubitemNumbered"], 
       StyleKeyMapping -> {
        "Tab" -> "SubsubsubitemNumbered", "Backspace" -> 
         "SubitemNumbered", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> "SubitemNumbered"}, 
       FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubsubsubitemNumbered"], CellDingbat -> Cell[
         TextData[{
           CounterBox["ItemNumbered"], ".", 
           CounterBox["SubitemNumbered"], ".", 
           CounterBox["SubsubitemNumbered"], ".", 
           CounterBox["SubsubsubitemNumbered"], "."}], FontWeight -> "Bold"], 
       CellMargins -> {{153, 12}, {4, 4}}, ReturnCreatesNewCell -> True, 
       StyleKeyMapping -> {
        "Backspace" -> 
         "SubsubitemNumbered", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> 
         "SubsubitemNumbered"}, CellGroupingRules -> {"ItemGrouping", 100}, 
       CellFrameLabelMargins -> 4, CounterIncrements -> 
       "SubsubsubitemNumbered", MenuSortingValue -> 1630, FontFamily -> 
       "Source Sans Pro", FontSize -> 12], 
      Cell[
       StyleData["ItemParagraph"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubitemParagraph"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubsubitemParagraph"], 
       StyleKeyMapping -> {
        "Tab" -> "SubsubsubitemParagraph", "Backspace" -> 
         "SubitemParagraph", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> "SubitemParagraph"}, 
       FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubsubsubitemParagraph"], 
       CellMargins -> {{153, 12}, {4, 4}}, ReturnCreatesNewCell -> True, 
       StyleKeyMapping -> {
        "Backspace" -> 
         "SubsubitemParagraph", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> 
         "SubsubitemParagraph"}, CellGroupingRules -> {"ItemGrouping", 100}, 
       CellFrameLabelMargins -> 4, CounterIncrements -> "Subsubsubitem", 
       MenuSortingValue -> 1630, FontFamily -> "Source Sans Pro", FontSize -> 
       12, FontColor -> GrayLevel[0.2]], 
      Cell[
       StyleData[
       "ItemRomanNumbered", StyleDefinitions -> StyleData["ItemNumbered"]], 
       CellDingbat -> Cell[
         TextData[{
           CounterBox["ItemRomanNumbered", CounterFunction -> RomanNumeral], 
           "."}], FontWeight -> Bold], CounterIncrements -> 
       "ItemRomanNumbered"], 
      Cell[
       StyleData["KeyEvent"], CellFrame -> {{1, 1}, {1, 1}}, 
       CellFrameMargins -> {{2, 2}, {2, 2}}, CellFrameColor -> GrayLevel[0.8],
        FontFamily -> "Source Sans Pro", FontColor -> GrayLevel[0.360784], 
       Background -> GrayLevel[0.964706]], 
      Cell[
       StyleData["AuthorNote", StyleDefinitions -> StyleData["Text"]], 
       CellDingbat -> 
       StyleBox[
        "Author note:", "Text", FontSlant -> "Italic", FontColor -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], Alignment -> Baseline], FontSlant -> "Italic",
        FontColor -> GrayLevel[0.4]], 
      Cell[
       StyleData["HintHeader", StyleDefinitions -> StyleData["Text"]], 
       ShowGroupOpener -> True, GroupOpenerInsideFrame -> False, 
       CellGroupingRules -> {"SectionGrouping", 80}, PageBreakBelow -> False, 
       FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Hint", StyleDefinitions -> StyleData["Text"]], CellFrame -> 
       True, Background -> RGBColor[
         Rational[173, 255], 
         Rational[433, 510], 
         Rational[421, 510]]], 
      Cell[
       StyleData["ExperimentalInput", StyleDefinitions -> StyleData["Input"]],
        Editable -> True, CellFrame -> True, 
       StyleKeyMapping -> {"=" -> "WolframAlphaShort", "*" -> "Item"}, 
       CellFrameColor -> RGBColor[
         Rational[91, 255], 
         Rational[178, 255], 
         Rational[166, 255]], CellFrameLabels -> {{
          Cell[
           BoxData[
            RotationBox["Experimental", BoxRotation -> 1.5708]], "Text", 
           FontSize -> 10, FontColor -> RGBColor[
             Rational[91, 255], 
             Rational[178, 255], 
             Rational[166, 255]]], None}, {None, None}}], 
      Cell[
       StyleData["WolframLanguageLogo"], FontColor -> 
       RGBColor[0.09, 0.16, 0.25]], 
      Cell[
       StyleData["Link"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["HyperLink"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Hyperlink"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["FunctionLink"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["HyperlinkActionNew"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["HyperlinkActive"], FontColor -> RGBColor[
         Rational[91, 255], 
         Rational[178, 255], 
         Rational[166, 255]]], 
      Cell[
       StyleData["CYUButton", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], FrameBoxOptions -> {Background -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]]}], 
      Cell[
       StyleData["HintButton", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], FrameBoxOptions -> {Background -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]]}], 
      Cell[
       StyleData["SolutionButton", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], FrameBoxOptions -> {Background -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]]}], 
      Cell[
       StyleData["CYUButtonActive", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], 
       FrameBoxOptions -> {
        Background -> RGBColor[1, 0.4, 0], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[1, 0.4, 0]}], 
      Cell[
       StyleData["HintButtonActive", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], 
       FrameBoxOptions -> {
        Background -> RGBColor[1, 0.4, 0], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[1, 0.4, 0]}], 
      Cell[
       StyleData[
       "SolutionButtonActive", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], 
       FrameBoxOptions -> {
        Background -> RGBColor[1, 0.4, 0], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[1, 0.4, 0]}]}, Closed]]}, Visible -> False, FrontEndVersion -> 
  "14.1 for Mac OS X ARM (64-bit) (July 16, 2024)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"570d7ab1-98f2-453b-8aed-1a5432280ca6"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "MatrixForm"->{
  Cell[10666, 302, 410, 9, 50, "Text",ExpressionUUID->"edd4ee20-0883-4420-9be4-0480aa5ec571",
   CellTags->"MatrixForm"]},
 "CYU"->{
  Cell[25802, 672, 9864, 186, 364, "Text",ExpressionUUID->"e114e000-fe25-474c-ae32-4f8ef871afb0",
   CellTags->"CYU"],
  Cell[62934, 1582, 10644, 194, 397, "Text",ExpressionUUID->"2a230be4-97b9-4d10-aebd-7bbf4af0233d",
   CellTags->"CYU"],
  Cell[132823, 3502, 9937, 185, 364, "Text",ExpressionUUID->"0f9a22fb-df10-4ab6-85b7-cce75c51f500",
   CellTags->"CYU"],
  Cell[150230, 3929, 7562, 141, 327, "Text",ExpressionUUID->"9fb1bdb2-6f32-4186-9510-d25a0c1007f1",
   CellTags->"CYU"],
  Cell[168353, 4411, 11191, 210, 364, "Text",ExpressionUUID->"8d285219-c5e1-475b-a4c0-13c94e162244",
   CellTags->"CYU"],
  Cell[640037, 12464, 12831, 247, 629, "Text",ExpressionUUID->"6df8c60e-c169-4568-b472-f09abff47632",
   CellTags->"CYU"],
  Cell[671600, 13328, 6987, 131, 290, "Text",ExpressionUUID->"745efc71-e6ba-48d0-8243-26bd71419b9c",
   CellTags->"CYU"],
  Cell[684136, 13658, 7219, 137, 327, "Text",ExpressionUUID->"8b66bb55-f5ec-45d7-9505-5e3f3aee9d6a",
   CellTags->"CYU"],
  Cell[699129, 14044, 1673, 38, 169, "Text",ExpressionUUID->"21c796b2-137e-41b6-a25a-2081b9dcc804",
   CellTags->"CYU"],
  Cell[700805, 14084, 1778, 42, 132, "Text",ExpressionUUID->"e22bd11e-ff99-4634-baee-125ead514b5b",
   CellTags->"CYU"],
  Cell[703970, 14177, 1816, 41, 99, "Text",ExpressionUUID->"ff1745f7-2254-4600-8c87-a41fe658a8f3",
   CellTags->"CYU"],
  Cell[705789, 14220, 1822, 43, 132, "Text",ExpressionUUID->"26433b94-6125-481a-a22d-7823f3815bc2",
   CellTags->"CYU"],
  Cell[708191, 14281, 1642, 39, 136, "Text",ExpressionUUID->"c0e9cb51-2429-4901-89ee-82e8e4196dfc",
   CellTags->"CYU"],
  Cell[709836, 14322, 1806, 43, 132, "Text",ExpressionUUID->"2c8dafea-0af6-4a8d-aa98-4dca81f9fd70",
   CellTags->"CYU"],
  Cell[711877, 14374, 1961, 47, 136, "Text",ExpressionUUID->"4747a4c4-9b81-4aae-9855-92953c71f178",
   CellTags->"CYU"],
  Cell[714316, 14442, 1733, 41, 132, "Text",ExpressionUUID->"896f5693-eaa9-4c6c-a918-569bc1e63444",
   CellTags->"CYU"],
  Cell[717853, 14538, 1818, 41, 136, "Text",ExpressionUUID->"f89e65e6-57d3-4bdb-ad6b-8be74083fbec",
   CellTags->"CYU"],
  Cell[719674, 14581, 1772, 42, 132, "Text",ExpressionUUID->"b0bb2760-9a6a-445e-8310-0729757e9b1a",
   CellTags->"CYU"],
  Cell[722675, 14662, 2503, 58, 169, "Text",ExpressionUUID->"06fb626c-5b8c-453b-8ef1-d3c8ddba0056",
   CellTags->"CYU"],
  Cell[725181, 14722, 2027, 47, 132, "Text",ExpressionUUID->"ad9b09da-6468-4cf5-82e0-d7b47d57979a",
   CellTags->"CYU"],
  Cell[732660, 14872, 1987, 46, 136, "Text",ExpressionUUID->"ddda4ce9-4c39-4137-9bb6-9a88e5215a89",
   CellTags->"CYU"],
  Cell[734650, 14920, 1669, 39, 132, "Text",ExpressionUUID->"2b3b094c-8f28-45ae-9bcb-21b5652e1c88",
   CellTags->"CYU"],
  Cell[736706, 14969, 2138, 49, 99, "Text",ExpressionUUID->"11b3b001-f2dc-4b3b-835c-47f8b8738c30",
   CellTags->"CYU"],
  Cell[738847, 15020, 1972, 46, 132, "Text",ExpressionUUID->"bb3c97af-9eee-4fd3-82df-318a5bf118b9",
   CellTags->"CYU"],
  Cell[741596, 15092, 2023, 47, 99, "Text",ExpressionUUID->"b2eebacb-d9fb-4714-ba8e-52805e796c59",
   CellTags->"CYU"],
  Cell[743852, 15148, 2252, 52, 99, "Text",ExpressionUUID->"46dc54f1-f00b-4fac-8de1-cb9011743d6e",
   CellTags->"CYU"],
  Cell[746107, 15202, 1936, 46, 132, "Text",ExpressionUUID->"9a1dbeeb-d5aa-4cae-ba1f-b36d65999e35",
   CellTags->"CYU"]},
 "Range"->{
  Cell[36052, 873, 361, 8, 50, "Text",ExpressionUUID->"c2b1e173-1401-4d3b-b9b4-f1f6b053ee63",
   CellTags->"Range"]},
 "Table"->{
  Cell[36953, 902, 357, 8, 50, "Text",ExpressionUUID->"545a1a3a-8223-4d15-96f2-412e19755db4",
   CellTags->"Table"]},
 "RandomInteger"->{
  Cell[58705, 1445, 654, 17, 50, "Text",ExpressionUUID->"8d819bb0-46c3-442b-be9e-fdc714fe4d47",
   CellTags->{"RandomInteger", "RandomReal"}]},
 "RandomReal"->{
  Cell[58705, 1445, 654, 17, 50, "Text",ExpressionUUID->"8d819bb0-46c3-442b-be9e-fdc714fe4d47",
   CellTags->{"RandomInteger", "RandomReal"}]},
 "ConstantArray"->{
  Cell[60538, 1505, 417, 10, 50, "Text",ExpressionUUID->"39b0a469-a9ae-4eea-bd87-9aca7c8ec760",
   CellTags->"ConstantArray"]},
 "Length"->{
  Cell[73839, 1788, 390, 9, 50, "Text",ExpressionUUID->"853feb19-3e0f-4549-b733-7686f52f1e5b",
   CellTags->"Length"]},
 "Dimensions"->{
  Cell[76414, 1861, 506, 11, 83, "Text",ExpressionUUID->"5f58fcca-15ab-4622-afdb-406bf5be37d3",
   CellTags->"Dimensions"]},
 "First"->{
  Cell[81167, 2002, 345, 9, 50, "Text",ExpressionUUID->"38df0f59-94c7-4bf1-b5b4-68dc938759f8",
   CellTags->"First"]},
 "Last"->{
  Cell[81804, 2023, 341, 9, 50, "Text",ExpressionUUID->"cd1f1488-831f-471f-a6f6-c2ba878d7ec2",
   CellTags->"Last"]},
 "Part"->{
  Cell[82599, 2049, 383, 9, 50, "Text",ExpressionUUID->"8cfc97b0-cd91-48bc-8e13-85822fe1915e",
   CellTags->"Part"],
  Cell[356433, 7691, 326, 5, 116, "Text",ExpressionUUID->"58a369b0-171a-4f80-bd18-337e298e9627",
   CellTags->"Part"]},
 "Nested List"->{
  Cell[88090, 2218, 148, 2, 58, "Subsubsection",ExpressionUUID->"900bce7a-5bce-4f1f-9e2a-8b449695baa4",
   CellTags->"Nested List"]},
 "Take"->{
  Cell[130769, 3434, 183, 4, 44, "Input",ExpressionUUID->"8cfea7fb-1d99-4199-8277-82c4a829f2e1",
   CellTags->"Take"],
  Cell[130955, 3440, 181, 4, 50, "Output",ExpressionUUID->"8765582e-d9ad-44d9-b80a-055975273670",
   CellTags->"Take"],
  Cell[682181, 13586, 345, 9, 44, "Input",ExpressionUUID->"a74317d3-9be6-4859-ae14-99e44878a3e7",
   CellTags->"Take"]},
 "Drop"->{
  Cell[131442, 3457, 183, 4, 44, "Input",ExpressionUUID->"cf5aaf8e-44f7-48f2-8a8b-91900a890ed3",
   CellTags->"Drop"],
  Cell[131628, 3463, 171, 4, 50, "Output",ExpressionUUID->"56f7621e-5879-47e6-a2fa-6264411edb54",
   CellTags->"Drop"],
  Cell[682529, 13597, 345, 9, 44, "Input",ExpressionUUID->"0ddfd449-4cd1-4ab5-a6f4-fdab80ab6e46",
   CellTags->"Drop"]},
 "Rest"->{
  Cell[131950, 3474, 160, 3, 44, "Input",ExpressionUUID->"9683d40a-6494-4dee-a923-5c4adf9d9f26",
   CellTags->"Rest"],
  Cell[132113, 3479, 191, 4, 50, "Output",ExpressionUUID->"d02a2a08-c3b5-4865-8e27-f24ae3322e41",
   CellTags->"Rest"]},
 "Most"->{
  Cell[132454, 3490, 160, 3, 44, "Input",ExpressionUUID->"29393464-50d6-424a-90be-a19845047817",
   CellTags->"Most"],
  Cell[132617, 3495, 191, 4, 50, "Output",ExpressionUUID->"68d76d72-cdcf-449a-97ec-3fdd33bcbd92",
   CellTags->"Most"]},
 "Prepend"->{
  Cell[143197, 3704, 219, 5, 44, "Input",ExpressionUUID->"96c9924a-059a-4ebb-af5a-32d2ba7e4290",
   CellTags->"Prepend"],
  Cell[143419, 3711, 194, 4, 50, "Output",ExpressionUUID->"dbc328d3-c2f9-4c02-a64b-b6921d2af28d",
   CellTags->"Prepend"]},
 "Append"->{
  Cell[143760, 3722, 241, 6, 44, "Input",ExpressionUUID->"1fd211ed-8920-4841-9481-af96250b8a0f",
   CellTags->"Append"],
  Cell[144004, 3730, 193, 4, 50, "Output",ExpressionUUID->"2329d7a6-2e30-4578-a2e5-11d821813cb2",
   CellTags->"Append"]},
 "Insert"->{
  Cell[144518, 3748, 254, 7, 44, "Input",ExpressionUUID->"f6378b9f-6381-4d6c-bf89-05ab05aab67d",
   CellTags->"Insert"],
  Cell[144775, 3757, 193, 4, 50, "Output",ExpressionUUID->"cc9a5c84-c0f3-43f9-81db-9d84a930e25e",
   CellTags->"Insert"]},
 "Delete"->{
  Cell[145392, 3779, 241, 6, 44, "Input",ExpressionUUID->"ab8617e4-1f19-4e43-b8b3-e7e2534c82df",
   CellTags->"Delete"],
  Cell[145636, 3787, 173, 4, 50, "Output",ExpressionUUID->"dfa8ec58-21a3-499b-a7d9-d49c8bf3c502",
   CellTags->"Delete"]},
 "ReplacePart"->{
  Cell[147756, 3853, 426, 11, 50, "Text",ExpressionUUID->"458ce255-9993-468b-9e7d-d3e4d2897dae",
   CellTags->"ReplacePart"]},
 "Sort"->{
  Cell[157953, 4078, 118, 1, 50, "Text",ExpressionUUID->"de4c3537-30b3-4463-986c-872d4d5c3fe2",
   CellTags->"Sort"],
  Cell[678929, 13473, 342, 9, 44, "Input",ExpressionUUID->"474496b9-792d-4b3c-8a2b-2a6ad0ab3d95",
   CellTags->"Sort"],
  Cell[679274, 13484, 344, 9, 50, "Output",ExpressionUUID->"cbaaa765-9f90-4ebf-b066-ec34326d7c6e",
   CellTags->"Sort"]},
 "Reverse"->{
  Cell[158957, 4111, 137, 1, 50, "Text",ExpressionUUID->"caafc075-ab18-4f25-a29b-77465b838d2e",
   CellTags->"Reverse"]},
 "Join"->{
  Cell[159634, 4132, 286, 8, 44, "Input",ExpressionUUID->"c4451d69-82ce-4574-8619-e31e5a0d73ec",
   CellTags->"Join"],
  Cell[159923, 4142, 201, 4, 50, "Output",ExpressionUUID->"f374a02c-413a-4d7c-b217-f935136c063c",
   CellTags->"Join"]},
 "Union"->{
  Cell[160310, 4155, 288, 8, 44, "Input",ExpressionUUID->"77beaa70-76b1-4303-8da1-85f194a1e49d",
   CellTags->"Union"],
  Cell[160601, 4165, 182, 4, 50, "Output",ExpressionUUID->"4a93667f-15cb-4925-ac55-5c57387050e0",
   CellTags->"Union"]},
 "Riffle"->{
  Cell[160930, 4176, 290, 8, 44, "Input",ExpressionUUID->"c7fdb400-f12e-499e-bb08-0502f9115492",
   CellTags->"Riffle"],
  Cell[161223, 4186, 203, 4, 50, "Output",ExpressionUUID->"06104a7a-d1ce-427f-9ff9-1fff089782b5",
   CellTags->"Riffle"]},
 "Partition"->{
  Cell[162026, 4211, 222, 5, 44, "Input",ExpressionUUID->"7d6a8219-d266-425e-82c8-e281e241a406",
   CellTags->"Partition"],
  Cell[162251, 4218, 435, 12, 50, "Output",ExpressionUUID->"d2f58f48-d45b-4711-bffc-715eed09b6c3",
   CellTags->"Partition"]},
 "Flatten"->{
  Cell[165070, 4307, 463, 14, 44, "Input",ExpressionUUID->"53d838b1-4ab6-4075-8802-434b4511e187",
   CellTags->"Flatten"],
  Cell[165536, 4323, 240, 6, 50, "Output",ExpressionUUID->"0beaae51-e7f4-47d7-9a3b-a647c8aefd32",
   CellTags->"Flatten"]},
 "Transpose"->{
  Cell[166063, 4338, 498, 15, 44, "Input",ExpressionUUID->"0777d376-a04e-4ffe-8bd8-24cf532ac252",
   CellTags->"Transpose"],
  Cell[166564, 4355, 338, 9, 50, "Output",ExpressionUUID->"7900099d-391a-4da3-8fb8-7f2ed83d3a08",
   CellTags->"Transpose"]},
 "Missing"->{
  Cell[298664, 6704, 665, 15, 83, "Text",ExpressionUUID->"c3a38294-209d-41d6-91ec-165643261438",
   CellTags->"Missing"]},
 "KeyExistsQ"->{
  Cell[355713, 7664, 198, 5, 44, "Input",ExpressionUUID->"5c0a114b-c0ca-49ac-bcbc-942d641aad8e",
   CellTags->"KeyExistsQ"],
  Cell[355914, 7671, 140, 3, 50, "Output",ExpressionUUID->"f806fad2-4d40-4975-a327-71c978ae348a",
   CellTags->"KeyExistsQ"]},
 "Key"->{
  Cell[468975, 9567, 352, 9, 50, "Text",ExpressionUUID->"97ca5672-6ab2-421f-8bc2-07df619f60eb",
   CellTags->"Key"]},
 "Keys"->{
  Cell[583399, 11510, 163, 4, 44, "Input",ExpressionUUID->"03cfeb64-16e5-4449-97e1-9a2dd5098ccf",
   CellTags->"Keys"],
  Cell[583565, 11516, 257, 8, 50, "Output",ExpressionUUID->"026d94af-d2a8-4280-b062-a15665910415",
   CellTags->"Keys"]},
 "Values"->{
  Cell[583859, 11529, 167, 4, 44, "Input",ExpressionUUID->"15fb3f69-357d-43f2-8ac4-bf49b7227f70",
   CellTags->"Values"],
  Cell[584029, 11535, 55993, 926, 175, "Output",ExpressionUUID->"4f92b9c2-90b3-4e6d-9a7e-8e92f66c2057",
   CellTags->"Values"]},
 "Normal"->{
  Cell[655220, 12786, 346, 9, 44, "Input",ExpressionUUID->"7c84bef6-8203-42a0-bc6a-9bec242c570f",
   CellTags->"Normal"],
  Cell[655569, 12797, 308, 8, 50, "Output",ExpressionUUID->"08f8843a-f387-410b-a1af-8698e56c43c7",
   CellTags->"Normal"]},
 "AssociationMap"->{
  Cell[657630, 12862, 271, 7, 44, "Input",ExpressionUUID->"1f3e7008-1c35-4138-a62e-69e133089a87",
   CellTags->"AssociationMap"],
  Cell[657904, 12871, 480, 13, 50, "Output",ExpressionUUID->"a4da4a2c-d890-445d-861c-b6e24f29b322",
   CellTags->"AssociationMap"]},
 "AssociationThread"->{
  Cell[658421, 12889, 346, 9, 44, "Input",ExpressionUUID->"27140286-095b-431b-af93-35ac32e4b80f",
   CellTags->"AssociationThread"],
  Cell[658770, 12900, 363, 9, 50, "Output",ExpressionUUID->"177f2da3-4ec1-400f-96e4-b73adedbe31c",
   CellTags->"AssociationThread"]},
 "AssociateTo"->{
  Cell[661316, 12985, 242, 6, 44, "Input",ExpressionUUID->"b8157844-229c-4925-b03b-cdc57a1bfe13",
   CellTags->"AssociateTo"],
  Cell[661561, 12993, 403, 10, 50, "Output",ExpressionUUID->"022b83a9-8a7a-4beb-ab95-5d94b7ed833c",
   CellTags->"AssociateTo"],
  Cell[662001, 13008, 140, 3, 44, "Input",ExpressionUUID->"222c7fcf-d970-4691-aac4-cccf73d3e32d",
   CellTags->"AssociateTo"],
  Cell[662144, 13013, 403, 10, 50, "Output",ExpressionUUID->"756ad6b8-63fb-4193-ad3f-f6e7b7648178",
   CellTags->"AssociateTo"]},
 "KeyDropFrom"->{
  Cell[662584, 13028, 210, 5, 44, "Input",ExpressionUUID->"b0843041-ede8-4960-9e21-923a13e9b81e",
   CellTags->"KeyDropFrom"],
  Cell[662797, 13035, 353, 9, 50, "Output",ExpressionUUID->"5076319e-f86c-4735-ad0e-1a7c6bfdc962",
   CellTags->"KeyDropFrom"],
  Cell[663187, 13049, 140, 3, 44, "Input",ExpressionUUID->"d3bc2484-5b9e-4c71-a0ba-aef92e1dd531",
   CellTags->"KeyDropFrom"],
  Cell[663330, 13054, 353, 9, 50, "Output",ExpressionUUID->"75095bc9-47ab-461f-a664-293a5af4004c",
   CellTags->"KeyDropFrom"]},
 "Counts"->{
  Cell[666055, 13142, 280, 8, 44, "Input",ExpressionUUID->"b2b71193-2ffd-425b-aabc-58af8b661490",
   CellTags->"Counts"],
  Cell[666338, 13152, 274, 7, 50, "Output",ExpressionUUID->"b44dcd4c-8553-43d6-a736-4a3e8f6f7a73",
   CellTags->"Counts"]},
 "CountsBy"->{
  Cell[666649, 13164, 287, 8, 44, "Input",ExpressionUUID->"325fa064-dca5-4463-8082-465a561a1cdb",
   CellTags->"CountsBy"],
  Cell[666939, 13174, 281, 7, 50, "Output",ExpressionUUID->"93b9e480-9212-4d56-a4de-466fb6a8f7b2",
   CellTags->"CountsBy"]},
 "GroupBy"->{
  Cell[667257, 13186, 285, 8, 44, "Input",ExpressionUUID->"b2e25fec-2bfc-4e2a-bbb4-7ab7a37f55c2",
   CellTags->"GroupBy"],
  Cell[667545, 13196, 402, 11, 50, "Output",ExpressionUUID->"eac985d0-d4ba-4c25-bbc5-02306c9955d8",
   CellTags->"GroupBy"]},
 "PositionIndex"->{
  Cell[667984, 13212, 267, 7, 44, "Input",ExpressionUUID->"53ce393f-8da2-47a3-9ce3-3a9d4aef3aa0",
   CellTags->"PositionIndex"],
  Cell[668254, 13221, 456, 13, 50, "Output",ExpressionUUID->"f02c7225-5a01-416e-8a36-3e3086a004bc",
   CellTags->"PositionIndex"]},
 "CharacterCounts"->{
  Cell[669610, 13264, 196, 4, 44, "Input",ExpressionUUID->"600fde2c-0e8f-455e-8c7f-eb873b50471b",
   CellTags->"CharacterCounts"],
  Cell[669809, 13270, 539, 13, 50, "Output",ExpressionUUID->"de85965d-02de-4a82-aaee-a714089c5f7e",
   CellTags->"CharacterCounts"]},
 "LetterCounts"->{
  Cell[670385, 13288, 190, 4, 44, "Input",ExpressionUUID->"867d8711-ab91-44de-99a3-d88a3544d030",
   CellTags->"LetterCounts"],
  Cell[670578, 13294, 296, 8, 50, "Output",ExpressionUUID->"00d8d9a1-7792-4116-ae89-5a7bb3f3ce57",
   CellTags->"LetterCounts"]},
 "WordCounts"->{
  Cell[670911, 13307, 220, 5, 44, "Input",ExpressionUUID->"edde0c0c-9cf7-43d5-b8f1-fd46cdf1049c",
   CellTags->"WordCounts"],
  Cell[671134, 13314, 451, 11, 50, "Output",ExpressionUUID->"30c6dbfa-0b2c-451a-bec2-50b8e8e4a08f",
   CellTags->"WordCounts"]},
 "SortBy"->{
  Cell[679655, 13498, 545, 17, 44, "Input",ExpressionUUID->"35731940-4a68-49bc-8d39-135be432a9cc",
   CellTags->"SortBy"],
  Cell[680203, 13517, 496, 14, 50, "Output",ExpressionUUID->"46bc649a-d45b-48d6-a150-59dbb3556fd9",
   CellTags->"SortBy"]},
 "Select"->{
  Cell[680736, 13536, 380, 11, 44, "Input",ExpressionUUID->"4b9318f2-d733-46ff-a8d3-8349fe9b8757",
   CellTags->"Select"],
  Cell[681119, 13549, 295, 8, 50, "Output",ExpressionUUID->"9c293e4c-7fe8-4c93-a00e-8a8720d9921e",
   CellTags->"Select"]},
 "DeleteCases"->{
  Cell[681451, 13562, 412, 11, 44, "Input",ExpressionUUID->"4a0bdcf0-dbbc-4a2e-bbfe-a64db8a8b08d",
   CellTags->"DeleteCases"],
  Cell[681866, 13575, 300, 8, 50, "Output",ExpressionUUID->"db2a4e42-2cf2-4eae-8088-c1f97a2663a9",
   CellTags->"DeleteCases"]},
 "Total"->{
  Cell[683069, 13615, 165, 4, 44, "Input",ExpressionUUID->"9544e123-40de-41bd-87b7-8a9d472d2a79",
   CellTags->"Total"],
  Cell[683237, 13621, 132, 3, 50, "Output",ExpressionUUID->"ba9096ca-be83-458c-8535-6ac8b5e0e16d",
   CellTags->"Total"]},
 "Mean"->{
  Cell[683406, 13629, 163, 4, 44, "Input",ExpressionUUID->"8a1e8176-01aa-4ada-bff4-256f74f0b607",
   CellTags->"Mean"],
  Cell[683572, 13635, 151, 4, 65, "Output",ExpressionUUID->"442e6edb-4229-4319-a073-5c2d9ed9156c",
   CellTags->"Mean"]},
 "Nearest"->{
  Cell[683760, 13644, 192, 5, 44, "Input",ExpressionUUID->"4581359f-8e76-4dae-9bfa-c18acdee672f",
   CellTags->"Nearest"],
  Cell[683955, 13651, 166, 4, 50, "Output",ExpressionUUID->"26333ffd-9ead-457e-aec5-6233b7ab2f6b",
   CellTags->"Nearest"]},
 "KeySort"->{
  Cell[692048, 13815, 344, 10, 44, "Input",ExpressionUUID->"bb0bceab-5d17-4cf0-8b9d-b7364aa16b77",
   CellTags->"KeySort"],
  Cell[692395, 13827, 313, 8, 50, "Output",ExpressionUUID->"67600e02-2545-4a83-a15b-e30c8c875ba1",
   CellTags->"KeySort"]},
 "KeySortBy"->{
  Cell[692745, 13840, 394, 11, 44, "Input",ExpressionUUID->"017d4b4b-6ba8-4175-86eb-e819be589b5b",
   CellTags->"KeySortBy"],
  Cell[693142, 13853, 348, 9, 50, "Output",ExpressionUUID->"eb694190-8c57-46bd-a8da-bf5782936c88",
   CellTags->"KeySortBy"]},
 "KeySelect"->{
  Cell[693527, 13867, 352, 10, 44, "Input",ExpressionUUID->"9b0f2ec3-e4c0-4ddc-85ac-ab263afbbd50",
   CellTags->"KeySelect"],
  Cell[693882, 13879, 275, 7, 50, "Output",ExpressionUUID->"763ee32d-8a6f-49be-b91d-28d2258a0776",
   CellTags->"KeySelect"]},
 "KeyTake"->{
  Cell[694194, 13891, 394, 12, 44, "Input",ExpressionUUID->"e0d7e2f7-3a56-4eff-81ad-41385c25b733",
   CellTags->"KeyTake"],
  Cell[694591, 13905, 273, 7, 50, "Output",ExpressionUUID->"dd6562f8-7f15-4fcf-8ea2-38df24c85584",
   CellTags->"KeyTake"]},
 "KeyDrop"->{
  Cell[694901, 13917, 436, 13, 44, "Input",ExpressionUUID->"76b18033-82fe-4f88-8020-a10923d0099b",
   CellTags->"KeyDrop"],
  Cell[695340, 13932, 273, 7, 50, "Output",ExpressionUUID->"40b841e8-bf76-462c-a623-9d4f8ff1c601",
   CellTags->"KeyDrop"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"MatrixForm", 795069, 16239},
 {"CYU", 795202, 16242},
 {"Range", 798481, 16297},
 {"Table", 798611, 16300},
 {"RandomInteger", 798749, 16303},
 {"RandomReal", 798910, 16306},
 {"ConstantArray", 799074, 16309},
 {"Length", 799215, 16312},
 {"Dimensions", 799352, 16315},
 {"First", 799489, 16318},
 {"Last", 799619, 16321},
 {"Part", 799748, 16324},
 {"Nested List", 800003, 16329},
 {"Take", 800148, 16332},
 {"Drop", 800519, 16339},
 {"Rest", 800890, 16346},
 {"Most", 801141, 16351},
 {"Prepend", 801395, 16356},
 {"Append", 801654, 16361},
 {"Insert", 801911, 16366},
 {"Delete", 802168, 16371},
 {"ReplacePart", 802430, 16376},
 {"Sort", 802568, 16379},
 {"Reverse", 802942, 16386},
 {"Join", 803075, 16389},
 {"Union", 803327, 16394},
 {"Riffle", 803582, 16399},
 {"Partition", 803842, 16404},
 {"Flatten", 804107, 16409},
 {"Transpose", 804370, 16414},
 {"Missing", 804635, 16419},
 {"KeyExistsQ", 804775, 16422},
 {"Key", 805037, 16427},
 {"Keys", 805166, 16430},
 {"Values", 805421, 16435},
 {"Normal", 805685, 16440},
 {"AssociationMap", 805952, 16445},
 {"AssociationThread", 806239, 16450},
 {"AssociateTo", 806525, 16455},
 {"KeyDropFrom", 807056, 16464},
 {"Counts", 807580, 16473},
 {"CountsBy", 807841, 16478},
 {"GroupBy", 808105, 16483},
 {"PositionIndex", 808374, 16488},
 {"CharacterCounts", 808657, 16493},
 {"LetterCounts", 808941, 16498},
 {"WordCounts", 809216, 16503},
 {"SortBy", 809484, 16508},
 {"Select", 809745, 16513},
 {"DeleteCases", 810010, 16518},
 {"Total", 810279, 16523},
 {"Mean", 810534, 16528},
 {"Nearest", 810790, 16533},
 {"KeySort", 811052, 16538},
 {"KeySortBy", 811317, 16543},
 {"KeySelect", 811586, 16548},
 {"KeyTake", 811853, 16553},
 {"KeyDrop", 812116, 16558}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[616, 23, 97, 0, 94, "Subtitle",ExpressionUUID->"52147f0d-afae-417a-9611-4dd2121f31ae"],
Cell[CellGroupData[{
Cell[738, 27, 93, 0, 136, "Section",ExpressionUUID->"bbfbec95-135c-42ef-b1e7-c417cab58df0"],
Cell[834, 29, 167, 3, 50, "Text",ExpressionUUID->"9a20470e-bdee-4374-80f6-722ca43294af"],
Cell[CellGroupData[{
Cell[1026, 36, 82, 0, 60, "Subsection",ExpressionUUID->"eb55bfd2-8039-4657-aac8-8881e8807bb5"],
Cell[1111, 38, 340, 8, 50, "Text",ExpressionUUID->"715d8f68-4320-4f52-94a5-d48f4cae6769"],
Cell[1454, 48, 87, 0, 46, "Item",ExpressionUUID->"7eec1bb4-9f0e-401c-b7cd-82d7ffed3ebb"],
Cell[1544, 50, 96, 0, 46, "Item",ExpressionUUID->"6aa0fd41-453e-4835-8e1c-d9813fb8bf26"],
Cell[1643, 52, 84, 0, 46, "Item",ExpressionUUID->"2daba185-8c90-4acf-925b-26b2877c41f6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1764, 57, 90, 0, 60, "Subsection",ExpressionUUID->"75bdbcca-fce9-4299-ad59-022af4e2443d"],
Cell[1857, 59, 395, 9, 50, "Text",ExpressionUUID->"2720beb0-747d-4cb8-aec4-e186e09035ff"],
Cell[2255, 70, 93, 0, 46, "Item",ExpressionUUID->"678c0f46-f39a-4219-b4be-69cbd472c7b1"],
Cell[2351, 72, 109, 0, 46, "Item",ExpressionUUID->"811fde40-0067-458b-a43f-c873b97a4a83"],
Cell[2463, 74, 107, 0, 46, "Item",ExpressionUUID->"540beff8-e370-41b4-b027-36dcd93ce778"],
Cell[2573, 76, 130, 0, 46, "Item",ExpressionUUID->"0d09a129-e221-42e4-85cf-fb51c9854319"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[2752, 82, 78, 0, 136, "Section",ExpressionUUID->"12b90831-c18e-44df-b170-11c44b46acab"],
Cell[2833, 84, 169, 3, 50, "Text",ExpressionUUID->"b65c2fdb-8351-4668-a98b-8ecff6aa033a"],
Cell[CellGroupData[{
Cell[3027, 91, 3730, 84, 75, "Input",ExpressionUUID->"97753dc8-ce27-4b13-9cc1-d946750eedc0"],
Cell[6760, 177, 744, 17, 81, "Output",ExpressionUUID->"6c9db102-7c41-4f2d-be06-acdf1a5e1ee1"]
}, Open  ]],
Cell[7519, 197, 93, 0, 50, "Text",ExpressionUUID->"9a53704e-36fa-4578-8fdb-7cc6388fbb9b"],
Cell[7615, 199, 91, 0, 46, "Item",ExpressionUUID->"ddf0bdfe-13c7-44c5-a6e9-90f761983cf3"],
Cell[7709, 201, 77, 0, 46, "Item",ExpressionUUID->"51c71ca4-2e0d-43ce-9493-3432f3f46583"],
Cell[7789, 203, 90, 0, 46, "Item",ExpressionUUID->"0bb5e064-9b01-40e8-9f35-f68f3ec41786"],
Cell[7882, 205, 104, 0, 50, "Text",ExpressionUUID->"98f0ce71-270c-4e01-b2aa-2481925eda60"],
Cell[CellGroupData[{
Cell[8011, 209, 103, 0, 46, "Item",ExpressionUUID->"29b5f8f3-0f19-417e-b0bd-9ee14b5e2ff4"],
Cell[CellGroupData[{
Cell[8139, 213, 200, 4, 44, "Input",ExpressionUUID->"8020e42a-914a-4c83-b1b5-813a469ccc5c"],
Cell[8342, 219, 181, 3, 50, "Output",ExpressionUUID->"2ea9aa93-4e5b-4ec6-9a0a-418064bf1912"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8572, 228, 158, 3, 46, "Item",ExpressionUUID->"e3813c25-973f-4136-8b71-dde21e376fd2"],
Cell[CellGroupData[{
Cell[8755, 235, 199, 4, 44, "Input",ExpressionUUID->"8041b079-32ba-4f25-b8e1-54828ba94f79"],
Cell[8957, 241, 389, 9, 50, "Output",ExpressionUUID->"d99224d5-95d5-42b7-acab-05b12a7dc7c8"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[9395, 256, 89, 0, 46, "Item",ExpressionUUID->"08a2b787-47de-48b6-98f6-3358653f42b6"],
Cell[CellGroupData[{
Cell[9509, 260, 214, 5, 44, "Input",ExpressionUUID->"dc316ca4-2f5f-40e1-a0b7-8b8c1a7eecd2"],
Cell[9726, 267, 196, 4, 50, "Output",ExpressionUUID->"5c6e2969-2eb3-430d-a4c5-0440d69bca15"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[9971, 277, 119, 0, 46, "Item",ExpressionUUID->"e6f7adf9-dc4d-45c8-be2b-e16d37856dfd"],
Cell[CellGroupData[{
Cell[10115, 281, 272, 8, 44, "Input",ExpressionUUID->"416c1848-46f2-4904-bb0b-72b7c75a3eb7"],
Cell[10390, 291, 249, 7, 50, "Output",ExpressionUUID->"5201441c-4ea0-47ed-8da8-ab8acc580947"]
}, Open  ]]
}, Open  ]],
Cell[10666, 302, 410, 9, 50, "Text",ExpressionUUID->"edd4ee20-0883-4420-9be4-0480aa5ec571",
 CellTags->"MatrixForm"],
Cell[CellGroupData[{
Cell[11101, 315, 320, 9, 44, "Input",ExpressionUUID->"e01f2224-3e24-4540-a0c8-4ea07a00b823"],
Cell[11424, 326, 577, 18, 89, "Output",ExpressionUUID->"90024b65-7aef-45ff-a9a9-d5729d6da7f2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[12038, 349, 95, 0, 46, "Item",ExpressionUUID->"67a93e00-9161-429d-a6a2-a28a241b7fd4"],
Cell[CellGroupData[{
Cell[12158, 353, 220, 5, 44, "Input",ExpressionUUID->"7a9f437e-f21a-45b1-8881-8dd78ec38e38"],
Cell[12381, 360, 200, 4, 50, "Output",ExpressionUUID->"81f68805-600f-4ebb-81fe-446bf5c75635"]
}, Open  ]]
}, Open  ]],
Cell[12608, 368, 182, 3, 50, "Text",ExpressionUUID->"89d18b3d-20a9-4c0d-a9e2-6e3c280b1212"],
Cell[12793, 373, 89, 0, 50, "Text",ExpressionUUID->"57fd6e3c-f511-422c-9b74-ddcc97e64329"],
Cell[CellGroupData[{
Cell[12907, 377, 113, 0, 46, "Item",ExpressionUUID->"089c4e76-323c-42d2-877f-73649af75422"],
Cell[CellGroupData[{
Cell[13045, 381, 265, 7, 44, "Input",ExpressionUUID->"a81913cb-87b8-494b-9e2a-2ca6f7496549"],
Cell[13313, 390, 11139, 230, 353, "Output",ExpressionUUID->"8d9f6d63-9a19-4097-bcdf-116bcb26bbc0"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[24501, 626, 117, 0, 46, "Item",ExpressionUUID->"c554d627-e748-498b-8c40-91990286f6d8"],
Cell[CellGroupData[{
Cell[24643, 630, 297, 8, 44, "Input",ExpressionUUID->"0f9ad749-4542-4648-bf0b-0be8820a8f86"],
Cell[CellGroupData[{
Cell[24965, 642, 132, 3, 34, "Print",ExpressionUUID->"9cb65d6a-06d7-4690-912e-4127e6588fec"],
Cell[25100, 647, 132, 3, 34, "Print",ExpressionUUID->"bf5fda93-2da1-4d9e-925d-b4ceccd83bb8"],
Cell[25235, 652, 132, 3, 34, "Print",ExpressionUUID->"e7564ded-d00d-4e7d-93b8-47f09fcdc9e5"],
Cell[25370, 657, 132, 3, 34, "Print",ExpressionUUID->"2011bf0f-faee-4ffc-8f5d-1cb3a6c6e8ab"],
Cell[25505, 662, 132, 3, 34, "Print",ExpressionUUID->"58f5362b-564d-4026-a90d-a560787ef9b3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[25676, 670, 123, 0, 46, "Item",ExpressionUUID->"25af96e3-e58e-4063-8eea-c2ca9e938184"],
Cell[25802, 672, 9864, 186, 364, "Text",ExpressionUUID->"e114e000-fe25-474c-ae32-4f8ef871afb0",
 CellTags->"CYU"]
}, Open  ]],
Cell[CellGroupData[{
Cell[35703, 863, 92, 0, 136, "Section",ExpressionUUID->"f0da0be2-be51-4956-8266-fd0d20a4b407"],
Cell[35798, 865, 144, 2, 50, "Text",ExpressionUUID->"2c692a45-75b0-4a16-bd6f-91a15442b94c"],
Cell[CellGroupData[{
Cell[35967, 871, 82, 0, 60, "Subsection",ExpressionUUID->"3c0c2012-6f46-48fe-9fc5-473f5d18f60c"],
Cell[36052, 873, 361, 8, 50, "Text",ExpressionUUID->"c2b1e173-1401-4d3b-b9b4-f1f6b053ee63",
 CellTags->"Range"],
Cell[CellGroupData[{
Cell[36438, 885, 138, 2, 44, "Input",ExpressionUUID->"af67228c-bb27-4273-a053-8656797f99f7"],
Cell[36579, 889, 240, 5, 50, "Output",ExpressionUUID->"f74a190f-9b00-44d3-8432-82e5778ec57f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[36868, 900, 82, 0, 60, "Subsection",ExpressionUUID->"20cbdc1c-7c7e-484e-b790-209056093dcd"],
Cell[36953, 902, 357, 8, 50, "Text",ExpressionUUID->"545a1a3a-8223-4d15-96f2-412e19755db4",
 CellTags->"Table"],
Cell[CellGroupData[{
Cell[37335, 914, 220, 5, 44, "Input",ExpressionUUID->"97070862-24bc-4c86-9d95-a90c25dc3a53"],
Cell[37558, 921, 240, 5, 50, "Output",ExpressionUUID->"daf0e838-6d87-41fa-a5ed-d1dd6ae407c2"]
}, Open  ]],
Cell[37813, 929, 197, 3, 50, "Text",ExpressionUUID->"94e90c23-8022-436a-901c-991c451a7074"],
Cell[CellGroupData[{
Cell[38035, 936, 255, 6, 46, "Input",ExpressionUUID->"93f00c73-88a6-4519-979f-8c8b8b313609"],
Cell[38293, 944, 176, 3, 50, "Output",ExpressionUUID->"29057847-9726-4c2d-924f-0afb489dc912"]
}, Open  ]],
Cell[CellGroupData[{
Cell[38506, 952, 105, 0, 58, "Subsubsection",ExpressionUUID->"208341be-a6ea-4ca2-94b2-10665fe79cd9"],
Cell[CellGroupData[{
Cell[38636, 956, 279, 7, 44, "Input",ExpressionUUID->"0dd84942-a534-4b32-8c47-eb310239c0ac"],
Cell[38918, 965, 17557, 400, 295, "Output",ExpressionUUID->"cc1fcd54-f968-4c31-982c-b4efc2739f58"]
}, Open  ]],
Cell[CellGroupData[{
Cell[56512, 1370, 391, 10, 44, "Input",ExpressionUUID->"99468b43-2903-4da5-8e4a-5ac12af1539b"],
Cell[56906, 1382, 220, 4, 50, "Output",ExpressionUUID->"b140f132-2e40-47e8-bc36-37c412bf92cc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[57163, 1391, 336, 10, 44, "Input",ExpressionUUID->"e2d880a7-bce1-42ad-b615-0ad781861338"],
Cell[57502, 1403, 233, 7, 71, "Output",ExpressionUUID->"b35d1a3b-9938-4939-9858-45cb7390c79e"]
}, Open  ]],
Cell[57750, 1413, 117, 0, 50, "Text",ExpressionUUID->"8ee5f473-91aa-47ec-b16c-1eec06a01f51"],
Cell[57870, 1415, 296, 9, 44, "Input",ExpressionUUID->"8da19e9d-45ed-498a-8661-c8b711761110"],
Cell[58169, 1426, 379, 11, 44, "Input",ExpressionUUID->"9f26414b-f84a-4cbd-806f-cd053979a898"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[58597, 1443, 105, 0, 60, "Subsection",ExpressionUUID->"0be55533-3828-4e5d-b4ce-48abec220c7a"],
Cell[58705, 1445, 654, 17, 50, "Text",ExpressionUUID->"8d819bb0-46c3-442b-be9e-fdc714fe4d47",
 CellTags->{"RandomInteger", "RandomReal"}],
Cell[CellGroupData[{
Cell[59384, 1466, 169, 3, 44, "Input",ExpressionUUID->"33f8b8a3-b1e0-422e-85ff-e582afe801fc"],
Cell[59556, 1471, 182, 3, 50, "Output",ExpressionUUID->"6a02c135-19e3-4891-b329-5ec632d5b09f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[59775, 1479, 216, 5, 44, "Input",ExpressionUUID->"4cd58898-8d49-4c95-be2e-3966661cadcd"],
Cell[59994, 1486, 402, 11, 50, "Output",ExpressionUUID->"14cf4e60-8d2d-49fa-945d-be9204130097"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[60445, 1503, 90, 0, 60, "Subsection",ExpressionUUID->"efd661b9-c6c2-4de2-8202-8fbd3106870b"],
Cell[60538, 1505, 417, 10, 50, "Text",ExpressionUUID->"39b0a469-a9ae-4eea-bd87-9aca7c8ec760",
 CellTags->"ConstantArray"],
Cell[CellGroupData[{
Cell[60980, 1519, 169, 3, 44, "Input",ExpressionUUID->"18a1ef25-02e6-434f-939a-91ceecaf9fb0"],
Cell[61152, 1524, 239, 5, 50, "Output",ExpressionUUID->"261f3281-96b4-44c5-88f4-e32c6c4c18b0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[61428, 1534, 257, 6, 44, "Input",ExpressionUUID->"0465da71-f270-4867-b76d-82eeae386d1c"],
Cell[61688, 1542, 625, 19, 115, "Output",ExpressionUUID->"19fc76b6-273c-4789-98f3-699864ab08d1"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[62362, 1567, 107, 0, 60, "Subsection",ExpressionUUID->"fab55048-57d8-431c-865f-7489ee5b3ccb"],
Cell[62472, 1569, 459, 11, 83, "Text",ExpressionUUID->"7f7fff32-c10f-4f41-941c-a3c428952de0"],
Cell[62934, 1582, 10644, 194, 397, "Text",ExpressionUUID->"2a230be4-97b9-4d10-aebd-7bbf4af0233d",
 CellTags->"CYU"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[73627, 1782, 91, 0, 136, "Section",ExpressionUUID->"d42691b4-99f5-46d9-bcd9-9be0224c3b99"],
Cell[CellGroupData[{
Cell[73743, 1786, 93, 0, 60, "Subsection",ExpressionUUID->"f7481909-c8fd-47e0-955a-4b33457d0c78"],
Cell[73839, 1788, 390, 9, 50, "Text",ExpressionUUID->"853feb19-3e0f-4549-b733-7686f52f1e5b",
 CellTags->"Length"],
Cell[CellGroupData[{
Cell[74254, 1801, 2035, 54, 75, "Input",ExpressionUUID->"e1b935cf-4046-44b8-80c1-6777f0fb6825"],
Cell[76292, 1857, 107, 1, 50, "Output",ExpressionUUID->"ef3136e8-b80e-45e9-9bd0-fae5b3139598"]
}, Open  ]],
Cell[76414, 1861, 506, 11, 83, "Text",ExpressionUUID->"5f58fcca-15ab-4622-afdb-406bf5be37d3",
 CellTags->"Dimensions"],
Cell[CellGroupData[{
Cell[76945, 1876, 712, 22, 44, "Input",ExpressionUUID->"7158f2ad-0d5a-4ee6-aa5f-aeb75f5f3f36"],
Cell[77660, 1900, 152, 3, 50, "Output",ExpressionUUID->"511dffba-7ba9-4181-9664-2a533035bb06"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[77861, 1909, 100, 0, 60, "Subsection",ExpressionUUID->"76fdcafc-125e-487e-9975-3bd0e7589cb1"],
Cell[77964, 1911, 420, 10, 50, "Text",ExpressionUUID->"5b5a67b0-5e07-465e-8c4a-4da378e6b8c4"],
Cell[CellGroupData[{
Cell[78409, 1925, 110, 0, 58, "Subsubsection",ExpressionUUID->"89b1e201-178a-43b2-891c-d4729722575d"],
Cell[CellGroupData[{
Cell[78544, 1929, 2035, 54, 75, "Input",ExpressionUUID->"0c0dda48-c082-433e-b5f3-4329575dd5cc"],
Cell[80582, 1985, 570, 14, 81, "Output",ExpressionUUID->"9226a026-3243-47a6-92fd-974d83ec4601"]
}, Open  ]],
Cell[81167, 2002, 345, 9, 50, "Text",ExpressionUUID->"38df0f59-94c7-4bf1-b5b4-68dc938759f8",
 CellTags->"First"],
Cell[CellGroupData[{
Cell[81537, 2015, 142, 2, 44, "Input",ExpressionUUID->"1465e06b-e5fe-474f-8db4-302cdff584d2"],
Cell[81682, 2019, 107, 1, 50, "Output",ExpressionUUID->"636ed8b7-83aa-49f3-9b26-e5f71fddcafa"]
}, Open  ]],
Cell[81804, 2023, 341, 9, 50, "Text",ExpressionUUID->"cd1f1488-831f-471f-a6f6-c2ba878d7ec2",
 CellTags->"Last"],
Cell[CellGroupData[{
Cell[82170, 2036, 141, 2, 44, "Input",ExpressionUUID->"7b11ae86-6a42-475f-ace3-7a6fe6dc17e6"],
Cell[82314, 2040, 270, 6, 85, "Output",ExpressionUUID->"f9016116-d5e9-452d-bc1c-311ef8adcc5b"]
}, Open  ]],
Cell[82599, 2049, 383, 9, 50, "Text",ExpressionUUID->"8cfc97b0-cd91-48bc-8e13-85822fe1915e",
 CellTags->"Part"],
Cell[82985, 2060, 112, 0, 50, "Text",ExpressionUUID->"51f2ff74-4fbc-48d7-bbcb-fd476c716aca"],
Cell[CellGroupData[{
Cell[83122, 2064, 241, 6, 44, "Input",ExpressionUUID->"9bd3850e-d47b-4157-9a60-f3cc65223fda"],
Cell[83366, 2072, 107, 1, 50, "Output",ExpressionUUID->"ca4aa137-a1e8-43f1-b80d-253d425369af"]
}, Open  ]],
Cell[83488, 2076, 162, 3, 50, "Text",ExpressionUUID->"d0a46abd-ac91-468a-8a41-4ccb67635017"],
Cell[CellGroupData[{
Cell[83675, 2083, 257, 6, 44, "Input",ExpressionUUID->"9d2115be-581f-4cc6-811d-36ab4b616126"],
Cell[83935, 2091, 107, 1, 50, "Output",ExpressionUUID->"88627e91-54af-4175-9e61-cd9be935160a"]
}, Open  ]],
Cell[84057, 2095, 115, 0, 50, "Text",ExpressionUUID->"71390633-f015-47da-a146-499ade212b0f"],
Cell[CellGroupData[{
Cell[84197, 2099, 263, 6, 44, "Input",ExpressionUUID->"5180850b-c178-400e-b338-3d7530e0736f"],
Cell[84463, 2107, 162, 3, 50, "Output",ExpressionUUID->"f94febc6-ba37-4097-bb4c-dfb06a015e96"]
}, Open  ]],
Cell[84640, 2113, 122, 0, 50, "Text",ExpressionUUID->"d6bb8b56-fc9d-4cb5-9545-b64f2ab213dd"],
Cell[CellGroupData[{
Cell[84787, 2117, 287, 7, 44, "Input",ExpressionUUID->"ae004512-0c71-4b91-8cb5-2d377be7deda"],
Cell[85077, 2126, 152, 3, 50, "Output",ExpressionUUID->"3625138f-8f71-4efe-9bc5-40290852d26a"]
}, Open  ]],
Cell[85244, 2132, 128, 0, 50, "Text",ExpressionUUID->"71005af7-43ea-4aee-93a3-cd34b200462b"],
Cell[85375, 2134, 233, 5, 44, "Input",ExpressionUUID->"9ce6edb8-81b4-455a-9a69-f2d5b8d2b383"],
Cell[CellGroupData[{
Cell[85633, 2143, 216, 4, 74, "Input",ExpressionUUID->"694b95ba-19f9-4dc2-9eae-34054f205526"],
Cell[85852, 2149, 107, 1, 50, "Output",ExpressionUUID->"3bec98ec-06b6-4997-b730-9e70ce90af15"],
Cell[85962, 2152, 254, 5, 50, "Output",ExpressionUUID->"0fab7bb3-b744-4d72-bc05-bc99c529b343"]
}, Open  ]],
Cell[86231, 2160, 151, 2, 50, "Text",ExpressionUUID->"eb4dff4d-03db-4b65-b87c-ea6b771ff647"],
Cell[CellGroupData[{
Cell[86407, 2166, 754, 20, 197, "Input",ExpressionUUID->"95d8cd80-d6c0-46c2-b746-f4d6f094c603"],
Cell[87164, 2188, 182, 3, 50, "Output",ExpressionUUID->"45fc0692-f4df-475b-94ef-7fd6578229c2"],
Cell[87349, 2193, 107, 1, 50, "Output",ExpressionUUID->"e8d39975-6bb9-4174-bf0a-0c0eaef64fc7"],
Cell[87459, 2196, 107, 1, 50, "Output",ExpressionUUID->"8e2e5cb1-e91f-4582-b91b-5b5f5e607579"],
Cell[87569, 2199, 162, 3, 50, "Output",ExpressionUUID->"da561860-6aa4-4fdc-b4c1-4bd2d9d990da"],
Cell[87734, 2204, 152, 3, 50, "Output",ExpressionUUID->"8049ce17-98ac-40a0-83b9-91bf3b98ac8b"],
Cell[87889, 2209, 152, 3, 50, "Output",ExpressionUUID->"168c05d6-1656-473a-ab27-236861e5bd4e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[88090, 2218, 148, 2, 58, "Subsubsection",ExpressionUUID->"900bce7a-5bce-4f1f-9e2a-8b449695baa4",
 CellTags->"Nested List"],
Cell[88241, 2222, 664, 15, 83, "Text",ExpressionUUID->"8fc3881b-435d-4db5-bafd-ed58699d9f3c"],
Cell[CellGroupData[{
Cell[88930, 2241, 418, 11, 44, "Input",ExpressionUUID->"5a96ff6a-b9f1-4cb5-a322-eb067a921d45"],
Cell[89351, 2254, 906, 27, 80, "Output",ExpressionUUID->"817dcf81-0b7a-47f8-b7be-7f001bf64637"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90294, 2286, 151, 2, 44, "Input",ExpressionUUID->"17f93b9d-c5f7-4371-8ecb-c18d68bc10e0"],
Cell[90448, 2290, 162, 3, 50, "Output",ExpressionUUID->"f44583a5-8df5-4ac6-9296-a31b332d6206"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90647, 2298, 151, 2, 44, "Input",ExpressionUUID->"e1b18e11-c126-4922-8e5d-757481626361"],
Cell[90801, 2302, 5155, 154, 270, "Output",ExpressionUUID->"ac66a1e4-14e8-47bc-a2d5-3ef9f9ec7b17"]
}, Open  ]],
Cell[CellGroupData[{
Cell[95993, 2461, 149, 2, 44, "Input",ExpressionUUID->"128d8fc6-8cfe-4edb-a0d0-4e68ed25d380"],
Cell[96145, 2465, 30790, 842, 301, "Output",ExpressionUUID->"5c5dd90a-6dda-4caf-bda8-5a28ba717fac"]
}, Open  ]],
Cell[126950, 3310, 222, 3, 83, "Text",ExpressionUUID->"e1456981-bb67-42cf-860b-e5f1c139113f"],
Cell[127175, 3315, 215, 3, 83, "Text",ExpressionUUID->"5bcc707a-093a-49a2-9836-3635590d5b3d"],
Cell[CellGroupData[{
Cell[127415, 3322, 199, 4, 44, "Input",ExpressionUUID->"e6125b6f-16db-4127-b1ec-5b8ae329fa97"],
Cell[127617, 3328, 107, 1, 50, "Output",ExpressionUUID->"c70a075d-3b49-4129-9394-3a890908a8f2"]
}, Open  ]],
Cell[127739, 3332, 164, 3, 50, "Text",ExpressionUUID->"7bc9b7cb-521f-4f52-adef-a436f3477502"],
Cell[127906, 3337, 141, 2, 50, "Text",ExpressionUUID->"5ced1d11-87c6-439a-bbe2-92511e94ecf7"],
Cell[CellGroupData[{
Cell[128072, 3343, 191, 4, 44, "Input",ExpressionUUID->"ac0fec11-a63c-4c91-b049-d661daae525b"],
Cell[128266, 3349, 339, 9, 50, "Output",ExpressionUUID->"7e31ad10-9da1-48c2-805c-d40f3d281c97"]
}, Open  ]],
Cell[128620, 3361, 144, 2, 50, "Text",ExpressionUUID->"402497b3-bc1f-4b00-9b4d-f2190c9c3b7e"],
Cell[CellGroupData[{
Cell[128789, 3367, 191, 4, 44, "Input",ExpressionUUID->"f9aca638-3ec5-4979-be67-acf357e1102f"],
Cell[128983, 3373, 339, 9, 50, "Output",ExpressionUUID->"aee84467-74dd-450a-b9f4-d82a0b79fa6d"]
}, Open  ]],
Cell[CellGroupData[{
Cell[129359, 3387, 203, 4, 44, "Input",ExpressionUUID->"1431fe9a-85a9-428a-95be-e28117c0342d"],
Cell[129565, 3393, 339, 9, 50, "Output",ExpressionUUID->"3213072d-dd5a-448e-804c-3f1aeaf0e25d"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[129953, 3408, 113, 0, 58, "Subsubsection",ExpressionUUID->"b960d3d4-9b13-48b6-8486-8d4e32ec5d5f"],
Cell[CellGroupData[{
Cell[130091, 3412, 220, 4, 44, "Input",ExpressionUUID->"1833ac20-4f81-4263-816a-bbcd30f1b691"],
Cell[130314, 3418, 182, 3, 50, "Output",ExpressionUUID->"109b36f4-18ff-4bca-beb0-4d947aa77222"]
}, Open  ]],
Cell[130511, 3424, 233, 6, 50, "Text",ExpressionUUID->"282bd89c-37b9-4fa8-803e-8f214c25770e"],
Cell[CellGroupData[{
Cell[130769, 3434, 183, 4, 44, "Input",ExpressionUUID->"8cfea7fb-1d99-4199-8277-82c4a829f2e1",
 CellTags->"Take"],
Cell[130955, 3440, 181, 4, 50, "Output",ExpressionUUID->"8765582e-d9ad-44d9-b80a-055975273670",
 CellTags->"Take"]
}, Open  ]],
Cell[131151, 3447, 266, 6, 50, "Text",ExpressionUUID->"7c753b45-6bc1-4896-bc70-207263ae4a52"],
Cell[CellGroupData[{
Cell[131442, 3457, 183, 4, 44, "Input",ExpressionUUID->"cf5aaf8e-44f7-48f2-8a8b-91900a890ed3",
 CellTags->"Drop"],
Cell[131628, 3463, 171, 4, 50, "Output",ExpressionUUID->"56f7621e-5879-47e6-a2fa-6264411edb54",
 CellTags->"Drop"]
}, Open  ]],
Cell[131814, 3470, 111, 0, 50, "Text",ExpressionUUID->"427b4174-3c23-4642-bcbc-0e2bbf4be627"],
Cell[CellGroupData[{
Cell[131950, 3474, 160, 3, 44, "Input",ExpressionUUID->"9683d40a-6494-4dee-a923-5c4adf9d9f26",
 CellTags->"Rest"],
Cell[132113, 3479, 191, 4, 50, "Output",ExpressionUUID->"d02a2a08-c3b5-4865-8e27-f24ae3322e41",
 CellTags->"Rest"]
}, Open  ]],
Cell[132319, 3486, 110, 0, 50, "Text",ExpressionUUID->"6559df4e-8fd9-43d4-8dbe-7408e3ae0ed9"],
Cell[CellGroupData[{
Cell[132454, 3490, 160, 3, 44, "Input",ExpressionUUID->"29393464-50d6-424a-90be-a19845047817",
 CellTags->"Most"],
Cell[132617, 3495, 191, 4, 50, "Output",ExpressionUUID->"68d76d72-cdcf-449a-97ec-3fdd33bcbd92",
 CellTags->"Most"]
}, Open  ]],
Cell[132823, 3502, 9937, 185, 364, "Text",ExpressionUUID->"0f9a22fb-df10-4ab6-85b7-cce75c51f500",
 CellTags->"CYU"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[142821, 3694, 108, 0, 136, "Section",ExpressionUUID->"0740da51-363d-4e1f-a369-816f4156fc53"],
Cell[CellGroupData[{
Cell[142954, 3698, 102, 0, 60, "Subsection",ExpressionUUID->"3493c6d4-3c3a-4f2c-8bbb-1a09c6ed968f"],
Cell[143059, 3700, 113, 0, 50, "Text",ExpressionUUID->"fa9bd3f1-0e78-4e8f-bb9d-953a33b35e89"],
Cell[CellGroupData[{
Cell[143197, 3704, 219, 5, 44, "Input",ExpressionUUID->"96c9924a-059a-4ebb-af5a-32d2ba7e4290",
 CellTags->"Prepend"],
Cell[143419, 3711, 194, 4, 50, "Output",ExpressionUUID->"dbc328d3-c2f9-4c02-a64b-b6921d2af28d",
 CellTags->"Prepend"]
}, Open  ]],
Cell[143628, 3718, 107, 0, 50, "Text",ExpressionUUID->"a58bd5d7-7f83-4f95-90a5-c44916d30535"],
Cell[CellGroupData[{
Cell[143760, 3722, 241, 6, 44, "Input",ExpressionUUID->"1fd211ed-8920-4841-9481-af96250b8a0f",
 CellTags->"Append"],
Cell[144004, 3730, 193, 4, 50, "Output",ExpressionUUID->"2329d7a6-2e30-4578-a2e5-11d821813cb2",
 CellTags->"Append"]
}, Open  ]],
Cell[144212, 3737, 281, 7, 50, "Text",ExpressionUUID->"0c6ec5a3-83cb-48af-8a23-afdb42bd52cc"],
Cell[CellGroupData[{
Cell[144518, 3748, 254, 7, 44, "Input",ExpressionUUID->"f6378b9f-6381-4d6c-bf89-05ab05aab67d",
 CellTags->"Insert"],
Cell[144775, 3757, 193, 4, 50, "Output",ExpressionUUID->"cc9a5c84-c0f3-43f9-81db-9d84a930e25e",
 CellTags->"Insert"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[145017, 3767, 106, 0, 60, "Subsection",ExpressionUUID->"8e6a9fd5-e34f-4750-a120-bc30891a6abc"],
Cell[145126, 3769, 241, 6, 50, "Text",ExpressionUUID->"c7d62ddc-8df3-453f-a431-35fe2b4c8486"],
Cell[CellGroupData[{
Cell[145392, 3779, 241, 6, 44, "Input",ExpressionUUID->"ab8617e4-1f19-4e43-b8b3-e7e2534c82df",
 CellTags->"Delete"],
Cell[145636, 3787, 173, 4, 50, "Output",ExpressionUUID->"dfa8ec58-21a3-499b-a7d9-d49c8bf3c502",
 CellTags->"Delete"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[145858, 3797, 105, 0, 60, "Subsection",ExpressionUUID->"c34237a4-7735-420f-a351-caaa8e7c7c92"],
Cell[145966, 3799, 154, 2, 50, "Text",ExpressionUUID->"b6afa49c-4a9a-4a8c-823b-c5505dc5ac0a"],
Cell[146123, 3803, 304, 7, 74, "Input",ExpressionUUID->"2c1f4257-f68d-4983-899c-d6fc5057fa47"],
Cell[146430, 3812, 230, 6, 44, "Input",ExpressionUUID->"a4cbfc8d-0b64-4c32-b9f9-a495fe56bbde"],
Cell[CellGroupData[{
Cell[146685, 3822, 111, 1, 44, "Input",ExpressionUUID->"60849d26-6034-4503-82a9-3b50ca09caae"],
Cell[146799, 3825, 174, 3, 50, "Output",ExpressionUUID->"92cc748f-4e07-4a0f-aa7a-daed66e44a2e"]
}, Open  ]],
Cell[146988, 3831, 381, 7, 50, "Text",ExpressionUUID->"f35d1fe9-136c-46d1-aa07-144c5a20d331"],
Cell[CellGroupData[{
Cell[147394, 3842, 169, 3, 44, "Input",ExpressionUUID->"56d6e445-f76b-450f-8e74-f3a3e5322236"],
Cell[147566, 3847, 175, 3, 50, "Output",ExpressionUUID->"2d88f1d1-58fa-460c-83db-8ad308fee97c"]
}, Open  ]],
Cell[147756, 3853, 426, 11, 50, "Text",ExpressionUUID->"458ce255-9993-468b-9e7d-d3e4d2897dae",
 CellTags->"ReplacePart"],
Cell[CellGroupData[{
Cell[148207, 3868, 201, 4, 44, "Input",ExpressionUUID->"b08ebbc7-e038-4029-bf28-b59a71ef849b"],
Cell[148411, 3874, 174, 3, 50, "Output",ExpressionUUID->"cfeb8906-8f3d-4610-90c8-13ebdcef0b37"]
}, Open  ]],
Cell[148600, 3880, 353, 5, 116, "Text",ExpressionUUID->"666aa105-2e6d-4e94-b685-765ceaf3c9d5"],
Cell[CellGroupData[{
Cell[148978, 3889, 111, 1, 44, "Input",ExpressionUUID->"5c73ea98-9290-41c3-9273-47ae59544c27"],
Cell[149092, 3892, 174, 3, 50, "Output",ExpressionUUID->"1ef8e868-066b-448f-9e7b-9d4f52f133f1"]
}, Open  ]],
Cell[149281, 3898, 214, 3, 83, "Text",ExpressionUUID->"4f012d10-4b18-4c60-9195-5902776f9010"],
Cell[CellGroupData[{
Cell[149520, 3905, 422, 12, 44, "Input",ExpressionUUID->"e969906f-fb89-4aeb-a935-78044a310156"],
Cell[149945, 3919, 270, 7, 50, "Output",ExpressionUUID->"25eb7649-fa9e-4ad8-a809-e261765e600a"]
}, Open  ]],
Cell[150230, 3929, 7562, 141, 327, "Text",ExpressionUUID->"9fb1bdb2-6f32-4186-9510-d25a0c1007f1",
 CellTags->"CYU"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[157841, 4076, 109, 0, 136, "Section",ExpressionUUID->"7bccae14-1979-4470-8228-88417b393ec9"],
Cell[157953, 4078, 118, 1, 50, "Text",ExpressionUUID->"de4c3537-30b3-4463-986c-872d4d5c3fe2",
 CellTags->"Sort"],
Cell[CellGroupData[{
Cell[158096, 4083, 216, 5, 44, "Input",ExpressionUUID->"1fc74904-8f43-4631-b9f6-33b30519da24"],
Cell[158315, 4090, 182, 3, 50, "Output",ExpressionUUID->"3c0ce703-74c7-4c15-ab12-1a747c15b833"]
}, Open  ]],
Cell[CellGroupData[{
Cell[158534, 4098, 223, 5, 44, "Input",ExpressionUUID->"fca11ec6-f5a1-421e-82d7-c057157b9840"],
Cell[158760, 4105, 182, 3, 50, "Output",ExpressionUUID->"cce6ca65-66f8-40a8-ae2f-9fa7b0cb03c4"]
}, Open  ]],
Cell[158957, 4111, 137, 1, 50, "Text",ExpressionUUID->"caafc075-ab18-4f25-a29b-77465b838d2e",
 CellTags->"Reverse"],
Cell[CellGroupData[{
Cell[159119, 4116, 206, 4, 44, "Input",ExpressionUUID->"0f552e26-aded-4f7e-b6f7-29bbb2a88a7b"],
Cell[159328, 4122, 172, 3, 50, "Output",ExpressionUUID->"3638e476-85bd-409f-b28b-626631a02507"]
}, Open  ]],
Cell[159515, 4128, 94, 0, 50, "Text",ExpressionUUID->"7855025f-0e0b-40ac-83f8-06c2de76361a"],
Cell[CellGroupData[{
Cell[159634, 4132, 286, 8, 44, "Input",ExpressionUUID->"c4451d69-82ce-4574-8619-e31e5a0d73ec",
 CellTags->"Join"],
Cell[159923, 4142, 201, 4, 50, "Output",ExpressionUUID->"f374a02c-413a-4d7c-b217-f935136c063c",
 CellTags->"Join"]
}, Open  ]],
Cell[160139, 4149, 146, 2, 50, "Text",ExpressionUUID->"89e83e0f-e303-4321-bd44-edf1edb68990"],
Cell[CellGroupData[{
Cell[160310, 4155, 288, 8, 44, "Input",ExpressionUUID->"77beaa70-76b1-4303-8da1-85f194a1e49d",
 CellTags->"Union"],
Cell[160601, 4165, 182, 4, 50, "Output",ExpressionUUID->"4a93667f-15cb-4925-ac55-5c57387050e0",
 CellTags->"Union"]
}, Open  ]],
Cell[160798, 4172, 107, 0, 50, "Text",ExpressionUUID->"c4ce8d0d-9cf9-4b26-95d1-cb9e577c4940"],
Cell[CellGroupData[{
Cell[160930, 4176, 290, 8, 44, "Input",ExpressionUUID->"c7fdb400-f12e-499e-bb08-0502f9115492",
 CellTags->"Riffle"],
Cell[161223, 4186, 203, 4, 50, "Output",ExpressionUUID->"06104a7a-d1ce-427f-9ff9-1fff089782b5",
 CellTags->"Riffle"]
}, Open  ]],
Cell[161441, 4193, 120, 0, 50, "Text",ExpressionUUID->"032bf03a-264d-4f74-884b-ec6067c456f5"],
Cell[CellGroupData[{
Cell[161586, 4197, 138, 2, 44, "Input",ExpressionUUID->"b7472f17-cc13-403d-99c8-cbc73f6109b2"],
Cell[161727, 4201, 262, 5, 50, "Output",ExpressionUUID->"70b324e7-b5b0-4fa4-bb84-36481a688d92"]
}, Open  ]],
Cell[CellGroupData[{
Cell[162026, 4211, 222, 5, 44, "Input",ExpressionUUID->"7d6a8219-d266-425e-82c8-e281e241a406",
 CellTags->"Partition"],
Cell[162251, 4218, 435, 12, 50, "Output",ExpressionUUID->"d2f58f48-d45b-4711-bffc-715eed09b6c3",
 CellTags->"Partition"]
}, Open  ]],
Cell[162701, 4233, 447, 9, 83, "Text",ExpressionUUID->"3cc890d4-5ea9-412d-865b-c1ae166a26f1"],
Cell[CellGroupData[{
Cell[163173, 4246, 198, 4, 44, "Input",ExpressionUUID->"24fbce78-a203-40de-b9f3-f80c9726c641"],
Cell[163374, 4252, 411, 11, 50, "Output",ExpressionUUID->"09b80569-4df2-4b02-bb37-393cb9a7c4c2"]
}, Open  ]],
Cell[163800, 4266, 172, 3, 50, "Text",ExpressionUUID->"d3e8b0ac-9457-4e84-88ac-add86f2d7c6e"],
Cell[CellGroupData[{
Cell[163997, 4273, 230, 5, 44, "Input",ExpressionUUID->"9681c4ee-8a9f-4b92-b2ea-ada6741e6f65"],
Cell[164230, 4280, 446, 12, 50, "Output",ExpressionUUID->"5851f6cc-fa2e-4e96-b360-f07fb73b45bc"]
}, Open  ]],
Cell[164691, 4295, 354, 8, 50, "Text",ExpressionUUID->"e80d2718-4a2e-423d-87bd-ff14b8f5bb88"],
Cell[CellGroupData[{
Cell[165070, 4307, 463, 14, 44, "Input",ExpressionUUID->"53d838b1-4ab6-4075-8802-434b4511e187",
 CellTags->"Flatten"],
Cell[165536, 4323, 240, 6, 50, "Output",ExpressionUUID->"0beaae51-e7f4-47d7-9a3b-a647c8aefd32",
 CellTags->"Flatten"]
}, Open  ]],
Cell[165791, 4332, 113, 0, 50, "Text",ExpressionUUID->"31b971bc-7fd4-4b3c-b929-62d457aa5d46"],
Cell[165907, 4334, 131, 0, 50, "Text",ExpressionUUID->"c4418935-cab2-4fed-a782-9bc205f83408"],
Cell[CellGroupData[{
Cell[166063, 4338, 498, 15, 44, "Input",ExpressionUUID->"0777d376-a04e-4ffe-8bd8-24cf532ac252",
 CellTags->"Transpose"],
Cell[166564, 4355, 338, 9, 50, "Output",ExpressionUUID->"7900099d-391a-4da3-8fb8-7f2ed83d3a08",
 CellTags->"Transpose"]
}, Open  ]],
Cell[CellGroupData[{
Cell[166939, 4369, 354, 9, 44, "Input",ExpressionUUID->"3b9451bc-63d8-45ba-9cd4-02073e5577b0"],
Cell[167296, 4380, 428, 13, 50, "Output",ExpressionUUID->"0e848842-0a2e-4bcb-b4f2-20135a73c8d3"]
}, Open  ]],
Cell[167739, 4396, 611, 13, 116, "Text",ExpressionUUID->"4a90fe28-e476-405a-8b29-b23b4da9a62a"],
Cell[168353, 4411, 11191, 210, 364, "Text",ExpressionUUID->"8d285219-c5e1-475b-a4c0-13c94e162244",
 CellTags->"CYU"]
}, Open  ]],
Cell[CellGroupData[{
Cell[179581, 4626, 85, 0, 136, "Section",ExpressionUUID->"80b49239-ea6d-4723-9c86-d69097eef7ce"],
Cell[179669, 4628, 326, 7, 83, "Text",ExpressionUUID->"3a2ee7ea-f070-47fa-a4b7-795a1d09600d"],
Cell[CellGroupData[{
Cell[180020, 4639, 226, 5, 44, "Input",ExpressionUUID->"7611598f-773a-42dc-b3f3-2f7d79c38360"],
Cell[180249, 4646, 247, 5, 50, "Output",ExpressionUUID->"6878a6d4-583a-4f16-9775-6cd9c0a069ba"]
}, Open  ]],
Cell[180511, 4654, 290, 6, 44, "Input",ExpressionUUID->"c99abd19-7bff-4547-8c75-6b586e7f1502"],
Cell[CellGroupData[{
Cell[180826, 4664, 288, 6, 44, "Input",ExpressionUUID->"74f93f99-3f0b-4c2f-9c6f-9c6cd5edffe4"],
Cell[181117, 4672, 247, 5, 50, "Output",ExpressionUUID->"3b001691-26de-415d-9130-edbea589bea0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[181401, 4682, 208, 5, 44, "Input",ExpressionUUID->"c4375627-6637-43cb-886b-30c88d3b9b49"],
Cell[181612, 4689, 247, 5, 50, "Output",ExpressionUUID->"96054a26-ad66-4155-ba76-915fff7a1286"]
}, Open  ]],
Cell[181874, 4697, 81, 0, 44, "Input",ExpressionUUID->"f94ac845-2d12-463d-8719-c7fa9747c0fc"],
Cell[181958, 4699, 153, 2, 50, "Text",ExpressionUUID->"9f004b51-a03d-4916-832c-2dd4e3b50bef"],
Cell[182114, 4703, 56200, 930, 57, "Input",ExpressionUUID->"e55e7f28-faab-4140-bb22-a443e2d53296"],
Cell[238317, 5635, 56301, 932, 169, "Input",ExpressionUUID->"fcb7cf8b-9e2b-408f-9cb7-23a9cd7e8de1"],
Cell[294621, 6569, 161, 3, 50, "Text",ExpressionUUID->"3a60ade2-284e-4469-a677-0c810741f4c0"],
Cell[294785, 6574, 334, 8, 44, "Input",ExpressionUUID->"b9a60671-7ab4-4ba0-8c3e-d0e610594d71"],
Cell[295122, 6584, 405, 10, 74, "Input",ExpressionUUID->"b3649e8f-c082-4e94-9a2d-49976c5fb427"],
Cell[CellGroupData[{
Cell[295552, 6598, 375, 9, 44, "Input",ExpressionUUID->"0ad4c605-11bc-4ec1-8924-f10f0216795e"],
Cell[295930, 6609, 332, 8, 50, "Output",ExpressionUUID->"5225d986-d969-4385-9fdc-e58313685730"]
}, Open  ]],
Cell[296277, 6620, 102, 0, 50, "Text",ExpressionUUID->"3f6861ff-9381-46ee-82e3-a3467b6fd3ce"]
}, Open  ]],
Cell[CellGroupData[{
Cell[296416, 6625, 110, 0, 136, "Section",ExpressionUUID->"734c54fb-f0bd-4193-9242-ff135b05eccb"],
Cell[296529, 6627, 181, 3, 50, "Text",ExpressionUUID->"8432b07d-1080-491b-85e7-f9742100fcaf"],
Cell[CellGroupData[{
Cell[296735, 6634, 330, 9, 44, "Input",ExpressionUUID->"4b079d09-8d92-4d6c-9c91-f2d5456cdbd0"],
Cell[297068, 6645, 111, 2, 50, "Output",ExpressionUUID->"d205d6f1-4a51-4080-8970-dc507acef67a"]
}, Open  ]],
Cell[297194, 6650, 194, 3, 83, "Text",ExpressionUUID->"b2370f43-251e-43b9-a5f3-4f7dc76f2629"],
Cell[CellGroupData[{
Cell[297413, 6657, 227, 6, 44, "Input",ExpressionUUID->"bc9343f4-354f-4b33-ba29-f98b116ea3f6"],
Cell[297643, 6665, 111, 2, 50, "Output",ExpressionUUID->"8c303d36-a2d6-4bb9-be4e-769ca39477d5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[297791, 6672, 227, 6, 44, "Input",ExpressionUUID->"37f6d632-f214-4f61-8d82-0a024f59c103"],
Cell[298021, 6680, 111, 2, 50, "Output",ExpressionUUID->"4ca7230c-4198-477e-a5ae-11070f37da75"]
}, Open  ]],
Cell[CellGroupData[{
Cell[298169, 6687, 366, 10, 44, "Input",ExpressionUUID->"fd29a0b8-84a7-497d-a6f6-cd4f85f47d71"],
Cell[298538, 6699, 111, 2, 50, "Output",ExpressionUUID->"13e6fb77-eb69-400c-94f2-817c32d83c02"]
}, Open  ]],
Cell[298664, 6704, 665, 15, 83, "Text",ExpressionUUID->"c3a38294-209d-41d6-91ec-165643261438",
 CellTags->"Missing"],
Cell[CellGroupData[{
Cell[299354, 6723, 114, 2, 44, "Input",ExpressionUUID->"1270b969-364a-44a8-b19c-06755fdd9937"],
Cell[299471, 6727, 56205, 932, 175, "Output",ExpressionUUID->"4fdce91a-4d8a-4275-976f-c3a69c6192fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[355713, 7664, 198, 5, 44, "Input",ExpressionUUID->"5c0a114b-c0ca-49ac-bcbc-942d641aad8e",
 CellTags->"KeyExistsQ"],
Cell[355914, 7671, 140, 3, 50, "Output",ExpressionUUID->"f806fad2-4d40-4975-a327-71c978ae348a",
 CellTags->"KeyExistsQ"]
}, Open  ]],
Cell[CellGroupData[{
Cell[356091, 7679, 141, 3, 44, "Input",ExpressionUUID->"77e64b26-4f1f-48fd-8e42-23df0a2e1be3"],
Cell[356235, 7684, 183, 4, 50, "Output",ExpressionUUID->"48faf57a-c265-4cc4-8b74-e2baf575c9cd"]
}, Open  ]],
Cell[356433, 7691, 326, 5, 116, "Text",ExpressionUUID->"58a369b0-171a-4f80-bd18-337e298e9627",
 CellTags->"Part"],
Cell[CellGroupData[{
Cell[356784, 7700, 201, 5, 74, "Input",ExpressionUUID->"1001c3d4-49d1-4d70-9b85-6b46b7de97c8"],
Cell[356988, 7707, 55879, 923, 175, "Output",ExpressionUUID->"4a7453f3-9fe3-4e88-b116-9ac3984baf70"]
}, Open  ]],
Cell[CellGroupData[{
Cell[412904, 8635, 174, 4, 44, "Input",ExpressionUUID->"8fb28fa2-202d-4f9d-a8ef-470ace45f138"],
Cell[413081, 8641, 55879, 923, 175, "Output",ExpressionUUID->"ae6b39bf-f095-40fe-b9c8-69092743da1a"]
}, Open  ]],
Cell[468975, 9567, 352, 9, 50, "Text",ExpressionUUID->"97ca5672-6ab2-421f-8bc2-07df619f60eb",
 CellTags->"Key"],
Cell[CellGroupData[{
Cell[469352, 9580, 304, 9, 44, "Input",ExpressionUUID->"d96d487c-93b8-4678-8c11-69f66e51c55c"],
Cell[469659, 9591, 55952, 925, 175, "Output",ExpressionUUID->"ade50cf6-4544-408e-8e96-9f14e22ba8f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[525648, 10521, 114, 2, 44, "Input",ExpressionUUID->"a464ef7c-69e0-41a2-a532-43121693d852"],
Cell[525765, 10525, 56205, 932, 175, "Output",ExpressionUUID->"1433055c-ec1f-49f2-9320-a5b4c0a7c46e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[582007, 11462, 414, 14, 44, "Input",ExpressionUUID->"1a8cb7bf-e968-4c16-b916-b0c5bcc3113b"],
Cell[582424, 11478, 362, 11, 50, "Output",ExpressionUUID->"794108bf-6036-47bc-bf3f-dd373284c5eb"]
}, Open  ]],
Cell[582801, 11492, 573, 14, 50, "Text",ExpressionUUID->"0e1e2fd5-f6fa-4c05-901b-022a7f6fbee0"],
Cell[CellGroupData[{
Cell[583399, 11510, 163, 4, 44, "Input",ExpressionUUID->"03cfeb64-16e5-4449-97e1-9a2dd5098ccf",
 CellTags->"Keys"],
Cell[583565, 11516, 257, 8, 50, "Output",ExpressionUUID->"026d94af-d2a8-4280-b062-a15665910415",
 CellTags->"Keys"]
}, Open  ]],
Cell[CellGroupData[{
Cell[583859, 11529, 167, 4, 44, "Input",ExpressionUUID->"15fb3f69-357d-43f2-8ac4-bf49b7227f70",
 CellTags->"Values"],
Cell[584029, 11535, 55993, 926, 175, "Output",ExpressionUUID->"4f92b9c2-90b3-4e6d-9a7e-8e92f66c2057",
 CellTags->"Values"]
}, Open  ]],
Cell[640037, 12464, 12831, 247, 629, "Text",ExpressionUUID->"6df8c60e-c169-4568-b472-f09abff47632",
 CellTags->"CYU"]
}, Open  ]],
Cell[CellGroupData[{
Cell[652905, 12716, 93, 0, 136, "Section",ExpressionUUID->"91dee0ca-3bde-402e-b12f-645b7a302993"],
Cell[653001, 12718, 199, 3, 83, "Text",ExpressionUUID->"47af6d3d-d56d-4cb7-9c1b-513a4bb071f9"],
Cell[653203, 12723, 500, 13, 105, "Input",ExpressionUUID->"dfa52d9f-3d27-4579-870d-3705fb7ba861"],
Cell[CellGroupData[{
Cell[653728, 12740, 634, 17, 74, "Input",ExpressionUUID->"07cf74b5-1c25-4c1a-a4e6-2e04606d0a81"],
Cell[654365, 12759, 344, 9, 50, "Output",ExpressionUUID->"d4bd35bf-b841-41fe-bfc2-c2ba264ea23a"],
Cell[654712, 12770, 344, 9, 50, "Output",ExpressionUUID->"9cfa0c79-6a0d-41a5-9602-e97cce8d0cdc"]
}, Open  ]],
Cell[655071, 12782, 124, 0, 50, "Text",ExpressionUUID->"319de779-2c39-4ae6-90fd-686f3281d38b"],
Cell[CellGroupData[{
Cell[655220, 12786, 346, 9, 44, "Input",ExpressionUUID->"7c84bef6-8203-42a0-bc6a-9bec242c570f",
 CellTags->"Normal"],
Cell[655569, 12797, 308, 8, 50, "Output",ExpressionUUID->"08f8843a-f387-410b-a1af-8698e56c43c7",
 CellTags->"Normal"]
}, Open  ]],
Cell[655892, 12808, 115, 0, 50, "Text",ExpressionUUID->"464469b8-8a6e-40fc-8277-42cb472dd8c8"],
Cell[CellGroupData[{
Cell[656032, 12812, 387, 10, 44, "Input",ExpressionUUID->"e745d829-2b9f-467c-a0ba-446c585068ef"],
Cell[656422, 12824, 377, 9, 50, "Output",ExpressionUUID->"f077877a-85b4-4fd8-b741-6db2c60109cb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[656836, 12838, 113, 0, 60, "Subsection",ExpressionUUID->"3ef7274f-efe2-4f8b-85ce-a688636a535c"],
Cell[656952, 12840, 653, 18, 50, "Text",ExpressionUUID->"24a19cd1-af42-47f9-973e-f65caba3a880"],
Cell[CellGroupData[{
Cell[657630, 12862, 271, 7, 44, "Input",ExpressionUUID->"1f3e7008-1c35-4138-a62e-69e133089a87",
 CellTags->"AssociationMap"],
Cell[657904, 12871, 480, 13, 50, "Output",ExpressionUUID->"a4da4a2c-d890-445d-861c-b6e24f29b322",
 CellTags->"AssociationMap"]
}, Open  ]],
Cell[CellGroupData[{
Cell[658421, 12889, 346, 9, 44, "Input",ExpressionUUID->"27140286-095b-431b-af93-35ac32e4b80f",
 CellTags->"AssociationThread"],
Cell[658770, 12900, 363, 9, 50, "Output",ExpressionUUID->"177f2da3-4ec1-400f-96e4-b73adedbe31c",
 CellTags->"AssociationThread"]
}, Open  ]],
Cell[CellGroupData[{
Cell[659170, 12914, 361, 10, 44, "Input",ExpressionUUID->"ef0abea5-891f-49e5-9ce5-82051c330a78"],
Cell[659534, 12926, 317, 8, 50, "Output",ExpressionUUID->"f3d3fd62-1ea5-4696-b7e2-c8f14216348f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[659900, 12940, 108, 0, 60, "Subsection",ExpressionUUID->"27582177-cdad-41f9-a6d4-09b3c19bab4d"],
Cell[660011, 12942, 596, 16, 50, "Text",ExpressionUUID->"4f589650-9174-4ace-9599-e8ff3f547ba6"],
Cell[CellGroupData[{
Cell[660632, 12962, 319, 8, 44, "Input",ExpressionUUID->"412d9229-14ca-4ac6-92f4-d7507c1a5a57"],
Cell[660954, 12972, 325, 8, 50, "Output",ExpressionUUID->"706c2514-726b-46c7-ae40-211dc4a7b9ce"]
}, Open  ]],
Cell[CellGroupData[{
Cell[661316, 12985, 242, 6, 44, "Input",ExpressionUUID->"b8157844-229c-4925-b03b-cdc57a1bfe13",
 CellTags->"AssociateTo"],
Cell[661561, 12993, 403, 10, 50, "Output",ExpressionUUID->"022b83a9-8a7a-4beb-ab95-5d94b7ed833c",
 CellTags->"AssociateTo"]
}, Open  ]],
Cell[CellGroupData[{
Cell[662001, 13008, 140, 3, 44, "Input",ExpressionUUID->"222c7fcf-d970-4691-aac4-cccf73d3e32d",
 CellTags->"AssociateTo"],
Cell[662144, 13013, 403, 10, 50, "Output",ExpressionUUID->"756ad6b8-63fb-4193-ad3f-f6e7b7648178",
 CellTags->"AssociateTo"]
}, Open  ]],
Cell[CellGroupData[{
Cell[662584, 13028, 210, 5, 44, "Input",ExpressionUUID->"b0843041-ede8-4960-9e21-923a13e9b81e",
 CellTags->"KeyDropFrom"],
Cell[662797, 13035, 353, 9, 50, "Output",ExpressionUUID->"5076319e-f86c-4735-ad0e-1a7c6bfdc962",
 CellTags->"KeyDropFrom"]
}, Open  ]],
Cell[CellGroupData[{
Cell[663187, 13049, 140, 3, 44, "Input",ExpressionUUID->"d3bc2484-5b9e-4c71-a0ba-aef92e1dd531",
 CellTags->"KeyDropFrom"],
Cell[663330, 13054, 353, 9, 50, "Output",ExpressionUUID->"75095bc9-47ab-461f-a664-293a5af4004c",
 CellTags->"KeyDropFrom"]
}, Open  ]],
Cell[663698, 13066, 327, 8, 50, "Text",ExpressionUUID->"710218da-ce5b-4622-a27f-5bf5be22a62d"],
Cell[CellGroupData[{
Cell[664050, 13078, 174, 4, 44, "Input",ExpressionUUID->"0042d65a-20e4-4809-a6b5-2804817449e1"],
Cell[664227, 13084, 111, 2, 50, "Output",ExpressionUUID->"f7e633b3-1281-4faa-a7fa-291fd6a9a68c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[664375, 13091, 114, 2, 44, "Input",ExpressionUUID->"49c2fd19-6191-4db1-943a-daf3cd3e21e7"],
Cell[664492, 13095, 327, 8, 50, "Output",ExpressionUUID->"3c258194-dbc1-4a44-9834-21a8f4c51f7e"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[664868, 13109, 119, 0, 60, "Subsection",ExpressionUUID->"0d313015-f6a3-433b-be2a-5b69e7505ab3"],
Cell[664990, 13111, 1040, 27, 50, "Text",ExpressionUUID->"3e793638-125c-436d-a678-b8a2e878e9f3"],
Cell[CellGroupData[{
Cell[666055, 13142, 280, 8, 44, "Input",ExpressionUUID->"b2b71193-2ffd-425b-aabc-58af8b661490",
 CellTags->"Counts"],
Cell[666338, 13152, 274, 7, 50, "Output",ExpressionUUID->"b44dcd4c-8553-43d6-a736-4a3e8f6f7a73",
 CellTags->"Counts"]
}, Open  ]],
Cell[CellGroupData[{
Cell[666649, 13164, 287, 8, 44, "Input",ExpressionUUID->"325fa064-dca5-4463-8082-465a561a1cdb",
 CellTags->"CountsBy"],
Cell[666939, 13174, 281, 7, 50, "Output",ExpressionUUID->"93b9e480-9212-4d56-a4de-466fb6a8f7b2",
 CellTags->"CountsBy"]
}, Open  ]],
Cell[CellGroupData[{
Cell[667257, 13186, 285, 8, 44, "Input",ExpressionUUID->"b2e25fec-2bfc-4e2a-bbb4-7ab7a37f55c2",
 CellTags->"GroupBy"],
Cell[667545, 13196, 402, 11, 50, "Output",ExpressionUUID->"eac985d0-d4ba-4c25-bbc5-02306c9955d8",
 CellTags->"GroupBy"]
}, Open  ]],
Cell[CellGroupData[{
Cell[667984, 13212, 267, 7, 44, "Input",ExpressionUUID->"53ce393f-8da2-47a3-9ce3-3a9d4aef3aa0",
 CellTags->"PositionIndex"],
Cell[668254, 13221, 456, 13, 50, "Output",ExpressionUUID->"f02c7225-5a01-416e-8a36-3e3086a004bc",
 CellTags->"PositionIndex"]
}, Open  ]],
Cell[668725, 13237, 860, 23, 50, "Text",ExpressionUUID->"310ff6c0-8e64-482a-9ba2-008e0a633780"],
Cell[CellGroupData[{
Cell[669610, 13264, 196, 4, 44, "Input",ExpressionUUID->"600fde2c-0e8f-455e-8c7f-eb873b50471b",
 CellTags->"CharacterCounts"],
Cell[669809, 13270, 539, 13, 50, "Output",ExpressionUUID->"de85965d-02de-4a82-aaee-a714089c5f7e",
 CellTags->"CharacterCounts"]
}, Open  ]],
Cell[CellGroupData[{
Cell[670385, 13288, 190, 4, 44, "Input",ExpressionUUID->"867d8711-ab91-44de-99a3-d88a3544d030",
 CellTags->"LetterCounts"],
Cell[670578, 13294, 296, 8, 50, "Output",ExpressionUUID->"00d8d9a1-7792-4116-ae89-5a7bb3f3ce57",
 CellTags->"LetterCounts"]
}, Open  ]],
Cell[CellGroupData[{
Cell[670911, 13307, 220, 5, 44, "Input",ExpressionUUID->"edde0c0c-9cf7-43d5-b8f1-fd46cdf1049c",
 CellTags->"WordCounts"],
Cell[671134, 13314, 451, 11, 50, "Output",ExpressionUUID->"30c6dbfa-0b2c-451a-bec2-50b8e8e4a08f",
 CellTags->"WordCounts"]
}, Open  ]],
Cell[671600, 13328, 6987, 131, 290, "Text",ExpressionUUID->"745efc71-e6ba-48d0-8243-26bd71419b9c",
 CellTags->"CYU"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[678636, 13465, 112, 0, 136, "Section",ExpressionUUID->"4130138d-2565-40ee-9793-b1d876e5307a"],
Cell[678751, 13467, 153, 2, 50, "Text",ExpressionUUID->"2bf43ca3-97c2-440d-940d-dae752845668"],
Cell[CellGroupData[{
Cell[678929, 13473, 342, 9, 44, "Input",ExpressionUUID->"474496b9-792d-4b3c-8a2b-2a6ad0ab3d95",
 CellTags->"Sort"],
Cell[679274, 13484, 344, 9, 50, "Output",ExpressionUUID->"cbaaa765-9f90-4ebf-b066-ec34326d7c6e",
 CellTags->"Sort"]
}, Open  ]],
Cell[CellGroupData[{
Cell[679655, 13498, 545, 17, 44, "Input",ExpressionUUID->"35731940-4a68-49bc-8d39-135be432a9cc",
 CellTags->"SortBy"],
Cell[680203, 13517, 496, 14, 50, "Output",ExpressionUUID->"46bc649a-d45b-48d6-a150-59dbb3556fd9",
 CellTags->"SortBy"]
}, Open  ]],
Cell[CellGroupData[{
Cell[680736, 13536, 380, 11, 44, "Input",ExpressionUUID->"4b9318f2-d733-46ff-a8d3-8349fe9b8757",
 CellTags->"Select"],
Cell[681119, 13549, 295, 8, 50, "Output",ExpressionUUID->"9c293e4c-7fe8-4c93-a00e-8a8720d9921e",
 CellTags->"Select"]
}, Open  ]],
Cell[CellGroupData[{
Cell[681451, 13562, 412, 11, 44, "Input",ExpressionUUID->"4a0bdcf0-dbbc-4a2e-bbfe-a64db8a8b08d",
 CellTags->"DeleteCases"],
Cell[681866, 13575, 300, 8, 50, "Output",ExpressionUUID->"db2a4e42-2cf2-4eae-8088-c1f97a2663a9",
 CellTags->"DeleteCases"]
}, Open  ]],
Cell[682181, 13586, 345, 9, 44, "Input",ExpressionUUID->"a74317d3-9be6-4859-ae14-99e44878a3e7",
 CellTags->"Take"],
Cell[682529, 13597, 345, 9, 44, "Input",ExpressionUUID->"0ddfd449-4cd1-4ab5-a6f4-fdab80ab6e46",
 CellTags->"Drop"],
Cell[682877, 13608, 167, 3, 50, "Text",ExpressionUUID->"ca3c0e6e-7dfe-46cd-b9d5-f7a80d21d73d"],
Cell[CellGroupData[{
Cell[683069, 13615, 165, 4, 44, "Input",ExpressionUUID->"9544e123-40de-41bd-87b7-8a9d472d2a79",
 CellTags->"Total"],
Cell[683237, 13621, 132, 3, 50, "Output",ExpressionUUID->"ba9096ca-be83-458c-8535-6ac8b5e0e16d",
 CellTags->"Total"]
}, Open  ]],
Cell[CellGroupData[{
Cell[683406, 13629, 163, 4, 44, "Input",ExpressionUUID->"8a1e8176-01aa-4ada-bff4-256f74f0b607",
 CellTags->"Mean"],
Cell[683572, 13635, 151, 4, 65, "Output",ExpressionUUID->"442e6edb-4229-4319-a073-5c2d9ed9156c",
 CellTags->"Mean"]
}, Open  ]],
Cell[CellGroupData[{
Cell[683760, 13644, 192, 5, 44, "Input",ExpressionUUID->"4581359f-8e76-4dae-9bfa-c18acdee672f",
 CellTags->"Nearest"],
Cell[683955, 13651, 166, 4, 50, "Output",ExpressionUUID->"26333ffd-9ead-457e-aec5-6233b7ab2f6b",
 CellTags->"Nearest"]
}, Open  ]],
Cell[684136, 13658, 7219, 137, 327, "Text",ExpressionUUID->"8b66bb55-f5ec-45d7-9505-5e3f3aee9d6a",
 CellTags->"CYU"]
}, Open  ]],
Cell[CellGroupData[{
Cell[691392, 13800, 110, 0, 136, "Section",ExpressionUUID->"9e7a66a2-2d26-4398-b1e1-ee12b0374721"],
Cell[691505, 13802, 223, 3, 83, "Text",ExpressionUUID->"786709d1-3581-4d1e-98e0-8320d07249b3"],
Cell[691731, 13807, 292, 4, 83, "Text",ExpressionUUID->"566e56a1-a2ad-49a0-b8c2-58f4d5545535"],
Cell[CellGroupData[{
Cell[692048, 13815, 344, 10, 44, "Input",ExpressionUUID->"bb0bceab-5d17-4cf0-8b9d-b7364aa16b77",
 CellTags->"KeySort"],
Cell[692395, 13827, 313, 8, 50, "Output",ExpressionUUID->"67600e02-2545-4a83-a15b-e30c8c875ba1",
 CellTags->"KeySort"]
}, Open  ]],
Cell[CellGroupData[{
Cell[692745, 13840, 394, 11, 44, "Input",ExpressionUUID->"017d4b4b-6ba8-4175-86eb-e819be589b5b",
 CellTags->"KeySortBy"],
Cell[693142, 13853, 348, 9, 50, "Output",ExpressionUUID->"eb694190-8c57-46bd-a8da-bf5782936c88",
 CellTags->"KeySortBy"]
}, Open  ]],
Cell[CellGroupData[{
Cell[693527, 13867, 352, 10, 44, "Input",ExpressionUUID->"9b0f2ec3-e4c0-4ddc-85ac-ab263afbbd50",
 CellTags->"KeySelect"],
Cell[693882, 13879, 275, 7, 50, "Output",ExpressionUUID->"763ee32d-8a6f-49be-b91d-28d2258a0776",
 CellTags->"KeySelect"]
}, Open  ]],
Cell[CellGroupData[{
Cell[694194, 13891, 394, 12, 44, "Input",ExpressionUUID->"e0d7e2f7-3a56-4eff-81ad-41385c25b733",
 CellTags->"KeyTake"],
Cell[694591, 13905, 273, 7, 50, "Output",ExpressionUUID->"dd6562f8-7f15-4fcf-8ea2-38df24c85584",
 CellTags->"KeyTake"]
}, Open  ]],
Cell[CellGroupData[{
Cell[694901, 13917, 436, 13, 44, "Input",ExpressionUUID->"76b18033-82fe-4f88-8020-a10923d0099b",
 CellTags->"KeyDrop"],
Cell[695340, 13932, 273, 7, 50, "Output",ExpressionUUID->"40b841e8-bf76-462c-a623-9d4f8ff1c601",
 CellTags->"KeyDrop"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[695662, 13945, 84, 0, 136, "Section",ExpressionUUID->"4737779a-1df6-4a30-904b-1bb2b89aaa61"],
Cell[CellGroupData[{
Cell[695771, 13949, 118, 0, 46, "Item",ExpressionUUID->"d1c959d9-61d0-42db-87a0-18832e03a297"],
Cell[695892, 13951, 437, 10, 38, "Subitem",ExpressionUUID->"a3fbd9c7-4621-4f77-8b42-8e1a89806d7e"],
Cell[696332, 13963, 428, 10, 38, "Subitem",ExpressionUUID->"e27fa8c8-bb4b-4104-be63-4950124a1427"],
Cell[696763, 13975, 437, 10, 38, "Subitem",ExpressionUUID->"6aa451ed-8c7a-4364-9be8-d763335cca9c"],
Cell[697203, 13987, 453, 10, 38, "Subitem",ExpressionUUID->"d6757f74-4aec-4042-b27a-6f8b7e9d3aac"],
Cell[697659, 13999, 416, 10, 38, "Subitem",ExpressionUUID->"a11e90fc-7987-4b80-93d1-d3f5825b4191"]
}, Open  ]],
Cell[CellGroupData[{
Cell[698112, 14014, 92, 0, 46, "Item",ExpressionUUID->"68ef8a4f-26df-442e-b22f-9a446b0747e8"],
Cell[698207, 14016, 317, 7, 38, "Subitem",ExpressionUUID->"ae502c1a-75e5-4c8d-97e0-ce8f2529b18e"],
Cell[698527, 14025, 316, 7, 38, "Subitem",ExpressionUUID->"ad7f0f15-57da-42d9-9a6a-1c70da85c0c6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[698892, 14038, 83, 0, 136, "Section",ExpressionUUID->"638c0194-6b8a-4f3e-bce2-a2ba1b830527"],
Cell[698978, 14040, 148, 2, 46, "ItemNumbered",ExpressionUUID->"e1c56eee-d928-428a-9c7c-5644fbabba81"],
Cell[699129, 14044, 1673, 38, 169, "Text",ExpressionUUID->"21c796b2-137e-41b6-a25a-2081b9dcc804",
 CellTags->"CYU"],
Cell[700805, 14084, 1778, 42, 132, "Text",ExpressionUUID->"e22bd11e-ff99-4634-baee-125ead514b5b",
 CellTags->"CYU"],
Cell[CellGroupData[{
Cell[702608, 14130, 132, 0, 46, "ItemNumbered",ExpressionUUID->"36dd8264-7a6e-4346-9e9a-2c2b4d683a95"],
Cell[CellGroupData[{
Cell[702765, 14134, 600, 19, 74, "Input",ExpressionUUID->"de67dfc0-1c29-44ae-8719-c79537320aa7"],
Cell[703368, 14155, 286, 8, 52, "Output",ExpressionUUID->"a701e705-a7a2-47e2-95b8-986696bcb22f"],
Cell[703657, 14165, 286, 8, 52, "Output",ExpressionUUID->"5f714988-9cc5-4a3b-aa68-e768c461ac36"]
}, Open  ]]
}, Open  ]],
Cell[703970, 14177, 1816, 41, 99, "Text",ExpressionUUID->"ff1745f7-2254-4600-8c87-a41fe658a8f3",
 CellTags->"CYU"],
Cell[705789, 14220, 1822, 43, 132, "Text",ExpressionUUID->"26433b94-6125-481a-a22d-7823f3815bc2",
 CellTags->"CYU"],
Cell[CellGroupData[{
Cell[707636, 14267, 129, 0, 46, "ItemNumbered",ExpressionUUID->"1077b561-72e7-46aa-9186-67b19d402160"],
Cell[707768, 14269, 193, 4, 44, "Input",ExpressionUUID->"e34b53b5-a0a5-495c-98ab-5aa9c7b1d7c0"]
}, Open  ]],
Cell[707976, 14276, 212, 3, 83, "Text",ExpressionUUID->"3088a881-d026-4a77-afc2-ae42c979a47d"],
Cell[708191, 14281, 1642, 39, 136, "Text",ExpressionUUID->"c0e9cb51-2429-4901-89ee-82e8e4196dfc",
 CellTags->"CYU"],
Cell[709836, 14322, 1806, 43, 132, "Text",ExpressionUUID->"2c8dafea-0af6-4a8d-aa98-4dca81f9fd70",
 CellTags->"CYU"],
Cell[711645, 14367, 229, 5, 46, "ItemNumbered",ExpressionUUID->"e0a5cb24-1404-4761-941a-78d76002a81e"],
Cell[711877, 14374, 1961, 47, 136, "Text",ExpressionUUID->"4747a4c4-9b81-4aae-9855-92953c71f178",
 CellTags->"CYU"],
Cell[CellGroupData[{
Cell[713863, 14425, 219, 6, 44, "Input",ExpressionUUID->"5f10082e-d056-4007-8580-75f20cad51d8"],
Cell[714085, 14433, 216, 6, 52, "Output",ExpressionUUID->"aee6b4f8-e312-4034-a4e4-a0a8741e4d60"]
}, Open  ]],
Cell[714316, 14442, 1733, 41, 132, "Text",ExpressionUUID->"896f5693-eaa9-4c6c-a918-569bc1e63444",
 CellTags->"CYU"],
Cell[CellGroupData[{
Cell[716074, 14487, 115, 0, 46, "ItemNumbered",ExpressionUUID->"0b76d2c5-3e6f-4502-812c-e4b40131dbf6"],
Cell[CellGroupData[{
Cell[716214, 14491, 268, 8, 44, "Input",ExpressionUUID->"7aad4d0a-8704-4fbc-8dd8-039e69980a26"],
Cell[716485, 14501, 660, 11, 111, "Output",ExpressionUUID->"0e71eead-7b70-461f-9f53-589d08f2c68b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[717182, 14517, 243, 7, 44, "Input",ExpressionUUID->"744c68e7-7a75-42e0-844e-6db7bc58e999"],
Cell[717428, 14526, 398, 8, 80, "Output",ExpressionUUID->"017a1a08-986f-409c-83e4-10ab5bb941e4"]
}, Open  ]]
}, Open  ]],
Cell[717853, 14538, 1818, 41, 136, "Text",ExpressionUUID->"f89e65e6-57d3-4bdb-ad6b-8be74083fbec",
 CellTags->"CYU"],
Cell[719674, 14581, 1772, 42, 132, "Text",ExpressionUUID->"b0bb2760-9a6a-445e-8310-0729757e9b1a",
 CellTags->"CYU"],
Cell[CellGroupData[{
Cell[721471, 14627, 182, 3, 46, "ItemNumbered",ExpressionUUID->"32a80aae-3ac4-4847-b179-c7daecc1669b"],
Cell[CellGroupData[{
Cell[721678, 14634, 431, 13, 74, "Input",ExpressionUUID->"11c477c1-8086-44a7-8fee-82643f35ffad"],
Cell[722112, 14649, 536, 9, 50, "Output",ExpressionUUID->"81998f85-084a-4ef9-838b-1c99ec26cb18"]
}, Open  ]]
}, Open  ]],
Cell[722675, 14662, 2503, 58, 169, "Text",ExpressionUUID->"06fb626c-5b8c-453b-8ef1-d3c8ddba0056",
 CellTags->"CYU"],
Cell[725181, 14722, 2027, 47, 132, "Text",ExpressionUUID->"ad9b09da-6468-4cf5-82e0-d7b47d57979a",
 CellTags->"CYU"],
Cell[CellGroupData[{
Cell[727233, 14773, 244, 6, 46, "ItemNumbered",ExpressionUUID->"36cc8a7a-3eb2-4d7f-ae54-e2d8e6927e64"],
Cell[CellGroupData[{
Cell[727502, 14783, 215, 5, 44, "Input",ExpressionUUID->"9b9721a3-61b2-44db-9c28-f1605fc5e33b"],
Cell[727720, 14790, 2259, 32, 233, "Output",ExpressionUUID->"70b07279-8cdb-4a70-8cbf-5d0447cfd71e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[730016, 14827, 215, 5, 74, "Input",ExpressionUUID->"d75c5b41-d9ef-45a2-9da3-e9ce5ec204b6"],
Cell[730234, 14834, 2399, 34, 295, "Output",ExpressionUUID->"3c3d1227-831c-4c07-a055-6bf8e25bf6bb"]
}, Open  ]]
}, Open  ]],
Cell[732660, 14872, 1987, 46, 136, "Text",ExpressionUUID->"ddda4ce9-4c39-4137-9bb6-9a88e5215a89",
 CellTags->"CYU"],
Cell[734650, 14920, 1669, 39, 132, "Text",ExpressionUUID->"2b3b094c-8f28-45ae-9bcb-21b5652e1c88",
 CellTags->"CYU"],
Cell[736322, 14961, 381, 6, 76, "ItemNumbered",ExpressionUUID->"4e57228b-7fa0-42d7-b909-6e6c11f78fb5"],
Cell[736706, 14969, 2138, 49, 99, "Text",ExpressionUUID->"11b3b001-f2dc-4b3b-835c-47f8b8738c30",
 CellTags->"CYU"],
Cell[738847, 15020, 1972, 46, 132, "Text",ExpressionUUID->"bb3c97af-9eee-4fd3-82df-318a5bf118b9",
 CellTags->"CYU"],
Cell[CellGroupData[{
Cell[740844, 15070, 390, 10, 44, "Input",ExpressionUUID->"cf4e0508-2b90-4c05-849c-4e5d62587c73"],
Cell[741237, 15082, 344, 7, 50, "Output",ExpressionUUID->"d2e920c8-96eb-4a06-a1c0-07698e6483d3"]
}, Open  ]],
Cell[741596, 15092, 2023, 47, 99, "Text",ExpressionUUID->"b2eebacb-d9fb-4714-ba8e-52805e796c59",
 CellTags->"CYU"],
Cell[743622, 15141, 227, 5, 46, "ItemNumbered",ExpressionUUID->"232590ea-b2bf-442a-9526-3fb28e627283"],
Cell[743852, 15148, 2252, 52, 99, "Text",ExpressionUUID->"46dc54f1-f00b-4fac-8de1-cb9011743d6e",
 CellTags->"CYU"],
Cell[746107, 15202, 1936, 46, 132, "Text",ExpressionUUID->"9a1dbeeb-d5aa-4cae-ba1f-b36d65999e35",
 CellTags->"CYU"],
Cell[CellGroupData[{
Cell[748068, 15252, 369, 9, 44, "Input",ExpressionUUID->"d648803e-c7ad-40a4-9183-e8cacffe2de3"],
Cell[748440, 15263, 291, 7, 50, "Output",ExpressionUUID->"b41db78e-4f8f-4a04-876d-b8c717edada3"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

