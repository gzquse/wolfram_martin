(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    756265,      16038]
NotebookOptionsPosition[    682517,      14626]
NotebookOutlinePosition[    730701,      15629]
CellTagsIndexPosition[    730632,      15624]
WindowTitle->Syntax and Expressions
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Syntax and Expressions", "Subtitle",ExpressionUUID->"3caa86fa-3856-4e96-ab4e-036bc12d48a6"],

Cell[CellGroupData[{

Cell["Learning Objectives", "Section",ExpressionUUID->"2bde8e48-a6ec-4b16-b4de-eac144d4190e"],

Cell["\<\
The fundamental building blocks of Wolfram Language and how they can be put \
together to build more complex code. \
\>", "Text",ExpressionUUID->"d6a76824-64a8-48eb-9a3c-c6e87a9dbc5e"],

Cell[CellGroupData[{

Cell["Atoms", "Subsection",ExpressionUUID->"626d25ea-1f38-4b31-9947-99aa2d2d4a4d"],

Cell["Symbols: names of variables and functions", "Item",ExpressionUUID->"55a5e0a2-7356-4d7c-8e04-013f7b17bbf6"],

Cell[TextData[{
 "Numbers: ",
 ButtonBox["Integer",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Integer.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Integer.html"],
 ", ",
 ButtonBox["Real",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Real.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Real.html"],
 ", ",
 ButtonBox["Rational",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Rational.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Rational.html"],
 ", ",
 ButtonBox["Complex",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Complex.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Complex.html"]
}], "Item",ExpressionUUID->"422629d2-d5ea-4795-b42f-0e7f05e026ea"],

Cell["Strings", "Item",ExpressionUUID->"d52bc262-39ca-45dd-9d6f-53e9a10111d3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Composite Expressions", "Subsection",ExpressionUUID->"8c066228-7c56-4bb7-ad8a-4263dcc2b62d"],

Cell["\<\
Built out of components (atomic or composite expressions themselves) \
\>", "Item",ExpressionUUID->"a8121ddc-7953-4961-b1a2-e6b8da5c2c8b"],

Cell["Simple rules that hold the components together", "Item",ExpressionUUID->"f901c5f8-880d-45f9-b0ed-b90dfa2c737c"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Structure of Expressions", "Subsection",ExpressionUUID->"f163eb3e-82e7-47ac-bdaf-8d85681f4648"],

Cell["\<\
Analyze and understand the structure of expressions with the help of useful \
tools (built-in functions from the language itself)\
\>", "Item",ExpressionUUID->"5cb0b6ff-91ee-4d75-974a-d3bbc607c1d4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Atomic Expressions", "Section",ExpressionUUID->"7359bcc4-6362-4e7a-834f-309641431b6f"],

Cell["\<\
Atoms are the basic building blocks from which all other expressions are \
constructed.\
\>", "Text",ExpressionUUID->"46de92de-2337-4f1a-a4ae-8e8aafbd35ad"],

Cell[CellGroupData[{

Cell["Symbol", "Subsection",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"b622d4a9-37ef-4b30-a9da-3b965124f0db"],

Cell["\<\
Consists of a concatenation of letters, numbers and other characters \
\>", "Item",ExpressionUUID->"e07b5609-ec64-49b3-ae07-af7687a858e7"],

Cell["Cannot begin with a number", "Item",ExpressionUUID->"fe6859d9-57c4-4031-8132-c7630fb33426"],

Cell[CellGroupData[{

Cell[TextData[{
 "Cannot begin with certain reserved special characters (E.g. ",
 StyleBox["!", "Input"],
 ", ",
 StyleBox["@", "Input"],
 ", ",
 StyleBox["#", "Input"],
 ", ",
 StyleBox["%", "Input"],
 ", ",
 StyleBox["^", "Input"],
 ", ",
 StyleBox["+", "Input"],
 ", ",
 StyleBox["-", "Input"],
 ", ",
 StyleBox["_", "Input"],
 ", ",
 StyleBox["=", "Input"],
 ", ",
 StyleBox["&", "Input"],
 ", ",
 StyleBox["(", "Input"],
 ", ",
 StyleBox[")", "Input"],
 ", ",
 StyleBox["{", "Input"],
 ", ",
 StyleBox["}", "Input"],
 ", ",
 StyleBox["[", "Input"],
 ", ",
 StyleBox["]", "Input"],
 ", etc.)"
}], "Item",ExpressionUUID->"3e756500-e640-4549-ade0-f968c38c3fcf"],

Cell[BoxData["Plot"], "Input",
 CellLabel->
  "In[437]:=",ExpressionUUID->"651c9393-8780-4a4b-86d3-ab541d8d8a5f"],

Cell[BoxData["x2"], "Input",
 CellLabel->
  "In[438]:=",ExpressionUUID->"7936401e-06c9-43c8-ab69-2a0a14242ee4"],

Cell[BoxData["String"], "Input",
 CellLabel->
  "In[439]:=",ExpressionUUID->"f42a189b-1920-4398-827a-4fd9ce6be9d8"],

Cell[CellGroupData[{

Cell[BoxData["$Version"], "Input",
 CellLabel->
  "In[409]:=",ExpressionUUID->"3beb4e44-2e34-4395-aece-59fb6856505c"],

Cell[BoxData["\<\"14.1.0 for Mac OS X ARM (64-bit) (July 16, 2024)\"\>"], \
"Output",
 CellLabel->
  "Out[409]=",ExpressionUUID->"c04f56ab-0f1a-4a35-b14d-5bcd359d0caf"]
}, Open  ]],

Cell[BoxData["\[Alpha]\[Beta]\[Gamma]"], "Input",
 CellLabel->
  "In[441]:=",ExpressionUUID->"a91402bc-4d4b-45e2-a68a-842e81b1716a"]
}, Open  ]],

Cell[TextData[{
 "\nSyntax coloring changes from ",
 StyleBox["Blue", "Input",
  FontColor->RGBColor[0., 0., 1.]],
 " to ",
 StyleBox["Black", "Input"],
 " when a symbol name is recognized.\n"
}], "Text",ExpressionUUID->"18b7e7bb-9929-4006-b697-e41ae3925dfa"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Number", "Subsection",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"d3a73489-d0f9-4cf7-9703-e61c9e64400d"],

Cell[CellGroupData[{

Cell["Integer: any integer number written without a decimal point", "Item",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"45d9ed3d-e548-4168-83e2-085036afa3a4"],

Cell[BoxData["3"], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[442]:=",ExpressionUUID->"7c265fec-2d3f-45e2-8a0a-025111f32e3f"],

Cell[BoxData["5"], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[443]:=",ExpressionUUID->"ce9bfc2b-0fdc-480c-973d-cd5639ab19a6"],

Cell[BoxData[
 RowBox[{"-", "26"}]], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[444]:=",ExpressionUUID->"d28aab2f-fea9-4886-8f84-77b3aa49ce69"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Real: number containing decimal points", "Item",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"18c3a64c-4b51-4b10-ba0d-dbc1f11a620b"],

Cell[BoxData["2.3"], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[445]:=",ExpressionUUID->"32763410-78d9-4bed-86a7-d187667760c0"],

Cell[BoxData[
 RowBox[{"5.8", " "}]], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[446]:=",ExpressionUUID->"5198fcda-1061-4310-a891-dd0499bab4cc"],

Cell[BoxData[
 RowBox[{"-", "69.00"}]], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[447]:=",ExpressionUUID->"5fa6194e-a41b-4b5f-8882-5dd699eb0671"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Rational: a quotient of integers", "Item",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"a848255b-751a-47d6-9f9e-b0baec95b545"],

Cell[BoxData[
 RowBox[{"3", "/", "4"}]], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[448]:=",ExpressionUUID->"00b1d8dc-fa03-49f2-9268-fdae60dce261"],

Cell[BoxData[
 RowBox[{"27", "/", "8"}]], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[449]:=",ExpressionUUID->"4598ea4e-8069-45d3-819b-632e673335d6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[{
 "Complex: a sum of a real and an imaginary number (",
 StyleBox["I",
  FontWeight->"Bold"],
 " represents ",
 Cell[BoxData[
  FormBox[
   SqrtBox[
    RowBox[{"-", "1"}]], TraditionalForm]], "None",ExpressionUUID->
  "74c2ef30-7866-4835-9b87-7b1dc5a9beec"],
 ")"
}], "Item",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"6d960057-9a52-4639-8b5c-d6d5d38e0da0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"4", "+", 
  RowBox[{"3", " ", "I"}]}], "\[IndentingNewLine]", 
 RowBox[{"28", "+", 
  RowBox[{"5.7", " ", "I", " "}]}]}], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[413]:=",ExpressionUUID->"8dc9c5c5-def9-4209-bf1e-56eb0974419e"],

Cell[BoxData[
 RowBox[{"4", "+", 
  RowBox[{"3", " ", "\[ImaginaryI]"}]}]], "Output",
 CellLabel->
  "Out[413]=",ExpressionUUID->"68130d4a-ed63-42be-b355-160cb1942c40"],

Cell[BoxData[
 RowBox[{"28.`", "\[VeryThinSpace]", "+", 
  RowBox[{"5.7`", " ", "\[ImaginaryI]"}]}]], "Output",
 CellLabel->
  "Out[414]=",ExpressionUUID->"43d21e5f-ea36-47a2-8ca2-ca226d69b6fa"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["String", "Subsection",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"64eb39e5-0e72-4dda-9df8-2fccf23004a6"],

Cell["Any expression enclosed in double quotes", "Text",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"826a9419-8f3b-4ce9-878b-ac2a07742333"],

Cell[CellGroupData[{

Cell[BoxData["\"\<This is a string\>\""], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[418]:=",ExpressionUUID->"3f83cad9-57e3-44f3-9a8d-d401e5fa09d1"],

Cell[BoxData["\<\"This is a string\"\>"], "Output",
 CellLabel->
  "Out[418]=",ExpressionUUID->"6a9eb3bb-322a-4b90-a1fd-56708706db54"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[GridBox[{
   {"\"\<C3PO\>\""},
   {"\[IndentingNewLine]"},
   {"\[Placeholder]"}
  }]], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[420]:=",ExpressionUUID->"b3311f71-fa13-4f53-8aff-984e4aa00d3d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "\<\"C3PO\"\>", "}"}], ",", 
   RowBox[{"{", "Null", "}"}], ",", 
   RowBox[{"{", "\[Placeholder]", "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[420]=",ExpressionUUID->"b955d6b2-58bd-4d0a-8696-2502863198cf"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Special Atoms", "Subsection",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"7172f126-734f-4c4a-95bb-5e3a7d7a533d"],

Cell["\<\
Wolfram Language has a few other special kinds of expressions that are \
treated as atoms. Here are three examples:\
\>", "Text",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"ffc325fe-d2ee-4ca4-8a44-98c5f26e859c"],

Cell[TextData[ButtonBox["SparseArray",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/ref/SparseArray.html"], None},
 ButtonNote->
  "https://reference.wolfram.com/language/ref/SparseArray.html"]], "Text",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"6574c708-6523-4c08-9c51-424cc06bd4de"],

Cell["\<\
A way of storing arrays where a large fraction of the entries have the same \
value:\
\>", "Text",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"c4cee20a-df46-4a02-b2b9-b2aa36273e55"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"SparseArray", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"i_", ",", "i_"}], "}"}], "\[RuleDelayed]", 
    RowBox[{"RandomInteger", "[", "8", "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}]}], "]"}]], "Input",
 ShowGroupOpener->"Inline",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[421]:=",ExpressionUUID->"be61ab19-8641-43fc-9960-7f86dc7b54d3"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["SparseArray",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"], 
               ImageSizeCache -> {16.04773828125, {0., 16.04773828125}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = True), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQ26p8d9wspXP2c4wXbTH/ccX+xSLFx4GrXtmTKr6z
28B155YX9jfcl6+rmfbW/mRE7r/4r+9JNufvt9IHcwQv2fPPPnGGVe+p/aWC
U3dqlEk3Z6iIAwDtPc59
              "], {{0, 0}, {4, 4}}, {0, 1}], AspectRatio -> 1, Axes -> False, 
             Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
               "DefaultBoundaryStyle" -> Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}], "SummaryItem"]}]}}, 
             AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], True -> 
        GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"], 
               ImageSizeCache -> {16.04773828125, {0., 16.04773828125}}], 
              Appearance -> None, BaseStyle -> {}, 
              ButtonFunction :> (Typeset`open$$ = False), Evaluator -> 
              Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[
             RasterBox[CompressedData["
1:eJxTTMoPSmVmYGBggWIQ26p8d9wspXP2c4wXbTH/ccX+xSLFx4GrXtmTKr6z
28B155YX9jfcl6+rmfbW/mRE7r/4r+9JNufvt9IHcwQv2fPPPnGGVe+p/aWC
U3dqlEk3Z6iIAwDtPc59
              "], {{0, 0}, {4, 4}}, {0, 1}], AspectRatio -> 1, Axes -> False, 
             Frame -> False, FrameLabel -> {None, None}, FrameStyle -> 
             Directive[
               Opacity[0.5], 
               Thickness[Tiny], 
               RGBColor[0.368417, 0.506779, 0.709798]], 
             FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
             Directive[
               GrayLevel[0.5, 0.4]], ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}], 
             Method -> {
              "GridLinesInFront" -> True, "AxisPadding" -> Scaled[0.02], 
               "DefaultBoundaryStyle" -> Automatic, 
               "DefaultGraphicsInteraction" -> {
                "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
                 "Effects" -> {
                  "Highlight" -> {"ratio" -> 2}, 
                   "HighlightPoint" -> {"ratio" -> 2}, 
                   "Droplines" -> {
                    "freeformCursorMode" -> True, 
                    "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
               "DefaultPlotStyle" -> Automatic, "DomainPadding" -> 
               Scaled[0.02], "RangePadding" -> Scaled[0.05]}], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Specified elements: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["4", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Default: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Density: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["0.25`", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Elements:\"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["\"\"", "SummaryItem"]}]}, {
               TagBox[
                TagBox[
                 GridBox[{{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"1", ",", "1"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "0", BaselinePosition -> Baseline, ContentPadding -> 
                    False, FrameMargins -> 0, 
                    ImageSize -> {{1, 300}, Automatic}, StripOnInput -> True],
                     LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "0", BaselinePosition -> Baseline, ContentPadding -> 
                    False, FrameMargins -> 0, 
                    ImageSize -> {{1, 300}, Automatic}, StripOnInput -> True],
                     LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"3", ",", "3"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "1", BaselinePosition -> Baseline, ContentPadding -> 
                    False, FrameMargins -> 0, 
                    ImageSize -> {{1, 300}, Automatic}, StripOnInput -> True],
                     LineBreakWithin -> False]}]}, {
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"4", ",", "4"}], "}"}], "\[Rule]", 
                    StyleBox[
                    PaneBox[
                    "2", BaselinePosition -> Baseline, ContentPadding -> 
                    False, FrameMargins -> 0, 
                    ImageSize -> {{1, 300}, Automatic}, StripOnInput -> True],
                     LineBreakWithin -> False]}]}}, DefaultBaseStyle -> 
                  "Column", GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                  GridBoxItemSize -> {
                   "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                 "Column"], "SummaryItem"]}}, AutoDelete -> False, 
             BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {
              "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, AutoDelete -> 
          False, BaselinePosition -> {1, 1}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  SparseArray[
  Automatic, {4, 4}, 0, {
   1, {{0, 1, 2, 3, 4}, {{1}, {2}, {3}, {4}}}, {0, 0, 1, 2}}],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "Out[421]=",ExpressionUUID->"c0fdc8c6-879a-4906-ad40-da74af7fa0ee"],

Cell[BoxData[
 RowBox[{"AtomQ", "[", "%", "]"}]], "Input",
 ShowGroupOpener->"Inline",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "In[422]:=",ExpressionUUID->"549ff5ed-5ed1-4fde-a265-b7988b839de8"],

Cell[BoxData["True"], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.},
 CellLabel->
  "Out[422]=",ExpressionUUID->"3dad389f-0e96-4d2e-8640-37bea96c0f16"]
}, Open  ]],

Cell[TextData[ButtonBox["Graph",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/ref/Graph.html"], None},
 ButtonNote->"https://reference.wolfram.com/language/ref/Graph.html"]], "Text",\

 ShowGroupOpener->
  "Inline",ExpressionUUID->"7158a1ae-791c-4602-890c-b2d7e969388b"],

Cell["\<\
A collection of objects, usually called vertices, and the relationships \
between pairs of vertices, called edges:\
\>", "Text",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"9ac217b7-6bc8-4c00-b72c-ddacb90b06b6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"PetersenGraph", "[", 
  RowBox[{"73", ",", "23", ",", 
   RowBox[{"ImageSize", "\[Rule]", "Small"}]}], "]"}]], "Input",
 ShowGroupOpener->"Inline",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[423]:=",ExpressionUUID->"6fe381b6-7b61-46d3-a7ba-d32030ecb0a0"],

Cell[BoxData[
 GraphicsBox[
  NamespaceBox["NetworkGraphics",
   DynamicModuleBox[{Typeset`graph = HoldComplete[
     Graph[{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
       20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37,
       38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
       56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
       74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91,
       92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
       108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 
      122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 
      136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146}, {
      Null, CompressedData["
1:eJwVxec6KgAAANC29p7aEZUWFWloGi20tafRRpOMdpRQr3df5t7743yHn635
siAAAPDnn/8D6UAV0AligNQgF3gdrAG7IUzIPsQDZUEPoOcwNkwLu1jjrB2u
XcK5cB3ci+Ah9Agfko80IP0oAcqICqA30EfoIGYTY8KEsEKsGRvGbeEsuCv8
Nt6KjxBEBBshShQT7cQYSUI6JsXJO+QTcoIipZxSklQZ9YyaoslpDlqarqBn
GEpGdn13PcfcY+ZZKtY1W82+4Wg4t9x97h3vgFfga/lFwaGgtKHbKG/qNytC
g7C6ZdyqbR9t34tMogexWfwosUjqO9adhtQmbcrsspb8WN5WnCg6ylPl0+7Z
7vOeY6+relG/at723w962v7hQDfUjwxj4+Roavowf1pm1rnty744/j75Of09
WzpWTpdz5XK7PZ7z84uLy0uv1+fz+wOBYDAUCoevriKRaDQWi8cTiWQylUqn
M5lsNpfL56+vb25ub+/uCoVisVQqlyuVarVWu79/eHh8rNcbjWaz1Wq3O52n
p+fnbvfl5fX17e39vdfr9weD4XA0Go8nk+n04+Pzczabz7++Fovv75+f39/l
cvUXNKCARw==
       "]}, {ImageSize -> Small, VertexCoordinates -> CompressedData["
1:eJw11H9MlHUcB3BEF0hRLcBhuCBlUE7DVrRZwedIE/7QVEZxpbQyMcJEQWuG
CyOU0nI4fmSHoaYDhXJTGaeG9kFITTDlpyMP6cDj5MfdPcjx447j7qn4vr+3
3W7P9uy57/P5vN+vZzdsTUz19vLyKvzv+//vZGyUemOGnrID/qr5tUehpZZw
P8VylR4Je32tJV+h3MYubU1yM13V7WhLH7bRt3Pvljt1HfTq7Es5b4baaMFX
7U0rq++S5s7Ni75BVrocbGyYVfoPpUTmh51uG6IVqbUXNs/vpVOte64XpQzS
qQrTM5+/baLYwN8u5tb0U3Ccfcv4h2aaOfv7C6XdZkr0de73W95PJbO2J6zr
MlHx0dr6MMcA7QpaF1R4rpf8zTsPeLKH6Hfz6lptqpH85+04fe2GhYJKNd7B
IwY6UHbuJ0+PlRbOSIv8xnSH9IuPUNEVGy08nHOi8JcWqswob+vapNCCtDU9
muN/0r5jm5463qxQVE7oY9ova+nkhqy8pz0KfWZfZVjj+wNdnxPnUGwKtSRW
LzmWd4Yz6/ZH0QmFKjQxgzOjGzj2RtORQyEKRXtXa5tn3uJuS8qGSa2NPor9
40zXynZOLX/unc71Vqovy09Pzvyb1Zo97z3xvIXydRkv6FK7+Ufj7kYzD9K9
sIKQ0IM9/GlW9MJHwwfoyvbdjsib9zkyZnPQPu0DClh21FXV28fmCf+d1z/o
o/bVrU9W337AVS/nhuRq7hPvTavXFQzwi3tdxZddRsoMei388dAhTkupXF60
+B75fFw1L2SXhVuTd/u8v6iT4tcWqYt+tvLZd682JLtbSW84vG1OgY0Tzn/y
xsmkJgq4XZIXuEzht/wa3S3ZdbTKGB7QWqtw0uWvD3n7VFBGWVJ8ukPhJeKa
5fUKcT/L+zXieSyfd1r8H5/H/90S5+EEnGejOC/74rxR4n04C+9zSrwv1+F9
TWIe3IF5RIh5cSDmtUXMkxnz1Il5swHz9tJP74PzsA/si+W+sE/eiH1i3/wK
9r1N5IFPIg/IC7ciL8gTb0WekDdejLwhjzwfeUReWeYVeWaZZ+SdA5F39IFl
H0pEXzgbfUGfuBh9miv6xt7oW6XoI8egj/Giryz7Wif6zOvR5wjRdyb0/Tvh
AS+FB3uEFyy9iBOesPTEj6a94S/gjc/6wJciKs5e8pr+DJPw6Bo8UuFRBzxS
4ZERHnngUR888sCjQXjkhkcKPHLBoxF4NAmPRuGRAx6Nw6NxzM8Bj0bhkRMe
jWD+Lng0jP1MwaMh7M8Nj8zYrwce9WD/KjzqRD5UeNQEj1R4VAGPVHhUB49U
eNSGfKrwqBv59cAjE/LthkcD8GgKHtng0SQ8egiPnPDIDo8m4NEYPBqDRxPw
yA6PnPBoGB654JEVHk3Bo3545IZHvfDIA48M8EiFR83wSIVHenikwiM9y2vh
UTPL+4VHBpbPEx71wiMPPOqHR254ZIVHU/BoGB654JEdHjnh0Rg8moBHE/Bo
DB454ZEdHk3Co4fwaAoe2eS+WO4L+4RHJrlveNQNj1R41AaPVHhUB49UeFQh
8waPmmQe4VGnzCvLvCLPLPOMvMOjIdkHln0QHjnh0YjsEzwahUfj8GgcHo3C
Iwc8GmHZV+GRAo9c8GgQHrnhUR888sAjI0svhEcdLD0RHl2DRyo8ugKPvDT/
AiMY5oc=
        "]}]]}, 
    TagBox[GraphicsGroupBox[GraphicsComplexBox[CompressedData["
1:eJw11H9MlHUcB3BEF0hRLcBhuCBlUE7DVrRZwedIE/7QVEZxpbQyMcJEQWuG
CyOU0nI4fmSHoaYDhXJTGaeG9kFITTDlpyMP6cDj5MfdPcjx447j7qn4vr+3
3W7P9uy57/P5vN+vZzdsTUz19vLyKvzv+//vZGyUemOGnrID/qr5tUehpZZw
P8VylR4Je32tJV+h3MYubU1yM13V7WhLH7bRt3Pvljt1HfTq7Es5b4baaMFX
7U0rq++S5s7Ni75BVrocbGyYVfoPpUTmh51uG6IVqbUXNs/vpVOte64XpQzS
qQrTM5+/baLYwN8u5tb0U3Ccfcv4h2aaOfv7C6XdZkr0de73W95PJbO2J6zr
MlHx0dr6MMcA7QpaF1R4rpf8zTsPeLKH6Hfz6lptqpH85+04fe2GhYJKNd7B
IwY6UHbuJ0+PlRbOSIv8xnSH9IuPUNEVGy08nHOi8JcWqswob+vapNCCtDU9
muN/0r5jm5463qxQVE7oY9ova+nkhqy8pz0KfWZfZVjj+wNdnxPnUGwKtSRW
LzmWd4Yz6/ZH0QmFKjQxgzOjGzj2RtORQyEKRXtXa5tn3uJuS8qGSa2NPor9
40zXynZOLX/unc71Vqovy09Pzvyb1Zo97z3xvIXydRkv6FK7+Ufj7kYzD9K9
sIKQ0IM9/GlW9MJHwwfoyvbdjsib9zkyZnPQPu0DClh21FXV28fmCf+d1z/o
o/bVrU9W337AVS/nhuRq7hPvTavXFQzwi3tdxZddRsoMei388dAhTkupXF60
+B75fFw1L2SXhVuTd/u8v6iT4tcWqYt+tvLZd682JLtbSW84vG1OgY0Tzn/y
xsmkJgq4XZIXuEzht/wa3S3ZdbTKGB7QWqtw0uWvD3n7VFBGWVJ8ukPhJeKa
5fUKcT/L+zXieSyfd1r8H5/H/90S5+EEnGejOC/74rxR4n04C+9zSrwv1+F9
TWIe3IF5RIh5cSDmtUXMkxnz1Il5swHz9tJP74PzsA/si+W+sE/eiH1i3/wK
9r1N5IFPIg/IC7ciL8gTb0WekDdejLwhjzwfeUReWeYVeWaZZ+SdA5F39IFl
H0pEXzgbfUGfuBh9miv6xt7oW6XoI8egj/Giryz7Wif6zOvR5wjRdyb0/Tvh
AS+FB3uEFyy9iBOesPTEj6a94S/gjc/6wJciKs5e8pr+DJPw6Bo8UuFRBzxS
4ZERHnngUR888sCjQXjkhkcKPHLBoxF4NAmPRuGRAx6Nw6NxzM8Bj0bhkRMe
jWD+Lng0jP1MwaMh7M8Nj8zYrwce9WD/KjzqRD5UeNQEj1R4VAGPVHhUB49U
eNSGfKrwqBv59cAjE/LthkcD8GgKHtng0SQ8egiPnPDIDo8m4NEYPBqDRxPw
yA6PnPBoGB654JEVHk3Bo3545IZHvfDIA48M8EiFR83wSIVHenikwiM9y2vh
UTPL+4VHBpbPEx71wiMPPOqHR254ZIVHU/BoGB654JEdHjnh0Rg8moBHE/Bo
DB454ZEdHk3Co4fwaAoe2eS+WO4L+4RHJrlveNQNj1R41AaPVHhUB49UeFQh
8waPmmQe4VGnzCvLvCLPLPOMvMOjIdkHln0QHjnh0YjsEzwahUfj8GgcHo3C
Iwc8GmHZV+GRAo9c8GgQHrnhUR888sAjI0svhEcdLD0RHl2DRyo8ugKPvDT/
AiMY5oc=
       "], {
        {Hue[0.6, 0.7, 0.5], Opacity[0.7], Arrowheads[0.], 
         ArrowBox[CompressedData["
1:eJwVxec6KgAAANC29p7aEZUWFWloGi20tafRRpOMdpRQr3df5t7743yHn635
siAAAPDnn/8D6UAV0AligNQgF3gdrAG7IUzIPsQDZUEPoOcwNkwLu1jjrB2u
XcK5cB3ci+Ah9Agfko80IP0oAcqICqA30EfoIGYTY8KEsEKsGRvGbeEsuCv8
Nt6KjxBEBBshShQT7cQYSUI6JsXJO+QTcoIipZxSklQZ9YyaoslpDlqarqBn
GEpGdn13PcfcY+ZZKtY1W82+4Wg4t9x97h3vgFfga/lFwaGgtKHbKG/qNytC
g7C6ZdyqbR9t34tMogexWfwosUjqO9adhtQmbcrsspb8WN5WnCg6ylPl0+7Z
7vOeY6+relG/at723w962v7hQDfUjwxj4+Roavowf1pm1rnty744/j75Of09
WzpWTpdz5XK7PZ7z84uLy0uv1+fz+wOBYDAUCoevriKRaDQWi8cTiWQylUqn
M5lsNpfL56+vb25ub+/uCoVisVQqlyuVarVWu79/eHh8rNcbjWaz1Wq3O52n
p+fnbvfl5fX17e39vdfr9weD4XA0Go8nk+n04+Pzczabz7++Fovv75+f39/l
cvUXNKCARw==
          "], 0.03699973800295499]}, 
        {Hue[0.6, 0.2, 0.8], EdgeForm[{GrayLevel[0], Opacity[0.7]}], 
         DiskBox[1, 0.03699973800295499], DiskBox[2, 0.03699973800295499], 
         DiskBox[3, 0.03699973800295499], DiskBox[4, 0.03699973800295499], 
         DiskBox[5, 0.03699973800295499], DiskBox[6, 0.03699973800295499], 
         DiskBox[7, 0.03699973800295499], DiskBox[8, 0.03699973800295499], 
         DiskBox[9, 0.03699973800295499], DiskBox[10, 0.03699973800295499], 
         DiskBox[11, 0.03699973800295499], DiskBox[12, 0.03699973800295499], 
         DiskBox[13, 0.03699973800295499], DiskBox[14, 0.03699973800295499], 
         DiskBox[15, 0.03699973800295499], DiskBox[16, 0.03699973800295499], 
         DiskBox[17, 0.03699973800295499], DiskBox[18, 0.03699973800295499], 
         DiskBox[19, 0.03699973800295499], DiskBox[20, 0.03699973800295499], 
         DiskBox[21, 0.03699973800295499], DiskBox[22, 0.03699973800295499], 
         DiskBox[23, 0.03699973800295499], DiskBox[24, 0.03699973800295499], 
         DiskBox[25, 0.03699973800295499], DiskBox[26, 0.03699973800295499], 
         DiskBox[27, 0.03699973800295499], DiskBox[28, 0.03699973800295499], 
         DiskBox[29, 0.03699973800295499], DiskBox[30, 0.03699973800295499], 
         DiskBox[31, 0.03699973800295499], DiskBox[32, 0.03699973800295499], 
         DiskBox[33, 0.03699973800295499], DiskBox[34, 0.03699973800295499], 
         DiskBox[35, 0.03699973800295499], DiskBox[36, 0.03699973800295499], 
         DiskBox[37, 0.03699973800295499], DiskBox[38, 0.03699973800295499], 
         DiskBox[39, 0.03699973800295499], DiskBox[40, 0.03699973800295499], 
         DiskBox[41, 0.03699973800295499], DiskBox[42, 0.03699973800295499], 
         DiskBox[43, 0.03699973800295499], DiskBox[44, 0.03699973800295499], 
         DiskBox[45, 0.03699973800295499], DiskBox[46, 0.03699973800295499], 
         DiskBox[47, 0.03699973800295499], DiskBox[48, 0.03699973800295499], 
         DiskBox[49, 0.03699973800295499], DiskBox[50, 0.03699973800295499], 
         DiskBox[51, 0.03699973800295499], DiskBox[52, 0.03699973800295499], 
         DiskBox[53, 0.03699973800295499], DiskBox[54, 0.03699973800295499], 
         DiskBox[55, 0.03699973800295499], DiskBox[56, 0.03699973800295499], 
         DiskBox[57, 0.03699973800295499], DiskBox[58, 0.03699973800295499], 
         DiskBox[59, 0.03699973800295499], DiskBox[60, 0.03699973800295499], 
         DiskBox[61, 0.03699973800295499], DiskBox[62, 0.03699973800295499], 
         DiskBox[63, 0.03699973800295499], DiskBox[64, 0.03699973800295499], 
         DiskBox[65, 0.03699973800295499], DiskBox[66, 0.03699973800295499], 
         DiskBox[67, 0.03699973800295499], DiskBox[68, 0.03699973800295499], 
         DiskBox[69, 0.03699973800295499], DiskBox[70, 0.03699973800295499], 
         DiskBox[71, 0.03699973800295499], DiskBox[72, 0.03699973800295499], 
         DiskBox[73, 0.03699973800295499], DiskBox[74, 0.03699973800295499], 
         DiskBox[75, 0.03699973800295499], DiskBox[76, 0.03699973800295499], 
         DiskBox[77, 0.03699973800295499], DiskBox[78, 0.03699973800295499], 
         DiskBox[79, 0.03699973800295499], DiskBox[80, 0.03699973800295499], 
         DiskBox[81, 0.03699973800295499], DiskBox[82, 0.03699973800295499], 
         DiskBox[83, 0.03699973800295499], DiskBox[84, 0.03699973800295499], 
         DiskBox[85, 0.03699973800295499], DiskBox[86, 0.03699973800295499], 
         DiskBox[87, 0.03699973800295499], DiskBox[88, 0.03699973800295499], 
         DiskBox[89, 0.03699973800295499], DiskBox[90, 0.03699973800295499], 
         DiskBox[91, 0.03699973800295499], DiskBox[92, 0.03699973800295499], 
         DiskBox[93, 0.03699973800295499], DiskBox[94, 0.03699973800295499], 
         DiskBox[95, 0.03699973800295499], DiskBox[96, 0.03699973800295499], 
         DiskBox[97, 0.03699973800295499], DiskBox[98, 0.03699973800295499], 
         DiskBox[99, 0.03699973800295499], DiskBox[100, 0.03699973800295499], 
         DiskBox[101, 0.03699973800295499], DiskBox[102, 0.03699973800295499],
          DiskBox[103, 0.03699973800295499], 
         DiskBox[104, 0.03699973800295499], DiskBox[105, 0.03699973800295499],
          DiskBox[106, 0.03699973800295499], 
         DiskBox[107, 0.03699973800295499], DiskBox[108, 0.03699973800295499],
          DiskBox[109, 0.03699973800295499], 
         DiskBox[110, 0.03699973800295499], DiskBox[111, 0.03699973800295499],
          DiskBox[112, 0.03699973800295499], 
         DiskBox[113, 0.03699973800295499], DiskBox[114, 0.03699973800295499],
          DiskBox[115, 0.03699973800295499], 
         DiskBox[116, 0.03699973800295499], DiskBox[117, 0.03699973800295499],
          DiskBox[118, 0.03699973800295499], 
         DiskBox[119, 0.03699973800295499], DiskBox[120, 0.03699973800295499],
          DiskBox[121, 0.03699973800295499], 
         DiskBox[122, 0.03699973800295499], DiskBox[123, 0.03699973800295499],
          DiskBox[124, 0.03699973800295499], 
         DiskBox[125, 0.03699973800295499], DiskBox[126, 0.03699973800295499],
          DiskBox[127, 0.03699973800295499], 
         DiskBox[128, 0.03699973800295499], DiskBox[129, 0.03699973800295499],
          DiskBox[130, 0.03699973800295499], 
         DiskBox[131, 0.03699973800295499], DiskBox[132, 0.03699973800295499],
          DiskBox[133, 0.03699973800295499], 
         DiskBox[134, 0.03699973800295499], DiskBox[135, 0.03699973800295499],
          DiskBox[136, 0.03699973800295499], 
         DiskBox[137, 0.03699973800295499], DiskBox[138, 0.03699973800295499],
          DiskBox[139, 0.03699973800295499], 
         DiskBox[140, 0.03699973800295499], DiskBox[141, 0.03699973800295499],
          DiskBox[142, 0.03699973800295499], 
         DiskBox[143, 0.03699973800295499], DiskBox[144, 0.03699973800295499],
          DiskBox[145, 0.03699973800295499], 
         DiskBox[146, 0.03699973800295499]}}]],
     MouseAppearanceTag["NetworkGraphics"]],
    AllowKernelInitialization->False]],
  DefaultBaseStyle->"NetworkGraphics",
  FormatType->TraditionalForm,
  FrameTicks->None,
  ImageSize->Small]], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "Out[423]=",ExpressionUUID->"fa99da09-8a79-497a-b657-24904b1c43b8"],

Cell[BoxData[
 RowBox[{"AtomQ", "[", "%", "]"}]], "Input",
 ShowGroupOpener->"Inline",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "In[424]:=",ExpressionUUID->"4114d174-99b0-4ed9-b771-dc03200a4935"],

Cell[BoxData["True"], "Output",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.},
 CellLabel->
  "Out[424]=",ExpressionUUID->"5cc5b78e-410e-4968-82c5-0b387925062f"]
}, Open  ]],

Cell[TextData[ButtonBox["Dataset",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/ref/Dataset.html"], None},
 ButtonNote->
  "https://reference.wolfram.com/language/ref/Dataset.html"]], "Text",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"919ddabf-b5e3-4343-a538-f6f22d4afbf0"],

Cell["\<\
A way to represent structured data based on a hierarchy of lists and \
associations:\
\>", "Text",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"4f2e8cba-9801-4a44-a8e8-cd6b6b0d0da5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dataset", "[", 
  RowBox[{"{", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Alice\>\""}], ",", 
      RowBox[{"\"\<grade\>\"", "\[Rule]", "\"\<A+\>\""}]}], "|>"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Bob\>\""}], ",", 
      RowBox[{"\"\<grade\>\"", "\[Rule]", "\"\<C\>\""}]}], "|>"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<name\>\"", "\[Rule]", "\"\<Claire\>\""}], ",", 
      RowBox[{"\"\<grade\>\"", "\[Rule]", "\"\<A\>\""}]}], "|>"}]}], 
   "\[IndentingNewLine]", "}"}], "]"}]], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[425]:=",ExpressionUUID->"21be159c-11a4-4bb5-8188-eabba5929159"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|"name" -> "Alice", "grade" -> "A+"|>, <|
       "name" -> "Bob", "grade" -> "C"|>, <|
       "name" -> "Claire", "grade" -> "A"|>}, "AllowEmbedding" -> True, 
     "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "name"} -> 1, {All, "grade"} -> 
        1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "name" -> TypeSystem`PackageScope`AtomShape[67.2], "grade" -> 
            TypeSystem`PackageScope`AtomShape[33.6]|>], 
          DirectedInfinity[1], 2, {All}]], 3, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{"name", "grade"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 3], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "name"} -> 1, {All, "grade"} -> 
        1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "name" -> TypeSystem`PackageScope`AtomShape[67.2], "grade" -> 
            TypeSystem`PackageScope`AtomShape[33.6]|>], 
          DirectedInfinity[1], 2, {All}]], 3, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{"name", "grade"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[String]}], 3], "Path" -> {}, "DisplayedRowCount" -> 
     3, "DisplayedColumnCount" -> 2, "DataRowCount" -> 3, "DataColumnCount" -> 
     2, "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["name", 
                  Style[
                  "name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["grade", 
                  Style[
                  "grade", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "grade"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "grade"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Alice", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{67.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["A+", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["grade"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Bob", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{67.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["C", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["grade"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Claire", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{67.2, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["A", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["grade"]}, "Item", False], "Mouse"], 
              ImageSize -> {{33.6, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Dynamic[
     Replace[
      Replace[
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
       TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
          Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
          Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
           Blank[]], 
          Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
           Blank[]]] :> (
         Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
          TypeSystem`NestedGrid`PackagePrivate`path$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
          TypeSystem`NestedGrid`PackagePrivate`pathType$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
          TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
         TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
          TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
         TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
          TypeSystem`NestedGrid`PackagePrivate`path$, 
           TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
        Spacer[10], Blank[] :> Spacer[10]}], 
      Pattern[TypeSystem`NestedGrid`PackagePrivate`bar, 
        Except[
         Alternatives[
          Blank[Spacer], ""]]] :> 
      TypeSystem`NestedGrid`PackagePrivate`makeFramedPathbar[
       TypeSystem`NestedGrid`PackagePrivate`bar]], 
     TrackedSymbols :> {
      TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{143.226, {76.24456787109375, 84.84246826171875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{143.226, {76.24456787109375, 84.84246826171875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->
  "Out[425]=",ExpressionUUID->"93f60ed5-cda7-4286-902d-fdf77ebeaf96"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"AtomQ", "[", "%", "]"}]], "Input",
 ShowGroupOpener->"Inline",
 CellLabel->
  "In[426]:=",ExpressionUUID->"89a9f931-cedb-4392-87fb-1641658eff26"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[426]=",ExpressionUUID->"1a7b6790-2b67-4df6-83da-d4ea022a2f71"]
}, Open  ]],

Cell["\<\
Atomic expressions cannot be further subdivided into subexpressions.\
\>", "Text",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"6dcd4e35-a71d-4675-ad84-31e26a5baeac"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "CYUButton"], 
          TextCell[#, "CYUButton" <> "Active"]]& )[
          Framed[
           Style["Check Your Understanding", "CYUButton"], RoundingRadius -> 
           5, FrameMargins -> {{18, 18}, {15, 15}}, ImageSize -> {205, 51}, 
           BaseStyle -> "Text"]], (WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         Framed[
          Column[{
            TextCell[
            "Which of the following is a valid Wolfram Language expression?", 
             "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["statement"], 
                    "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 4 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}], 
            Spacer[0], 
            TextCell[
            "Which of the following is not a composite expression?", "Text"], 
            
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 4 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}]}], 
          FrameStyle -> Directive[
            GrayLevel[0.92], 
            Thickness[Large]], RoundingRadius -> 0, Background -> 
          GrayLevel[0.97], FrameMargins -> 15]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1170.5, {287.88038452148436`, 298.72901733398436`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"8af76948-95b8-4435-81e1-\
1e9d6a0df99c"]], "Text",
 CellTags->"CYU",ExpressionUUID->"4bd932b8-1592-4d02-896c-48265c956141"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Composite Expressions", "Section",ExpressionUUID->"364f933b-1c07-4bfe-90f9-eb25a968e700"],

Cell["\<\
Here are some examples of composite (or normal) expressions in Wolfram \
Language: \
\>", "Text",ExpressionUUID->"f0736e29-b22c-4a4c-9924-6d7b37e21c3e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"x", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[427]:=",ExpressionUUID->"5022985d-64fe-4c35-8e50-a0a3f224870d"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1:eJxFxWlIkwEYAODpPGrOcgqRmNuniMt5pD+CjDzSIPMi0yVNOjZ1s7xSHJiz
yzQdoa0ST2RM0xBxZszAjmVqmtdCV1bMSJxLWgra+tKpueqH7/vj4fEQ5J5K
t6ZQKHH//L/pmsAuKE0Suv2glohNJs6EbW8ZUt8iiItwU18ly5a4AmeFiLNX
WVJYu5FRvcyqh+11c+wlVjusGJXn/WD1wsouqS4rYBQWhU3WL+Zr4RyDj16l
/AzTPErZXw/NwlVOYxzFBT0s0CW9oo5/g/PelApy2Ua4+zI9ce+JJVghyTQG
Ji/DJfLNhF+LKzBFOxv+osgEexcIC5M4JDxP1p52ePkbjjZcuno/bw2On5f5
MpnrsHFAcONt5wYcwJh2jzz/B6aFkfwZ0xZ8fIm36smlhG//qT/NiudnBfdU
DJ4jSFxoK57VaKzh1HxJD72BCh8Q+Wpi+TbwO2c/B3GwLfxcWdLoR7WDJVac
k+NfcNpMUVSOyh42tHlUy4t3wNX7XW16uTthWYNwmE/QYF71WQ19AV871mqW
qx1gvSGisL+cDjeHBLlN8B3hzjIxQ+S/Cy7npsZQSfzgjKK9fGI3XOfT2DkR
4wRf76usi+nF49y4raNeDPhoznAKQ4rL9wm8xknca+BRTXyKMyzz7+dMqXGh
yWZyhOMCC7p/EtK7eFZJ4mb0PVycqPpIf4BXkOIqWQ2uDDZv1Dbh5teW6bYO
XDZFrxwcxhtasjNuj+AtBZrIqDH86R7Z+pgGn+G5ZGg/4Gy9a+ScHg9UFTEf
GvDDZTpz+gIey256/N2I52cSzJUVvPjITfMTE17mOPe+gMTrulrurK3hzTds
RM/W8Y6E9IjiTVzlOeQeuoWrTd5miwX/C0XwNRU=
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1:eJxFxWlIkwEYAODpPGrOcgqRmNuniMt5pD+CjDzSIPMi0yVNOjZ1s7xSHJiz
yzQdoa0ST2RM0xBxZszAjmVqmtdCV1bMSJxLWgra+tKpueqH7/vj4fEQ5J5K
t6ZQKHH//L/pmsAuKE0Suv2glohNJs6EbW8ZUt8iiItwU18ly5a4AmeFiLNX
WVJYu5FRvcyqh+11c+wlVjusGJXn/WD1wsouqS4rYBQWhU3WL+Zr4RyDj16l
/AzTPErZXw/NwlVOYxzFBT0s0CW9oo5/g/PelApy2Ua4+zI9ce+JJVghyTQG
Ji/DJfLNhF+LKzBFOxv+osgEexcIC5M4JDxP1p52ePkbjjZcuno/bw2On5f5
MpnrsHFAcONt5wYcwJh2jzz/B6aFkfwZ0xZ8fIm36smlhG//qT/NiudnBfdU
DJ4jSFxoK57VaKzh1HxJD72BCh8Q+Wpi+TbwO2c/B3GwLfxcWdLoR7WDJVac
k+NfcNpMUVSOyh42tHlUy4t3wNX7XW16uTthWYNwmE/QYF71WQ19AV871mqW
qx1gvSGisL+cDjeHBLlN8B3hzjIxQ+S/Cy7npsZQSfzgjKK9fGI3XOfT2DkR
4wRf76usi+nF49y4raNeDPhoznAKQ4rL9wm8xknca+BRTXyKMyzz7+dMqXGh
yWZyhOMCC7p/EtK7eFZJ4mb0PVycqPpIf4BXkOIqWQ2uDDZv1Dbh5teW6bYO
XDZFrxwcxhtasjNuj+AtBZrIqDH86R7Z+pgGn+G5ZGg/4Gy9a+ScHg9UFTEf
GvDDZTpz+gIey256/N2I52cSzJUVvPjITfMTE17mOPe+gMTrulrurK3hzTds
RM/W8Y6E9IjiTVzlOeQeuoWrTd5miwX/C0XwNRU=
              "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{0, 5}, {0., 4.999999897959183}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, 
          "PlotRange" -> {{0, 5}, {0., 4.999999897959183}}, 
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1:eJxFxWlIkwEYAODpPGrOcgqRmNuniMt5pD+CjDzSIPMi0yVNOjZ1s7xSHJiz
yzQdoa0ST2RM0xBxZszAjmVqmtdCV1bMSJxLWgra+tKpueqH7/vj4fEQ5J5K
t6ZQKHH//L/pmsAuKE0Suv2glohNJs6EbW8ZUt8iiItwU18ly5a4AmeFiLNX
WVJYu5FRvcyqh+11c+wlVjusGJXn/WD1wsouqS4rYBQWhU3WL+Zr4RyDj16l
/AzTPErZXw/NwlVOYxzFBT0s0CW9oo5/g/PelApy2Ua4+zI9ce+JJVghyTQG
Ji/DJfLNhF+LKzBFOxv+osgEexcIC5M4JDxP1p52ePkbjjZcuno/bw2On5f5
MpnrsHFAcONt5wYcwJh2jzz/B6aFkfwZ0xZ8fIm36smlhG//qT/NiudnBfdU
DJ4jSFxoK57VaKzh1HxJD72BCh8Q+Wpi+TbwO2c/B3GwLfxcWdLoR7WDJVac
k+NfcNpMUVSOyh42tHlUy4t3wNX7XW16uTthWYNwmE/QYF71WQ19AV871mqW
qx1gvSGisL+cDjeHBLlN8B3hzjIxQ+S/Cy7npsZQSfzgjKK9fGI3XOfT2DkR
4wRf76usi+nF49y4raNeDPhoznAKQ4rL9wm8xknca+BRTXyKMyzz7+dMqXGh
yWZyhOMCC7p/EtK7eFZJ4mb0PVycqPpIf4BXkOIqWQ2uDDZv1Dbh5teW6bYO
XDZFrxwcxhtasjNuj+AtBZrIqDH86R7Z+pgGn+G5ZGg/4Gy9a+ScHg9UFTEf
GvDDZTpz+gIey256/N2I52cSzJUVvPjITfMTE17mOPe+gMTrulrurK3hzTds
RM/W8Y6E9IjiTVzlOeQeuoWrTd5miwX/C0XwNRU=
          "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PanelPlotLayout" -> <||>, 
       "PlotRange" -> {{0, 5}, {0., 4.999999897959183}}, 
       "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 5}, {0., 4.999999897959183}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[427]=",ExpressionUUID->"6d58e5e4-b975-43a4-828b-135dea1ffe10"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{
   RowBox[{"x", "^", "2"}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[428]:=",ExpressionUUID->"0af979db-c365-421c-aa7e-2a908be9dcef"],

Cell[BoxData[
 FractionBox["125", "3"]], "Output",
 CellLabel->
  "Out[428]=",ExpressionUUID->"1b34f2e9-bf3b-4996-9bbb-2ba7f2b53a00"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"3", "x"}], "==", 
    RowBox[{
     FractionBox["x", "7"], "-", "5"}]}], ",", "x"}], "]"}]], "Input",
 CellLabel->
  "In[429]:=",ExpressionUUID->"a84d545e-89e9-407e-86a7-9365ad0b7884"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{"-", 
     FractionBox["7", "4"]}]}], "}"}], "}"}]], "Output",
 CellLabel->
  "Out[429]=",ExpressionUUID->"a5d25df5-cfef-4b6a-9f07-6dc16ef65ae8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"\"\<Hello\>\"", ",", "\"\<World\>\""}], "]"}]], "Input",
 CellLabel->
  "In[430]:=",ExpressionUUID->"817dc10c-8d41-4f7b-b512-7231a9728f9c"],

Cell[BoxData["\<\"HelloWorld\"\>"], "Output",
 CellLabel->
  "Out[430]=",ExpressionUUID->"1f6bd586-2bfd-40a1-8954-c2ea1f5be804"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Classify", "[", 
  RowBox[{"\"\<Language\>\"", ",", "\"\<the house is blue\>\""}], 
  "]"}]], "Input",
 CellLabel->
  "In[431]:=",ExpressionUUID->"086769ec-ad6c-43b0-9940-64d7c092753a"],

Cell[BoxData[
 TemplateBox[{"\"English\"", 
   RowBox[{"Entity", "[", 
     RowBox[{"\"Language\"", ",", "\"English\""}], "]"}], 
   "\"Entity[\\\"Language\\\", \\\"English\\\"]\"", "\"language\""},
  "Entity"]], "Output",
 CellLabel->
  "Out[431]=",ExpressionUUID->"f1c85d0b-d85f-42c9-8b5a-f4e16535c928"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", "y", ",", "3", ",", "4", ",", "z", ",", "6", ",", "7"}],
     "}"}], ",", "_Integer"}], "]"}]], "Input",
 CellLabel->
  "In[465]:=",ExpressionUUID->"29dd10c1-4155-4142-b42e-c32fd1de6223"],

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "0"}], ",", 
   RowBox[{"i", "\[LessEqual]", "10"}], ",", 
   RowBox[{"i", "++"}], ",", 
   RowBox[{"i", "^", "2"}]}], "]"}]], "Input",
 CellLabel->
  "In[432]:=",ExpressionUUID->"19ebd3dd-a040-417b-960f-5a0402dd2133"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"DateString", "[", "]"}]], "Input",
 CellLabel->
  "In[433]:=",ExpressionUUID->"5b1a0823-e3ae-4935-906d-2651d3c2b7fd"],

Cell[BoxData["\<\"Tue 10 Dec 2024 15:18:00\"\>"], "Output",
 CellLabel->
  "Out[433]=",ExpressionUUID->"7c19928c-897a-4c45-9903-8ec3114155e3"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Common Properties", "Subsection",
 ShowGroupOpener->
  "Inline",ExpressionUUID->"59160431-5663-4051-97c6-b0328ffc8687"],

Cell["Looking at the preceding examples, you can see that:", "Text",ExpressionUUID->"d9cd4fee-6da5-4292-b8b5-01d4444ed187"],

Cell["All begin with capital letters.", "Item",ExpressionUUID->"6eb9dd24-93bd-4e04-8773-61d2852c5a18"],

Cell["All have square brackets.", "Item",ExpressionUUID->"086531df-cc68-4625-bbba-cacdbb12052e"],

Cell["\<\
Elements enclosed in the square brackets are separated from one another using \
commas.\
\>", "Item",ExpressionUUID->"f66aed49-524f-43b4-86ca-a7cc7d484912"],

Cell["Sometimes there are no elements within the square brackets.", "Item",ExpressionUUID->"c4620073-510c-402f-b75f-3a47f9b1fd56"],

Cell["\<\
These common properties are some of the things to look for when asked to \
recognize an expression.\
\>", "Text",ExpressionUUID->"37921029-8b2f-4ba3-8d88-29c51e7c54df"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "CYUButton"], 
          TextCell[#, "CYUButton" <> "Active"]]& )[
          Framed[
           Style["Check Your Understanding", "CYUButton"], RoundingRadius -> 
           5, FrameMargins -> {{18, 18}, {15, 15}}, ImageSize -> {205, 51}, 
           BaseStyle -> "Text"]], (WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         Framed[
          Column[{
            TextCell[
            "Which of the following is a valid Wolfram Language expression?", 
             "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["statement"], 
                    "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Sum (i^2, {i, 10})", "info" -> 
                    "The Head of an expression is followed by square brackets \
in Wolfram Language.", "index" -> 1, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Do Print[n^2], {n, 4} End", "info" -> 
                    "Every Wolfram Language expression has a Head followed by \
square brackets.", "index" -> 2, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "For[i = 0, i < 4, i++]{Print[i]}", "info" -> 
                    "The syntax for the For statement is incorrect, and the \
free-floating braces around Print are not valid parts of an expression.", 
                    "index" -> 3, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 4 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "Table[i^2, {i, 10}]", "info" -> "Correct",
                     "index" -> 4, "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}], 
            Spacer[0], 
            TextCell[
            "Which of the following is not a composite expression?", "Text"], 
            
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "2 + b", "info" -> 
                    "This is a composite expression with Plus as Head.", 
                    "index" -> 1, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "{2, b}", "info" -> 
                    "This is a composite expression with List as Head.", 
                    "index" -> 2, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "2 I", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 4 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "2 b", "info" -> 
                    "This is a composite expression with Times as Head.", 
                    "index" -> 4, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}]}], 
          FrameStyle -> Directive[
            GrayLevel[0.92], 
            Thickness[Large]], RoundingRadius -> 0, Background -> 
          GrayLevel[0.97], FrameMargins -> 15]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1170.5, {287.88038452148436`, 298.72901733398436`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"aa632ca1-57cc-4108-bc34-\
77aaaa68c84a"]], "Text",
 CellTags->"CYU",ExpressionUUID->"07cedee0-21f6-4eda-854b-a568ea2a338c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Structure of Expressions", "Section",ExpressionUUID->"5e96b6b1-b725-4fae-ad5a-df05203e331a"],

Cell[CellGroupData[{

Cell["They Look the Same \[Ellipsis]", "Subsection",ExpressionUUID->"ec9595f0-f264-4789-ba20-698665b25447"],

Cell["Here is a template for recognizing an expression.", "Text",ExpressionUUID->"1448195c-3677-4330-897d-88b5bd6a0658"],

Cell[BoxData[
 RowBox[{"Head", "[", 
  RowBox[{
   SubscriptBox["elem", "1"], ",", 
   SubscriptBox["elem", "2"], ",", 
   SubscriptBox["elem", "3"], ",", "\[Ellipsis]"}], "]"}]], "Program",
 TextAlignment->Center,
 FontColor->GrayLevel[
  0],ExpressionUUID->"62455ef9-ba9e-47e9-b944-4886225ded3e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plus", "[", 
  RowBox[{"a", ",", "b"}], "]"}]], "Input",
 CellLabel->
  "In[434]:=",ExpressionUUID->"48b86960-918f-476a-82a8-1e3d7c4b749e"],

Cell[BoxData[
 RowBox[{"3", "+", "b"}]], "Output",
 CellLabel->
  "Out[434]=",ExpressionUUID->"61f37b42-05c0-4a05-9984-c56e3781cee4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"List", "[", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "]"}]], "Input",
 CellLabel->
  "In[435]:=",ExpressionUUID->"aa8d0abd-4c04-4579-8c74-00e4f1d37f1c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]], "Output",
 CellLabel->
  "Out[435]=",ExpressionUUID->"e60f9465-a10b-4ff5-ae3e-5aa073f25ccd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{"x", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[436]:=",ExpressionUUID->"4eecb259-ee2e-4ada-9a80-33eb8596f42d"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1:eJxFxWlIkwEYAODpPGrOcgqRmNuniMt5pD+CjDzSIPMi0yVNOjZ1s7xSHJiz
yzQdoa0ST2RM0xBxZszAjmVqmtdCV1bMSJxLWgra+tKpueqH7/vj4fEQ5J5K
t6ZQKHH//L/pmsAuKE0Suv2glohNJs6EbW8ZUt8iiItwU18ly5a4AmeFiLNX
WVJYu5FRvcyqh+11c+wlVjusGJXn/WD1wsouqS4rYBQWhU3WL+Zr4RyDj16l
/AzTPErZXw/NwlVOYxzFBT0s0CW9oo5/g/PelApy2Ua4+zI9ce+JJVghyTQG
Ji/DJfLNhF+LKzBFOxv+osgEexcIC5M4JDxP1p52ePkbjjZcuno/bw2On5f5
MpnrsHFAcONt5wYcwJh2jzz/B6aFkfwZ0xZ8fIm36smlhG//qT/NiudnBfdU
DJ4jSFxoK57VaKzh1HxJD72BCh8Q+Wpi+TbwO2c/B3GwLfxcWdLoR7WDJVac
k+NfcNpMUVSOyh42tHlUy4t3wNX7XW16uTthWYNwmE/QYF71WQ19AV871mqW
qx1gvSGisL+cDjeHBLlN8B3hzjIxQ+S/Cy7npsZQSfzgjKK9fGI3XOfT2DkR
4wRf76usi+nF49y4raNeDPhoznAKQ4rL9wm8xknca+BRTXyKMyzz7+dMqXGh
yWZyhOMCC7p/EtK7eFZJ4mb0PVycqPpIf4BXkOIqWQ2uDDZv1Dbh5teW6bYO
XDZFrxwcxhtasjNuj+AtBZrIqDH86R7Z+pgGn+G5ZGg/4Gy9a+ScHg9UFTEf
GvDDZTpz+gIey256/N2I52cSzJUVvPjITfMTE17mOPe+gMTrulrurK3hzTds
RM/W8Y6E9IjiTVzlOeQeuoWrTd5miwX/C0XwNRU=
          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1:eJxFxWlIkwEYAODpPGrOcgqRmNuniMt5pD+CjDzSIPMi0yVNOjZ1s7xSHJiz
yzQdoa0ST2RM0xBxZszAjmVqmtdCV1bMSJxLWgra+tKpueqH7/vj4fEQ5J5K
t6ZQKHH//L/pmsAuKE0Suv2glohNJs6EbW8ZUt8iiItwU18ly5a4AmeFiLNX
WVJYu5FRvcyqh+11c+wlVjusGJXn/WD1wsouqS4rYBQWhU3WL+Zr4RyDj16l
/AzTPErZXw/NwlVOYxzFBT0s0CW9oo5/g/PelApy2Ua4+zI9ce+JJVghyTQG
Ji/DJfLNhF+LKzBFOxv+osgEexcIC5M4JDxP1p52ePkbjjZcuno/bw2On5f5
MpnrsHFAcONt5wYcwJh2jzz/B6aFkfwZ0xZ8fIm36smlhG//qT/NiudnBfdU
DJ4jSFxoK57VaKzh1HxJD72BCh8Q+Wpi+TbwO2c/B3GwLfxcWdLoR7WDJVac
k+NfcNpMUVSOyh42tHlUy4t3wNX7XW16uTthWYNwmE/QYF71WQ19AV871mqW
qx1gvSGisL+cDjeHBLlN8B3hzjIxQ+S/Cy7npsZQSfzgjKK9fGI3XOfT2DkR
4wRf76usi+nF49y4raNeDPhoznAKQ4rL9wm8xknca+BRTXyKMyzz7+dMqXGh
yWZyhOMCC7p/EtK7eFZJ4mb0PVycqPpIf4BXkOIqWQ2uDDZv1Dbh5teW6bYO
XDZFrxwcxhtasjNuj+AtBZrIqDH86R7Z+pgGn+G5ZGg/4Gy9a+ScHg9UFTEf
GvDDZTpz+gIey256/N2I52cSzJUVvPjITfMTE17mOPe+gMTrulrurK3hzTds
RM/W8Y6E9IjiTVzlOeQeuoWrTd5miwX/C0XwNRU=
              "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{0, 5}, {0., 4.999999897959183}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, 
          "PlotRange" -> {{0, 5}, {0., 4.999999897959183}}, 
          "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0},
           "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
          "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), 
          "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1:eJxFxWlIkwEYAODpPGrOcgqRmNuniMt5pD+CjDzSIPMi0yVNOjZ1s7xSHJiz
yzQdoa0ST2RM0xBxZszAjmVqmtdCV1bMSJxLWgra+tKpueqH7/vj4fEQ5J5K
t6ZQKHH//L/pmsAuKE0Suv2glohNJs6EbW8ZUt8iiItwU18ly5a4AmeFiLNX
WVJYu5FRvcyqh+11c+wlVjusGJXn/WD1wsouqS4rYBQWhU3WL+Zr4RyDj16l
/AzTPErZXw/NwlVOYxzFBT0s0CW9oo5/g/PelApy2Ua4+zI9ce+JJVghyTQG
Ji/DJfLNhF+LKzBFOxv+osgEexcIC5M4JDxP1p52ePkbjjZcuno/bw2On5f5
MpnrsHFAcONt5wYcwJh2jzz/B6aFkfwZ0xZ8fIm36smlhG//qT/NiudnBfdU
DJ4jSFxoK57VaKzh1HxJD72BCh8Q+Wpi+TbwO2c/B3GwLfxcWdLoR7WDJVac
k+NfcNpMUVSOyh42tHlUy4t3wNX7XW16uTthWYNwmE/QYF71WQ19AV871mqW
qx1gvSGisL+cDjeHBLlN8B3hzjIxQ+S/Cy7npsZQSfzgjKK9fGI3XOfT2DkR
4wRf76usi+nF49y4raNeDPhoznAKQ4rL9wm8xknca+BRTXyKMyzz7+dMqXGh
yWZyhOMCC7p/EtK7eFZJ4mb0PVycqPpIf4BXkOIqWQ2uDDZv1Dbh5teW6bYO
XDZFrxwcxhtasjNuj+AtBZrIqDH86R7Z+pgGn+G5ZGg/4Gy9a+ScHg9UFTEf
GvDDZTpz+gIey256/N2I52cSzJUVvPjITfMTE17mOPe+gMTrulrurK3hzTds
RM/W8Y6E9IjiTVzlOeQeuoWrTd5miwX/C0XwNRU=
          "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PanelPlotLayout" -> <||>, 
       "PlotRange" -> {{0, 5}, {0., 4.999999897959183}}, 
       "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 5}, {0., 4.999999897959183}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[436]=",ExpressionUUID->"3634d99e-65c6-40c7-b166-82bf44c83f5c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Integrate", "[", 
  RowBox[{"x", ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellLabel->
  "In[437]:=",ExpressionUUID->"80e7ff61-e9a3-4032-9835-b475a65e47bc"],

Cell[BoxData[
 FractionBox["25", "2"]], "Output",
 CellLabel->
  "Out[437]=",ExpressionUUID->"6719a07a-8343-4519-9930-d3a209851a1e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Solve", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"3", "x"}], "==", 
    RowBox[{
     FractionBox["x", "7"], "-", "5"}]}], ",", "x"}], "]"}]], "Input",
 CellLabel->
  "In[438]:=",ExpressionUUID->"7e1d7c7d-6e14-4523-8254-170512dc7e96"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{"x", "\[Rule]", 
    RowBox[{"-", 
     FractionBox["7", "4"]}]}], "}"}], "}"}]], "Output",
 CellLabel->
  "Out[438]=",ExpressionUUID->"7889ee3c-7313-4853-b9fd-d56e1b86caf4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringJoin", "[", 
  RowBox[{"\"\<Hello\>\"", ",", "\"\< \>\"", ",", "\"\<World\>\""}], 
  "]"}]], "Input",
 CellLabel->
  "In[439]:=",ExpressionUUID->"f870b549-cfaf-43ec-973c-96c364856a82"],

Cell[BoxData["\<\"Hello World\"\>"], "Output",
 CellLabel->
  "Out[439]=",ExpressionUUID->"fd44c495-a6be-4515-896f-b4550466a6a3"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"For", "[", 
  RowBox[{
   RowBox[{"i", "=", "0"}], ",", 
   RowBox[{"i", "\[LessEqual]", "10"}], ",", 
   RowBox[{"i", "++"}], ",", 
   RowBox[{"Print", "[", 
    RowBox[{"i", "^", "2"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[440]:=",ExpressionUUID->"c7a58984-5d45-480d-8705-4e70e845bec6"],

Cell[CellGroupData[{

Cell[BoxData["0"], "Print",
 CellLabel->
  "During evaluation of \
In[440]:=",ExpressionUUID->"94f7cd53-1e13-498a-869c-8c13be224d4f"],

Cell[BoxData["1"], "Print",
 CellLabel->
  "During evaluation of \
In[440]:=",ExpressionUUID->"469a5362-2ecd-44db-a960-171f109aff11"],

Cell[BoxData["4"], "Print",
 CellLabel->
  "During evaluation of \
In[440]:=",ExpressionUUID->"bc64eb58-4aa9-40f7-9fe8-b3f663af26c7"],

Cell[BoxData["9"], "Print",
 CellLabel->
  "During evaluation of \
In[440]:=",ExpressionUUID->"18d0b196-b6fb-4e07-8476-340df714dbaf"],

Cell[BoxData["16"], "Print",
 CellLabel->
  "During evaluation of \
In[440]:=",ExpressionUUID->"53d8fa97-394b-4248-a467-62c9cbfc3840"],

Cell[BoxData["25"], "Print",
 CellLabel->
  "During evaluation of \
In[440]:=",ExpressionUUID->"293ad2e6-1c45-403f-a69d-7aceb25cec0f"],

Cell[BoxData["36"], "Print",
 CellLabel->
  "During evaluation of \
In[440]:=",ExpressionUUID->"7d5af2a0-0f94-4865-9852-5931615db255"],

Cell[BoxData["49"], "Print",
 CellLabel->
  "During evaluation of \
In[440]:=",ExpressionUUID->"c3dd4c09-311a-43e3-b79c-bfc395c2cb22"],

Cell[BoxData["64"], "Print",
 CellLabel->
  "During evaluation of \
In[440]:=",ExpressionUUID->"6d9d14bd-d324-4536-9ca9-f9692e9d2862"],

Cell[BoxData["81"], "Print",
 CellLabel->
  "During evaluation of \
In[440]:=",ExpressionUUID->"04bb3a44-1d3d-4021-bc26-8d61a05a2cc0"],

Cell[BoxData["100"], "Print",
 CellLabel->
  "During evaluation of \
In[440]:=",ExpressionUUID->"4643a9df-531f-4976-985e-4c250c989b09"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Even if They Do Not Look the Same\[Ellipsis]", "Subsection",ExpressionUUID->"2971aec6-5d40-4925-aefd-8f54164f6c1f"],

Cell[TextData[{
 "Even if certain expressions look nothing like the preceding template, their \
true underlying structure can be revealed with the ",
 ButtonBox["FullForm",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/FullForm.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/FullForm.html"],
 " function:"
}], "Text",ExpressionUUID->"2a5ef209-c783-4ac1-abeb-cba2255bd604"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"a", "+", "b"}]], "Input",
 CellLabel->
  "In[441]:=",ExpressionUUID->"f551a72c-a411-43ea-b23a-e6eba669debc"],

Cell[BoxData[
 RowBox[{"3", "+", "b"}]], "Output",
 CellLabel->
  "Out[441]=",ExpressionUUID->"739da6ff-5c95-4871-b33e-972b695b7c26"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "+", "b"}], "//", "FullForm"}]], "Input",
 CellLabel->
  "In[442]:=",ExpressionUUID->"ef4314b9-f61b-46ea-a1b9-67cdd3e2965e"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Plus", "[", 
    RowBox[{"3", ",", "b"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[442]//FullForm=",ExpressionUUID->"e5b70689-1094-4a12-86d3-\
1259f810f602"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]], "Input",
 CellLabel->
  "In[443]:=",ExpressionUUID->"24dfc101-8b2e-4c2e-bee6-10351329ff93"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]], "Output",
 CellLabel->
  "Out[443]=",ExpressionUUID->"e8348a69-eee9-4a1e-b26b-3a753bcc1e24"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"{", 
   RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}], " ", "//", 
  "FullForm"}]], "Input",
 CellLabel->
  "In[444]:=",ExpressionUUID->"8e655a96-f3d9-4190-9410-a6e65fb9e53f"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{"3", ",", "b", ",", "c", ",", "d", ",", "e"}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[444]//FullForm=",ExpressionUUID->"148e1b64-b11e-49c4-96a7-\
bfc9595211ff"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"g", "=", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"Sin", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellLabel->
  "In[445]:=",ExpressionUUID->"b8e52b5a-84c9-4e98-84a2-e99ad6b28ad2"],

Cell[BoxData[
 GraphicsBox[
  InterpretationBox[{
    TagBox[{{{}, {}, 
       TagBox[
        {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[2], 
         Opacity[1.], LineBox[CompressedData["
1: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
ftBQw+i/7WocLjH5cPGj+U00NM/nTZsJk8SHewWW7FEaGnzyv6e6gSQSDcsW
+0xQ+nQF1yhuIYlI8aoqzhQNt+uUB8whSdwK/LvzswAdRbgdmp5GJGEUPqlp
JklHvYq7OS5WJAHm/D3ZDDq+kA0e/nSeJNYqirxQlaXjX8PAS512JCH7XFp2
UImOG4zdYeY/kmhNWD3nv4LaH7/xq5wfSdRc2JQ5pEnHy8vC2xIekETJCr3L
x9bSUViqcBPrEUm8TtvbpaZNx0f9L0+WPiEJtwzrH7k76Si7afURsRSSsHW3
99UwpKOyBOtpaxpJWG5x2fZwHx0lw6rGY9+TxDbCM8PiMB3XF37tbs4iiUXF
T6PHT9Mx4W65zbYSkuD3fXHM8hz1vOaHCmfKSGLEMJlRaEPH04fWV9pWkERD
RYZPsCMdVWrtdTdXk8T3wK/6PGc6BoRVcqZqSeKrSeHUyf/oKPQvPSKxgSTi
aqscV12nY9Sd/Q3ZzSQRFt6wLOQWHf/LOnphyT+S8DNvaZu8Q913k1+/SxtJ
ODZzjpT40fHGgrzCn10kYfV8hKb1gI6uwTGLm3pI4rDVVFloEB1fFpkf/dlH
EjqdIngmnI6rZQrCL5MksSpRYrL0CR2lm6oeqwySBPuiTPrqaDpujHfzyBoi
CfpKJYewWDqaez3YvWWEJIS4qhqz8XRchLO8uFGSmEhb3no2iY7Wh/Iejo+R
RO+lNU/LUuiYze0QWTdBEn/WbTZb+4aO5ya8zh7hkcTPUT3JiPd0PLDwe8zZ
SZLIz9jxbe4jHZ97ThDmUyTx0d3IyzqLjvqnj37Vnqb8teWQXvkXOh53MnzK
P0MST2aOTazLpWPVCr1j7yh+QJx6F1lAx6TS9yN7Zym/eZ634y+ho6W2rkMF
xZe3OajZlNFx6xL3Qu05krAWcm2pqKBjHEdxMoBieVZp3VQlHX834cdiiis2
K/3QqKFjjsfSXRyKb5tcKjKtp2M9633KLMUb7Qq/3G6ko9SP5s4pinvvyn1I
a6Zj057k0XaKo6LtU5r+0VFUeElDJsUmmbkvRDvo2KF1PugqxcK/pJ9s7Kb8
lfyEqU5xVv+F4DN9dHRcOHaLoOp1EP7qG8ilo2BSxqdtFKuw6Z5fBulY4qlZ
9J66b622tVvvCB09TD4kSVDsdyjLUXaCjg7+788cofTSs190fvsUlReTZyN+
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

          "]]},
        Annotation[#, "Charting`Private`Tag#1"]& ]}, {}},
     {"WolframDynamicHighlight", <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>}], 
    StyleBox[
     DynamicBox[(Charting`HighlightActionBox["DynamicHighlight", {}, 
       Slot["HighlightElements"], 
       Slot["LayoutOptions"], 
       Slot["Meta"], 
       Charting`HighlightActionFunction["DynamicHighlight", {{{{}, {}, 
           Annotation[{
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]], 
             Line[CompressedData["
1:eJwtlnk4VO/7xy0RUcyMJdvMoNBGe5HcN+3SQlFJKpWUNfGJ0qJESCGyVERk
SbQokTr2JVFkjST7NnPsjPV3vtf1+2ee63VdzzPnft73+32fo2zlaHJOgI+P
bwP187/12Q0r4TVn/fXO//9a8IttdIR9AYx+LM84TK1zRV/vsNnuILFxxWoZ
an2WE8ASYvuCdGNNZSPLF+y2utqPsyKgBsM3m1DrrymbkAFWEiT1HKk6rpQE
8xtb1TmsTAhtW7P4iXQmxHyLvtTHKoXjT8OuvxsrgdQ030Y7zd/gUVZassC1
Ac5DZUS/cxs8vgLL+He2Al/sWFajfxtUNZyPvWzeCuHzFJu+xbWB6dzI2G+H
VigptWYm1baBuH4G372wVtA4PB17Tqcduq6/3mre3QrdNuopzfwdIHooNrna
pw0uBl//+jOwEyxF9LXKv7SDQ8eytvTUHhiwoO3YLtgFLZYNIrmlPaAvknZo
vkwXHKq/p1ne3gMGVbT2TI0u2FzW5d4h3wt9agWHOfu6QPBtvKSMTy8EhuYK
3A/rgnAPZb0rJ/tgIC2c9Uy9G3IZchHakhxwODd08INOD6wPKPm6YwUHzufW
Pz+wtwdeCru1G+/kQKDmq+a64z1wn1erddGDAxVVrSNvPXrA7G9IUWQ3B7IF
5Lf7f+mB3mTJkakcLjgVuFmUbOmFBcpe6n83D4DIZ/c45vI+KNEN0rqxYwAs
5iVX2m/qA++jUZuUTAbA89c5iZTtfSAQ+GnXcdsBcD8Y8mTUsg8mZ/vP1z0b
gJV6r+jZwX3Q12Sa+ENgEPJGoq5LjPfB93D1ZTnfB8ElzNYv8l0/+KWvX3Oy
YRAO5InHZH/ph90/9bVnOwah5cTxmu8l/VAw32KP7twg3M2+fS2juR+y/wu8
8GnNEKyYHJ9LF+XA68O8pDePh8B84ybmXgsOPJAsWx5zahgEWz4nZAxzIHOT
0of9DsMgK761eN8MB9otHWH62jDo7Vw1XS7MhS2vGYePhA1DqWK83305LnTv
sbi+sGIYtkx6XOPX48K2O5wf7ltGIFNciFtwmwsOyWCuvmcENlTd3Mnz40Jk
ZVB7tdkImJz7ZyT7iAsDrI08LecRWPMjda/kCy5EZd9Q6UwcgWPCJx1Hc7kw
MSrhaiIzCg9id7j4THFBVclqbk51FGLbNOYfFiBh//Z039drRkE9MHNAVJSE
+OCjUSL7RkFn2DR9jQwJJloxxV/vjELafnBz0iLhhtmwsV3QKBjfbtbx2UBC
0vUdTXLRo3DSOkfTZwsJfN97BlyyRuG36K9wg10kvLZZK79icBRSxf3mXp4g
of6hV1z97CgMubNrhM+QMC+jVtNbfAyUfTOzDtiQYC50bds/9THo8Qt6+dSZ
BJHYfLswyzG4zKsNV/EmYV2p9Ph2uzFwXCTm/c2PBMuB855D7mNg/d9a6+MP
SfigJ/54X+gYdANjaFM4CVaNhwnB72NQsrSmuTGRhAVP/tlfahiDw9PZLZ9S
SHhn7qD4t3MM5Pgmgm++IUHwt497Fv84GAf/minNICGuPmvdpU3jsL/h7kuT
QhKMwne1Nm8fBz352TaPEhJGjlQHGpmMg8dXna+BZSTsqONw1O3H4Yf6OXSt
JKGzhp3YHDsOIrOvDdY0kfAg9LWZ0ZtxsL65YFViMwkbTXWEsr6MQ2lZQJzI
PxJ8qg9ZhdaPw/P11uu9O0hYHdIiKdg5Dq9Cgva86KL0O2RPOA2Pw5I9gR1J
PSRo/PJWNFo0AaoHrVIuc0j4Gcwoy1SYgCRfv+qNJAluJs/d1ZdNwM0urRtt
AySw6as0QjdOQN+VJYnuQySUVmbWCmyfAFQxNOYNk+ActPOuk/EEJCQEu1mN
kiBv/Gtds+UE/Hkxp/hhjISLP/sDM90nIPPT0wYZHgn0QHdQ95mA6kOsgaWT
JGQdEOaGhExAna3tLeYUpb/Eo6cCsRMg3FfpyzdNgtgP1l6ntAnIj3gv9p3i
9AcpvD/ZEyDI8hTynCHBYr924t5vE5DK9/k/1izlj0VFZpl1EzD1YtAygeKU
chMh9Y4JIPYVflk8R8LhgL/vQ4Ym4K1KZ/BliqeN7KwE+HgQrS7VnEFxnDhP
0mkhD6L0WdEdFO/7fpf4I8+DlRu7aqYpHvOnO+zV4MGOV8dvz1ActTdaMXMD
DxzVPeK6KN4ptrJMbRsPPtOO6n6mmPvtk3vIQYrfLjJ0o/ix3w4NAUse2Gj9
KGdSrGdYVetoywPhR/XFqVS9naIn7/5x48FogftmDYoflvat2+vNgysBNLY/
dd/Nvm6tnx7xwCVk0c06So+W3UJBajE8WHqaNF1I8T2RYAhJ5cHXYwbxKyk9
V5cwufzZPBDNj7ffQOld7/PqqWMpDyaJ4jR1qh+3dm3e+6eWB6uMre0EJyh/
zC/kGbbz4PzhA3ElVP9+FhknfhrkgYDXqaNXqP66eTebqc3xwOQ/H1+JEcof
O22FQsQnYfpp7uYgyh+XCr2sHNUn4WBwurQx5Sdm+07hsXWTQAu6uCGV8luZ
gGiyB07CjqjH+eN9JCzFgEHfY5OQRDzUOthNQpXlgVBJ60mQ3xIpcbKThJvX
adphzpOgGBxqZd5OQkNW6K04/0nY4HrCWqaFBO+GI0tWhE9C/PZiubo/VN4n
5Erexk3CZxeLHV6NJARsiJIgvkzCrGbxgrhaEvTfvIxqICdh7rajO4/KH7fC
xuDU9CSsnnm7mFlKwhPO8s5OkSlI2vBLV6uIhNHlaatGlKegJIQrL5tDza/4
jOxFh6egglFxZuYdCWYF7qdCT03B475xS+80ah60bZmnaD8FfhNp3KlXJJxg
5+xd5k39X4FXdUocCbQnJb+3fZoC09BLvKWhJHzN9LvxrWAKpFdcrGcEkWBb
b6RiXDkFQ8xIS+59EgqlKy9Y9k7BF93aixe8SHAPbJhwU5yGpHOV369Q8+7f
3V6Z1FvTYHBjteaEITUv4lKy1gdMg/fLy2Vvd5CwJd/B8nPENPS8UdY7iiSE
8g3Hl7ybBsvUrje21Dzec21qfVv7NGQsKF/+mknCWyfxQ4v3zABNbNj/GYcL
3yMZ7q/NZkDmkVR0RCcXOgvkow3OzsDlngv2N/9yQV5uWZ/dzRlI0tI+KFLJ
Ba/cHXdyP8xA23+vciXec8GMfvP9RZVZiBY3Vpl0pt7jut4Nc1qzoOPQcCnk
Ihf8rAPmQrbOQmXuaM1iKy4QWU/2EkdnwZxrP/L3IBc0znxqYzychV2VNto2
q7gw+X6Q8WVqFgb2ujy0buWAVPOEtonoHEyPrNeIr+eApgjfqS6ZOVCJT9er
qODAGYtFKbS1cxAcc4K/JYsD3+et2G5tMwcGt9ISBII5EGV61kWiZg4ivsTM
GOpyIOaabe/qI3x4C+3lWZ79sDpHdMLnBB9y/95/8dC1H3LmJQr9PcOH6880
GXEv9ENLQDs7wIkPa9T2K/1n0g/M5yeO9PjyoVpBgdcblX6ILDhQEJPNh7VD
heJ1RB8EL1wfRVfhR8XX4doqnF64HT1tPNLPjxHVycwH0j1wcPWnSyuG+TGp
4FqhjHAPMHMvB1nx+PHj33DjwLFuyGrt/flTSADpwbpgVtcNQ0sbDrxmCmB+
XYmbZng3WKV82Gd9UAAXarkWL5btBv1Mhz317wVw0QvdT3ILuoDvVwtmXxXE
seHEFZLF7aDmYu12eLkQZjWnxW9xaYb20TAzsS/CuNHicVF0cxUYdly8HnxJ
BLu+XXBkC3+E/e2BK5jMBcg1S1SYcSSI3nyrWyWvxfBDkVvTL+FqQpNWq7Tt
5EIUrNTdVryyhegM6Lwdem4hHljq1f3IoIV4tmC8q8t2IQ7q2libHW0hxOct
fnffbSFq5b37kH2nhegdO7azNmghpujbqS/83ULEN/1xuFCwEBcfTAx96/WP
UEzsIB4uW4S7yBvkq8pWYgGMnm4aXoTyhRk3wnd1EG76GiIfJxfhle+vAuZb
dBCd246nPuSXwIEMp2Frpw4ib3fupIGEBH4a/OQzFt5BXDUJeJS0XAIFvzSt
O9LTQfSdW1r432kJTOp9WUjz6SS+3zfVoP2QwCLNrqfzP3YROg/vVfTWSGCQ
EV49V9JFJAZ9diloksDkTQ+73v7uIrweK+de6ZXApR+ddGXmugjmz7GVpIAk
OlrkmYvt6iZqG/IKTZmSGHpHZ+DJr25iF8d8XMVUEp8NC16Yae4hoqTu/Lp5
VBIVvp26VMrtIUa2vEprOi6Jy1Z8W3pntod47jd1/rGVJO7rMLcmlHqJSfWn
9aJOksi5dIVufryXSLH6kzngJ4nbGz/HLPrVS0jWn/T4miOJ6Vn701ak9xHW
cz5HFQokseL5tTfhuX1Ettqb9W7Fkph0/BtjqKKPuODKx1lTIYmz25mNF3r6
iDx6zIn4RkkU6vx33k6pn3DZ16p3f0wSP+6q9fzg2U/U553lN19Jw1h1w2b5
LRxiQP+3/HUtGgo4GOru3sEh5uceWP98LQ0XO2DEmQMcYiOhc75zMw1nfuts
OnuGQ4R8lix33kHDnyOMo/f9OMSB9Oxwf0sa/uvWH3eu4RDW69a+Sz1Nw76J
SefrzRzixruEssqzNOxea//QtYtDpLwJnpW1peGxdVdCNHkcYsFrm7NxV2go
pOC8KV+BSxTFS63+EkhDD7Pa3c4nuETzEr89LY9o+PzOsMnhc1xi9MWclWAY
tT+hIVnVnkssie0N3fOMhr7aNav9PLjE7aicqZokGra+/UP7L5JL6IXZFXPz
aMhl560urOISZjKtLbQiGuYe1R1wb+AS9qFHJteX0tDizaKPCi1c4ukjg1XX
ftBQw+i/7WocLjH5cPGj+U00NM/nTZsJk8SHewWW7FEaGnzyv6e6gSQSDcsW
+0xQ+nQF1yhuIYlI8aoqzhQNt+uUB8whSdwK/LvzswAdRbgdmp5GJGEUPqlp
JklHvYq7OS5WJAHm/D3ZDDq+kA0e/nSeJNYqirxQlaXjX8PAS512JCH7XFp2
UImOG4zdYeY/kmhNWD3nv4LaH7/xq5wfSdRc2JQ5pEnHy8vC2xIekETJCr3L
x9bSUViqcBPrEUm8TtvbpaZNx0f9L0+WPiEJtwzrH7k76Si7afURsRSSsHW3
99UwpKOyBOtpaxpJWG5x2fZwHx0lw6rGY9+TxDbCM8PiMB3XF37tbs4iiUXF
T6PHT9Mx4W65zbYSkuD3fXHM8hz1vOaHCmfKSGLEMJlRaEPH04fWV9pWkERD
RYZPsCMdVWrtdTdXk8T3wK/6PGc6BoRVcqZqSeKrSeHUyf/oKPQvPSKxgSTi
aqscV12nY9Sd/Q3ZzSQRFt6wLOQWHf/LOnphyT+S8DNvaZu8Q913k1+/SxtJ
ODZzjpT40fHGgrzCn10kYfV8hKb1gI6uwTGLm3pI4rDVVFloEB1fFpkf/dlH
EjqdIngmnI6rZQrCL5MksSpRYrL0CR2lm6oeqwySBPuiTPrqaDpujHfzyBoi
CfpKJYewWDqaez3YvWWEJIS4qhqz8XRchLO8uFGSmEhb3no2iY7Wh/Iejo+R
RO+lNU/LUuiYze0QWTdBEn/WbTZb+4aO5ya8zh7hkcTPUT3JiPd0PLDwe8zZ
SZLIz9jxbe4jHZ97ThDmUyTx0d3IyzqLjvqnj37Vnqb8teWQXvkXOh53MnzK
P0MST2aOTazLpWPVCr1j7yh+QJx6F1lAx6TS9yN7Zym/eZ634y+ho6W2rkMF
xZe3OajZlNFx6xL3Qu05krAWcm2pqKBjHEdxMoBieVZp3VQlHX834cdiiis2
K/3QqKFjjsfSXRyKb5tcKjKtp2M9633KLMUb7Qq/3G6ko9SP5s4pinvvyn1I
a6Zj057k0XaKo6LtU5r+0VFUeElDJsUmmbkvRDvo2KF1PugqxcK/pJ9s7Kb8
lfyEqU5xVv+F4DN9dHRcOHaLoOp1EP7qG8ilo2BSxqdtFKuw6Z5fBulY4qlZ
9J66b622tVvvCB09TD4kSVDsdyjLUXaCjg7+788cofTSs190fvsUlReTZyN+
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

              "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
        "HighlightElements" -> <|
          "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
         "LayoutOptions" -> <|
          "PanelPlotLayout" -> <||>, 
           "PlotRange" -> {{0, 10}, {-0.9999993680039507, 
             0.9999995755730018}}, 
           "Frame" -> {{False, False}, {False, False}}, 
           "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
           "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
           GoldenRatio^(-1), "DefaultStyle" -> {
             Directive[
              Opacity[1.], 
              RGBColor[0.368417, 0.506779, 0.709798], 
              AbsoluteThickness[2]]}, 
           "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
               Identity[
                Part[#, 1]], 
               Identity[
                Part[#, 2]]}& ), 
             "ScalingFunctions" -> {{Identity, Identity}, {
               Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> 
           False|>, 
         "Meta" -> <|
          "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
           Plot, "GroupHighlight" -> False|>|>]]& )[<|
       "HighlightElements" -> <|
         "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
        "LayoutOptions" -> <|
         "PanelPlotLayout" -> <||>, 
          "PlotRange" -> {{0, 10}, {-0.9999993680039507, 0.9999995755730018}},
           "Frame" -> {{False, False}, {False, False}}, 
          "AxesOrigin" -> {0, 0}, "ImageSize" -> {360, 360/GoldenRatio}, 
          "Axes" -> {True, True}, "LabelStyle" -> {}, "AspectRatio" -> 
          GoldenRatio^(-1), "DefaultStyle" -> {
            Directive[
             Opacity[1.], 
             RGBColor[0.368417, 0.506779, 0.709798], 
             AbsoluteThickness[2]]}, 
          "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
              Identity[
               Part[#, 1]], 
              Identity[
               Part[#, 2]]}& ), 
            "ScalingFunctions" -> {{Identity, Identity}, {
              Identity, Identity}}|>, "Primitives" -> {}, "GCFlag" -> False|>,
         "Meta" -> <|
         "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
          Plot, "GroupHighlight" -> False|>|>],
      ImageSizeCache->{{4.503599627370496*^15, -4.503599627370496*^15}, {
       4.503599627370496*^15, -4.503599627370496*^15}}],
     Selectable->False]},
   Annotation[{{{{}, {}, 
       Annotation[{
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]], 
         Line[CompressedData["
1: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
ftBQw+i/7WocLjH5cPGj+U00NM/nTZsJk8SHewWW7FEaGnzyv6e6gSQSDcsW
+0xQ+nQF1yhuIYlI8aoqzhQNt+uUB8whSdwK/LvzswAdRbgdmp5GJGEUPqlp
JklHvYq7OS5WJAHm/D3ZDDq+kA0e/nSeJNYqirxQlaXjX8PAS512JCH7XFp2
UImOG4zdYeY/kmhNWD3nv4LaH7/xq5wfSdRc2JQ5pEnHy8vC2xIekETJCr3L
x9bSUViqcBPrEUm8TtvbpaZNx0f9L0+WPiEJtwzrH7k76Si7afURsRSSsHW3
99UwpKOyBOtpaxpJWG5x2fZwHx0lw6rGY9+TxDbCM8PiMB3XF37tbs4iiUXF
T6PHT9Mx4W65zbYSkuD3fXHM8hz1vOaHCmfKSGLEMJlRaEPH04fWV9pWkERD
RYZPsCMdVWrtdTdXk8T3wK/6PGc6BoRVcqZqSeKrSeHUyf/oKPQvPSKxgSTi
aqscV12nY9Sd/Q3ZzSQRFt6wLOQWHf/LOnphyT+S8DNvaZu8Q913k1+/SxtJ
ODZzjpT40fHGgrzCn10kYfV8hKb1gI6uwTGLm3pI4rDVVFloEB1fFpkf/dlH
EjqdIngmnI6rZQrCL5MksSpRYrL0CR2lm6oeqwySBPuiTPrqaDpujHfzyBoi
CfpKJYewWDqaez3YvWWEJIS4qhqz8XRchLO8uFGSmEhb3no2iY7Wh/Iejo+R
RO+lNU/LUuiYze0QWTdBEn/WbTZb+4aO5ya8zh7hkcTPUT3JiPd0PLDwe8zZ
SZLIz9jxbe4jHZ97ThDmUyTx0d3IyzqLjvqnj37Vnqb8teWQXvkXOh53MnzK
P0MST2aOTazLpWPVCr1j7yh+QJx6F1lAx6TS9yN7Zym/eZ634y+ho6W2rkMF
xZe3OajZlNFx6xL3Qu05krAWcm2pqKBjHEdxMoBieVZp3VQlHX834cdiiis2
K/3QqKFjjsfSXRyKb5tcKjKtp2M9633KLMUb7Qq/3G6ko9SP5s4pinvvyn1I
a6Zj057k0XaKo6LtU5r+0VFUeElDJsUmmbkvRDvo2KF1PugqxcK/pJ9s7Kb8
lfyEqU5xVv+F4DN9dHRcOHaLoOp1EP7qG8ilo2BSxqdtFKuw6Z5fBulY4qlZ
9J66b622tVvvCB09TD4kSVDsdyjLUXaCjg7+788cofTSs190fvsUlReTZyN+
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

          "]]}, "Charting`Private`Tag#1"]}}, {}}, <|
    "HighlightElements" -> <|
      "Label" -> {"XYLabel"}, "Ball" -> {"InterpolatedBall"}|>, 
     "LayoutOptions" -> <|
      "PanelPlotLayout" -> <||>, 
       "PlotRange" -> {{0, 10}, {-0.9999993680039507, 0.9999995755730018}}, 
       "Frame" -> {{False, False}, {False, False}}, "AxesOrigin" -> {0, 0}, 
       "ImageSize" -> {360, 360/GoldenRatio}, "Axes" -> {True, True}, 
       "LabelStyle" -> {}, "AspectRatio" -> GoldenRatio^(-1), "DefaultStyle" -> {
         Directive[
          Opacity[1.], 
          RGBColor[0.368417, 0.506779, 0.709798], 
          AbsoluteThickness[2]]}, 
       "HighlightLabelingFunctions" -> <|"CoordinatesToolOptions" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), 
         "ScalingFunctions" -> {{Identity, Identity}, {Identity, Identity}}|>,
        "Primitives" -> {}, "GCFlag" -> False|>, 
     "Meta" -> <|
      "DefaultHighlight" -> {"Dynamic", None}, "Index" -> {}, "Function" -> 
       Plot, "GroupHighlight" -> False|>|>, "DynamicHighlight"]],
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 10}, {-0.9999993680039507, 0.9999995755730018}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellLabel->
  "Out[445]=",ExpressionUUID->"63e12202-f19a-468e-9bbc-99bb04f77405"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  GraphicsBox[{{{}, {}, 
     TagBox[
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
UX25u3ZED1invt9rc0AAF+i4lS2U74EtWY67G94JoGSc/kcFsW7g+9GKOVcE
cWw4aZl0WQdouNq4H1oqhNkt6QmbXFugYzTcXDxXGNdbPiqNaakBo84L10Iu
imDP5/NObOEPsK8jeBmTKYYc8ySlGSeC6Cuyvln+Shzfl7o3/xD+SWjT6lS2
nliAgtX6W8uWtxJdgV23ws4uwP2LvXseGrYST8XGu7vtFuCQvq2N+ZFWQmLe
wrf33BegTuHb9zm3W4m+saM76h4swNQt9poLfrUSCc2/Hc8XL8CFB5LC3nj/
JZSTOomgJZK4k7xOvqxuI8Rg9FTzsCQqlmRej9jZSbhv0RL5MCmJl7+8DJxv
2Ul0bT2WFsQvhYOZzsM2zp1E4a6CSUMpKfz476PvWEQnccU08GHyUikUzG1e
c7i3k+g/u7jkv1NSmNz3ooTm20V8uWemRfsmhaXa3U/mf+gm9ILuVvXVSmGw
MV45W95NJD345FrcLIUpG4K63/zqJrwfqRZc7pNCjQ/O+nJz3QTz+9hyUkAa
nSwLLcR39hB1jYUlZkxpfHRbb/Dxjx5iJ8diXM1MGp8MC56faeklomVu/7hx
RBoVP5+8WMHtJUY2vUxvPiaNS5Z9Xnx7tpd45j917pG1NBp3WtgQKn3EpOaT
BlFnaRy4eJlucayPSLX+nTXoL43bmj49l/zRR0g3nPDMy5fGjOx96csy+gmb
Od8jSsXSWPXs6uuIgn4iR+P1WvcyaUw+9pkxVNVPnHfj46yqksbZbcym8739
RCH9+fGEJmkU7vp7zl5lgHDd22Zwb0waP+ys83rvNUA0FJ7ht1hOw1hNoxbF
TRxicMsvxWs6NBRwNNLftZ1DzC/Yv/bZahoudMTI0/s5xHpC71zXRhrO/NLb
cOY0hwj9JP3VZTsNv48wjtzz5xD7M3IiAqxo+Ldny7hLLYewWbP6bdopGvZP
TLpca+EQ198mVlafoWHPaocgt24Okfo6ZFbejoZH11wO1eZxCLFXtmfiL9NQ
SMllQ5ESlyhNkFmZG0xDT/O6XS7HuUTLIv/drQ9p+Oz2sOmhs1xiNG7OWjCc
mp/YmKLuwCUWxfaF7X5KQz/d2pX+nlziVnT+VG0yDdve/Kb9F8UlDMLty7iF
NOSyC1eW1HAJc7m2VlopDQuO6A96NHIJh7DDk2sraGj5WvKDUiuXePLQcMXV
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
j2MTfVzoeN0QbG/NRJVGJdfF/7igbpvPH3CWiQHXssbdx7kQWxfUXmbHRO/T
Eje7BUmIeaeduMWdiUFfVy5vUyIhysFee90DJlpbqFcb7SLh16JDMQdDmdhv
7eFyay8JCs2bpF3Cmbg+/4t4oikJEUbiQ2lPmbh3w6hCpiUJYZop77VSmNgt
HbV/yImEny0PNHa+YmJaad2xB64kyDzyCD/7molRn0x2qXiQEDJvt0fsByam
eMx9mPIiIfhvt75yERMlc948qwkh4XvEt1d6pUx09BU+0/CIBKkDmcyjFUws
DSkc+hxFwv08H75H35iof6fN9r9YEu49Xlws1czE60yny12vSfhiumCd9h8m
1lw9amaaQYK42GiCcRsTtx0jBlIySfB3L/b162Gi2rouUMsjwdfs9B7BUSY+
Xxm4ZclnEmL3N1uenWCiIlk2sP4rCTm7zRzLppjY9uR0w4rvJAxt3vkgQICF
5oGmtvW1JEhszI/lCLFwbXeEiH8DCZqrdTP2i7LwzSmNv4ubSLDUWFbPkGah
t/LrNQqtJFxmx/e4MVjo/F01xbmN0kNRZbJejoVp90tM3nSQUCYppfJEhYV/
bmzR5vaQ0CZyV3uWzULTl7STfX0kTAvw48lFLNz8UzD32wAJq8eHrBctY6Fk
+r8hs0ES9v6zc/XRZqEEv23F2D8SbPs77vSsYuHtkNGSm8Mk3Oo8Hm60joU7
gm52D4+Q8PRPXVLqRhYGe84tPzBGwsfG/dmS+izM0PUICxsnoeZHeaUzsLCZ
T4hdPEEC5+uW3zWGLHxx7nNlE48EkfJs7todLCw6wR/RPEmCeuEavvDdLPTd
MHS7dIoEg5xUGs+YheejRu9HTpNw5MNi9WMHWHjtgetHsxkSLr2OXpt7kIVt
t3vmJim+nyK/g3WYhcobms74zZKQFB982MuChU7furr45kgoihY9336chYu/
v79ziuKWiFtXtp9iYaWS4JaXFPNCpgISz7Dw9EjkwhaKZQJdn4rasjBgykxi
kmJtX06anR0LQ1arK89RvNvLJv+rIwuDJmf+978NZ67+qdZxYaGFzHBQMcXX
3Y60P3Cj1j9jjXhTHOlUPTLszkIr1htXbYozzhsJm3uyMNK5k1ZAnffb6SL5
jzdYaPlD7Is+xX3H9Zco3mZhb+eNuOfU/eYdea/n6UOdL+FdBEnpwTLVNm7x
Y6GHw+JUDYr1jBOPYyALGRNnWnZQ+h3awXaKDWZhpyV95QFKXyeMvDkvlIXT
0i3PDSn9/fXoITbhLNzZdXctk6pPwtqAuPIoFgqKd/S0UfXM1573fmk0C3VE
q4ngURJG1cbqufEsTLy5sTFxiARpFafeA0kszK4pU6FRflkq3zP59iUL96bR
/U6TJJwU/6Vy+S0LvW59bCjqJ+GK0EGdxvcsfCfzkqjupfI/V4mbsliYdOpu
TXk3CZ+Hc0/PESy8Idzl5dJOwrrm58m+X1no6Da8JqOR2k/bdiL9O5WXTktC
t56EgRvaOxt+sNAz8cullz9JiFf/1KH1i4XVBkutDn6j6mf3k/W5i5q/54bt
+yISBnOiHId6Wdh4wMbuST6Vd8lTuYocFv4avpDglEuC91uOhd0wC7+wi0p/
fSBh0lNwjzAfG7v2KPGKkkjoSbBxieJnY7myECmRQEJdVUWktiAbtUo2rjB8
TsJbdnCPuTAbrU/NBFyMJOFCsbJPogQbz/gsWdhxl4RG8fUFuxTYmKr7Jkfx
DAmlayN7mhXZKNIV4rDkBOWH49NSF5XZaHXdKGSRBdXf0gutIllsbB+r2Nq6
n4RdB/dP9y5mo2ljxHMHPSpvUbYbAlaz0SaoYFu7OAkviiqtWGvZ2Ln6V3G2
EAmhA9o+79ax8db2W4PX57jgbDD6s2kjG/dpyVl8HeKCVpuXy3Kg1p+Y13Wr
gQsRSx6/+rqHjW50ms+hZ1wYGd6RcHsvG1clGayyoL4n+/OGnujuZ+O7PAuP
3cFcED5odC/BlI3nR0QnOm5wwc2Td+HaUTZGPL17RNqKC6bfDmutOMfG8flP
FhvIcSEtUpDdbsvGN4H3fFsluCB6Jl0+8gIbr4pcGbAX5EL+hPB8IUc2El+F
mrYOckBH7UNnsysbJQbdpfvLOSDhJhN37xYbF08LGCz+jwO2kB9l6M1GtYLU
lXZ2HCgStQ+ZuMPG5q+Xnzw+yYEr0UVeZ/zYmPl98dwnIw70lrmc1A9mo63P
5popFQ6UKlarDDxlo2K0D+d6/gDcyA+M2JPFRnb6c7nvo/3Q9zs/lJfNxqVi
nUszevrBfGo4ODGHqu8i2WDvpn5Yvt7CTzCfuo+/p0tffj80vNS48qmUjUIW
62Iq/fthdThxbNlPNk7+/ik4oNgPXQ7/mOIkG3vcRpj9y/tgr5JZwudFquhx
T2kFKPZARId2/jENVQzPX26aLdoDHa9EmgY0VXEy0PeDBq8bPDFHWmqZKsYm
/zz7o74bUs+qex5cpYoS6q3XroV2g9jrf6bNm1XRnvUsWUW8G8q23efjmqsi
a4m5XQOnE7Y4lh2j+ami2PpHyxMD2iFG2XrRl1FV9Bu7UrTlbhMsKkp8tO+Y
Gqa++WEwpfsNglcULq3JU0Od2A/+BokpYDM8r7piqTqemZp/69rmYsL6zRDb
L0gd1ThpnMiddYT9rYPTRg/UUf6ygtEuzzrC7WBGvcRDdZSzLzDqfF1H3B11
ux/8SB3NXp141KdQT6Tp8qbCn6qjwPaBHpX+eoJXMFf34qU6PlUV1Zvn30gE
10gEFpep4+7ZF/4fPzYTUXEOtj4V6ih0ePgHp6+ZiHOt2rqrUh2ZMXs/S6j8
Jj7IBU9WVqnjD1V39flev4lmC4btj1p11KfdO9C7s4XQbFfY2taujsuPOMsb
Vv8hVmZcYcZ3UvsfjVPk428l9O408c52q2PcnZwqU4VWwljz6evePnXk+2zT
VLO7lXCxYzP//VPH4a6NVzeltBKe+l68t8PqSIskE9cVthJ3FrT9dB2l9CBS
O9R+tRIR6XEBExPq+Hmh9bY60b9E7M1557In1ZG3z9fwiepf4qXJWUPPaXXM
VFww30z3L5GhVqpiMEutPxd3g8/kL5E3rMGbm1On/jfnRUXb/iX+D01y2q0=

        "]]},
      Annotation[#, "Charting`Private`Tag$54147#1"]& ]}, {}, {}},
   AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
   Axes->{True, True},
   AxesLabel->{None, None},
   AxesOrigin->{0, 0},
   DisplayFunction->Identity,
   Frame->{{False, False}, {False, False}},
   FrameLabel->{{None, None}, {None, None}},
   FrameTicks->{{Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
      Charting`ScaledFrameTicks[{Identity, Identity}]}},
   GridLines->{None, None},
   GridLinesStyle->Directive[
     GrayLevel[0.5, 0.4]],
   ImagePadding->All,
   Method->{
    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
     AbsolutePointSize[6], "ScalingFunctions" -> None, 
     "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& ), "CopiedValueFunction" -> ({
         (Identity[#]& )[
          Part[#, 1]], 
         (Identity[#]& )[
          Part[#, 2]]}& )}},
   PlotRange->{{0, 10}, {-0.9999993680039507, 0.9999995755730018}},
   PlotRangeClipping->True,
   PlotRangePadding->{{
      Scaled[0.02], 
      Scaled[0.02]}, {
      Scaled[0.05], 
      Scaled[0.05]}},
   Ticks->{Automatic, Automatic}], "//", "FullForm"}]], "Input",
 CellLabel->
  "In[446]:=",ExpressionUUID->"f3ae469b-df3b-4b95-9bd3-d1113a6fde5c"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Graphics", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"List", "[", "]"}], ",", 
         RowBox[{"List", "[", "]"}], ",", 
         RowBox[{"Annotation", "[", 
          RowBox[{
           RowBox[{"List", "[", 
            RowBox[{
             RowBox[{"RGBColor", "[", 
              RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}], 
              "]"}], ",", 
             RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}], ",", 
             RowBox[{"Opacity", "[", "1.`", "]"}], ",", 
             RowBox[{"Line", "[", 
              RowBox[{"List", "[", 
               RowBox[{
                RowBox[{"List", "[", 
                 RowBox[{
                 "2.0408163265306121`*^-7", ",", "2.0408163265305978`*^-7"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{
                 "0.003067179205596267`", ",", "0.003067174396472005`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{
                 "0.006134154329559881`", ",", "0.0061341158604597676`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{
                 "0.01226810457748711`", ",", "0.012267796841781068`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{
                 "0.02453600507334157`", ",", "0.024533543304699663`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.04907180606505048`", ",", "0.0490521139399392`"}],
                  "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{
                 "0.09814340804846831`", ",", "0.09798592892356191`"}], "]"}],
                 ",", 
                RowBox[{"List", "[", 
                 RowBox[{
                 "0.19628661201530398`", ",", "0.19502860195572932`"}], "]"}],
                 ",", 
                RowBox[{"List", "[", 
                 RowBox[{
                 "0.40908357085458646`", ",", "0.39776868446568137`"}], "]"}],
                 ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.6077788357015209`", ",", "0.5710454755423935`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.6108225490216341`", ",", "0.573541466902322`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.6138662623417472`", ",", "0.5760321448687856`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.6199536889819734`", ",", "0.5809974683743646`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.6321285422624259`", ",", "0.5908633427279114`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.6564782488233307`", ",", "0.6103308994957796`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.7051776619451406`", ",", "0.6481691286974287`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.8025764881887605`", ",", "0.7191487645131058`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.8058781788667737`", ",", "0.7214390406081819`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.809179869544787`", ",", "0.7237214521870288`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.8157832509008136`", ",", "0.7282625823583804`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.8289900136128668`", ",", "0.7372493795234493`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.8554035390369732`", ",", "0.7548356644742835`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.9082305898851858`", ",", "0.7884165364259111`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.9115322805631991`", ",", "0.7904432431733255`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.9148339712412124`", ",", "0.7924613331792489`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.921437352597239`", ",", "0.7964715750627762`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.9346441153092921`", ",", "0.804387696276613`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"0.9610576407333984`", ",", "0.8197976881111924`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.013884691581611`", ",", "0.8488915645992572`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.016966043290994`", ",", "0.850516232967617`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.0200473950003768`", ",", "0.8521328259217712`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.0262100984191425`", ",", "0.8553417242678868`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.0385355052566738`", ",", "0.8616619457843107`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.0631863189317368`", ",", "0.8739087537320744`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.1124879462818624`", ",", "0.8968022063752259`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.1155692979912453`", ",", "0.8981612344269452`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.118650649700628`", ",", "0.8995117346884705`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.1248133531193938`", ",", "0.9021871006315371`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.1371387599569251`", ",", "0.9074349402797613`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.161789573631988`", ",", "0.9175162878179421`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.2110912009821138`", ",", "0.936000659566162`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.2144305300493967`", ",", "0.9371708766342434`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.2177698591166797`", ",", "0.9383306432084237`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.2244485172512458`", ",", "0.94061877326103`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.2378058335203779`", ",", "0.9450690662268423`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.2645204660586422`", ",", "0.9534630440542947`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.2678597951259252`", ",", "0.9544645668925741`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.2711991241932084`", ",", "0.9554554463931402`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.2778777823277743`", ",", "0.9574052313023228`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.2912350985969065`", ",", "0.9611766028612677`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.3179497311351707`", ",", "0.9682042380273559`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.3212890602024536`", ",", "0.9690342082823131`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.3246283892697366`", ",", "0.9698533727319089`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.3313070474043027`", ",", "0.9714592477972481`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.3446643636734348`", ",", "0.9745409344272583`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.348003692740718`", ",", "0.9752842092312425`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.351343021808001`", ",", "0.9760166085354277`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.358021679942567`", ",", "0.9774487480975111`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.3713789962116991`", ",", "0.9801821700097173`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.374718325278982`", ",", "0.9808382189401625`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.3780576543462653`", ",", "0.9814833304374454`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.3847363124808312`", ",", "0.9827407124797364`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.3980936287499635`", ",", "0.9851239190245863`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4014329578172464`", ",", "0.9856922739058528`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4047722868845294`", ",", "0.9862496372258647`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4114509450190955`", ",", "0.9873313644438868`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4248082612882276`", ",", "0.9893626548957224`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4280866901623903`", ",", "0.9898342503946744`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.431365119036553`", ",", "0.9902952070697238`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4379219767848788`", ",", "0.9911851842449072`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.45103569228153`", ",", "0.992837262382446`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4543141211556927`", ",", "0.9932236149769051`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4575925500298554`", ",", "0.993599292318279`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4641494077781811`", ",", "0.9943186052053025`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4772631232748323`", ",", "0.9956289579712925`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.480541552148995`", ",", "0.9959298019129903`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4838199810231578`", ",", "0.996219941515272`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4903768387714835`", ",", "0.9967680953428903`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4936552676456465`", ",", "0.9970261036766223`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.4969336965198092`", ",", "0.9972733958877922`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5034905542681347`", ",", "0.9977358214259805`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5067689831422975`", ",", "0.9979509497828093`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5100474120164602`", ",", "0.9981553520767504`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.513325840890623`", ",", "0.9983490261108704`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.516604269764786`", ",", "0.998531969803544`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5198826986389489`", ",", "0.9987041811884766`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5231611275131116`", ",", "0.9988656584147254`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.529717985261437`", ",", "0.9991564035642774`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5329964141355998`", ",", "0.9992856683626266`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5362748430097626`", ",", "0.9994041927524177`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5395532718839253`", ",", "0.9995119754597404`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5428317007580883`", ",", "0.9996090153261367`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5461101296322513`", ",", "0.9996953113086139`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.549388558506414`", ",", "0.9997708624796553`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5526669873805767`", ",", "0.9998356680272303`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5559454162547395`", ",", "0.9998897272548034`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5592238451289022`", ",", "0.9999330395813414`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.562502274003065`", ",", "0.9999656045413196`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5657807028772277`", ",", "0.9999874217847269`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5690591317513907`", ",", "0.9999984910770698`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5723375606255536`", ",", "0.9999988122993747`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5756159894997164`", ",", "0.9999883854481889`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5788944183738791`", ",", "0.9999672106355811`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5821728472480419`", ",", "0.9999352880891402`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5854512761222046`", ",", "0.9998926181519723`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.5887297049963673`", ",", "0.9998392012826975`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.59200813387053`", ",", "0.9997750380554452`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.595286562744693`", ",", "0.999700129159847`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.598564991618856`", ",", "0.9996144754010303`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6018434204930188`", ",", "0.9995180776996092`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6051218493671815`", ",", "0.9994109370916744`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6084002782413442`", ",", "0.9992930547287823`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.611678707115507`", ",", "0.9991644318779429`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6149571359896697`", ",", "0.9990250699216056`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6182355648638325`", ",", "0.9988749703576446`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6215139937379952`", ",", "0.9987141347993431`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.624792422612158`", ",", "0.9985425649753756`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6280708514863207`", ",", "0.9983602627297894`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6346277092346464`", ",", "0.9979634689266934`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6376857991401788`", ",", "0.9977637332235948`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6407438890457111`", ",", "0.9975546665272722`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6468600688567758`", ",", "0.9971085480628875`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6499181587623082`", ",", "0.9968715004668838`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6529762486678405`", ",", "0.9966251302217333`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6590924284789053`", ",", "0.996104431087281`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6621505183844376`", ",", "0.995830107067509`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.66520860828997`", ",", "0.9955464701376039`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6713247881010347`", ",", "0.994951268244648`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6835571477231641`", ",", "0.9936492320813101`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6866152376286965`", ",", "0.9933004839257702`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6896733275342288`", ",", "0.9929424465168967`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.6957895073452935`", ",", "0.9921985174193191`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.708021866967423`", ",", "0.9905993413273053`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.7110799568729553`", ",", "0.9901763777592005`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.7141380467784877`", ",", "0.989744154154111`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.7202542265895524`", ",", "0.9888519430879984`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.7324865862116818`", ",", "0.9869565841624232`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.7355446761172142`", ",", "0.9864596583223341`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.7386027660227465`", ",", "0.9859535072036734`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.7447189458338113`", ",", "0.9849135481507784`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.7569513054559407`", ",", "0.9827231407500011`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.7814160247001996`", ",", "0.9779015447747457`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.784474114605732`", ",", "0.9772576306979353`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.7875322045112643`", ",", "0.9766045773990558`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.793648384322329`", ",", "0.975271077649676`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.8058807439444584`", ",", "0.9724946819263413`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.8303454631887173`", ",", "0.9665057881723859`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.83366153045215`", ",", "0.9656494242704834`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.8369775977155824`", ",", "0.9647824418055236`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.8436097322424474`", ",", "0.9630166594374617`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.8568740012961777`", ",", "0.9593580992329546`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.883402539403638`", ",", "0.9515352888341971`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.8867186066670705`", ",", "0.9505102370853316`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.890034673930503`", ",", "0.9494747332483319`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.8966668084573681`", ",", "0.9473724149715494`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.9099310775110983`", ",", "0.9430428620603742`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.9364596156185585`", ",", "0.9338867952195624`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.939775682881991`", ",", "0.9326959405222222`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.9430917501454235`", ",", "0.9314948296279548`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.9497238846722886`", ",", "0.9290618921923388`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.9629881537260188`", ",", "0.9240735316379942`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"1.989516691833479`", ",", "0.9136099771257475`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.0425737680483995`", ",", "0.8907619014880908`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.0456694963432014`", ",", "0.8893507189122809`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.0487652246380037`", ",", "0.8879310132207139`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.0549566812276083`", ",", "0.8850660869950057`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.0673395944068167`", ",", "0.879234561265666`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.0921054207652334`", ",", "0.8671679734685209`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.141637073482067`", ",", "0.841446983807518`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.240700378915734`", ",", "0.7838812445612745`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.2437352070174157`", ",", "0.7819932801341071`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.2467700351190976`", ",", "0.7800981134123421`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.2528396913224613`", ",", "0.7762862429704589`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.264979003729189`", ",", "0.7685768469880191`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.289257628542644`", ",", "0.7528194327983059`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.3378148781695534`", ",", "0.7199829672218543`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.434929377423373`", ",", "0.6492997029050673`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.645668926836623`", ",", "0.47584429912920323`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"2.842306782257525`", ",", "0.29483789819045414`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.0554551885840384`", ",", "0.08603098602342707`"}],
                  "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.264705982550857`", ",", 
                  RowBox[{"-", "0.12280256200059698`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.459855082525327`", ",", 
                  RowBox[{"-", "0.3129167225880381`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.6715147334054086`", ",", 
                  RowBox[{"-", "0.5054661095842053`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.6746015764817797`", ",", 
                  RowBox[{"-", "0.5081271687824173`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.6776884195581503`", ",", 
                  RowBox[{"-", "0.5107833862438425`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.683862105710892`", ",", 
                  RowBox[{"-", "0.5160811947626537`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.6962094780163754`", ",", 
                  RowBox[{"-", "0.5266176004388874`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.720904222627342`", ",", 
                  RowBox[{"-", "0.5474479601857665`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.770293711849275`", ",", 
                  RowBox[{"-", "0.5880946805623147`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.869072690293142`", ",", 
                  RowBox[{"-", "0.6649897074659379`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.872417510727413`", ",", 
                  RowBox[{"-", "0.6674840704930735`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.875762331161684`", ",", 
                  RowBox[{"-", "0.669970965833043`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.8824519720302257`", ",", 
                  RowBox[{"-", "0.6749222422436594`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.8958312537673097`", ",", 
                  RowBox[{"-", "0.684733964246249`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.922589817241478`", ",", 
                  RowBox[{"-", "0.7039879665747623`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.976106944189814`", ",", 
                  RowBox[{"-", "0.7409704269898263`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.979451764624085`", ",", 
                  RowBox[{"-", "0.743212450763524`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.982796585058356`", ",", 
                  RowBox[{"-", "0.7454461596150754`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"3.989486225926898`", ",", 
                  RowBox[{"-", "0.7498885326837736`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.002865507663982`", ",", 
                  RowBox[{"-", "0.7586724064484666`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.02962407113815`", ",", 
                  RowBox[{"-", "0.7758311931576027`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.083141198086486`", ",", 
                  RowBox[{"-", "0.8084704447825177`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.086425118327638`", ",", 
                  RowBox[{"-", "0.8103987898269367`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.089709038568788`", ",", 
                  RowBox[{"-", "0.8123183954315653`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.096276879051089`", ",", 
                  RowBox[{"-", "0.8161313056108752`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.109412560015693`", ",", 
                  RowBox[{"-", "0.8236513481784278`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.135683921944899`", ",", 
                  RowBox[{"-", "0.8382638129104198`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.1882266458033115`", ",", 
                  RowBox[{"-", "0.865743486783535`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.191510566044462`", ",", 
                  RowBox[{"-", "0.8673823782856063`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.194794486285613`", ",", 
                  RowBox[{"-", "0.8690119158298916`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.2013623267679145`", ",", 
                  RowBox[{"-", "0.8722428588536386`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.214498007732518`", ",", 
                  RowBox[{"-", "0.8785917309716644`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.240769369661724`", ",", 
                  RowBox[{"-", "0.8908336196784521`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.293312093520136`", ",", 
                  RowBox[{"-", "0.9134649602503837`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.296375674792657`", ",", 
                  RowBox[{"-", "0.914707296138147`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.299439256065177`", ",", 
                  RowBox[{"-", "0.9159410470196603`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.305566418610217`", ",", 
                  RowBox[{"-", "0.9183827475270331`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.317820743700299`", ",", 
                  RowBox[{"-", "0.9231626243851228`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.342329393880461`", ",", 
                  RowBox[{"-", "0.9323057965514431`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.345392975152981`", ",", 
                  RowBox[{"-", "0.9334094281873865`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.348456556425502`", ",", 
                  RowBox[{"-", "0.9345042992877923`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.354583718970542`", ",", 
                  RowBox[{"-", "0.9366677188605578`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.366838044060623`", ",", 
                  RowBox[{"-", "0.9408889849590599`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.391346694240786`", ",", 
                  RowBox[{"-", "0.9489070341684989`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.394410275513307`", ",", 
                  RowBox[{"-", "0.94986931039249`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.397473856785827`", ",", 
                  RowBox[{"-", "0.9508226715963423`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.403601019330868`", ",", 
                  RowBox[{"-", "0.9527026132362134`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.415855344420949`", ",", 
                  RowBox[{"-", "0.9563551281876779`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.440363994601112`", ",", 
                  RowBox[{"-", "0.9632287933646049`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.443427575873633`", ",", 
                  RowBox[{"-", "0.9640474025825584`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.446491157146153`", ",", 
                  RowBox[{"-", "0.9648569637115645`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.452618319691194`", ",", 
                  RowBox[{"-", "0.9664489113951094`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.464872644781275`", ",", 
                  RowBox[{"-", "0.9695239010744487`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.489381294961437`", ",", 
                  RowBox[{"-", "0.9752366701993724`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.492702853591858`", ",", 
                  RowBox[{"-", "0.9759658976902298`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.496024412222278`", ",", 
                  RowBox[{"-", "0.9766843576015352`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.502667529483119`", ",", 
                  RowBox[{"-", "0.9780889430980446`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.515953764004802`", ",", 
                  RowBox[{"-", "0.9807685623367843`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.519275322635223`", ",", 
                  RowBox[{"-", "0.9814114339103422`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.522596881265644`", ",", 
                  RowBox[{"-", "0.9820434778251544`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.529239998526484`", ",", 
                  RowBox[{"-", "0.9832750549053687`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.542526233048166`", ",", 
                  RowBox[{"-", "0.9856079783541428`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.545847791678587`", ",", 
                  RowBox[{"-", "0.9861640401079924`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.549169350309008`", ",", 
                  RowBox[{"-", "0.9867092217688203`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.555812467569848`", ",", 
                  RowBox[{"-", "0.9877669208721208`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.56909870209153`", ",", 
                  RowBox[{"-", "0.9897515013596799`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.572420260721951`", ",", 
                  RowBox[{"-", "0.9902203606838819`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.575741819352372`", ",", 
                  RowBox[{"-", "0.9906782951627253`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.582384936613212`", ",", 
                  RowBox[{"-", "0.9915613694958325`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.595671171134894`", ",", 
                  RowBox[{"-", "0.9931962058000651`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.598992729765315`", ",", 
                  RowBox[{"-", "0.9935775316543534`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.6023142883957355`", ",", 
                  RowBox[{"-", "0.9939478956244835`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.608957405656576`", ",", 
                  RowBox[{"-", "0.9946557216887337`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.612278964286997`", ",", 
                  RowBox[{"-", "0.9949931759735918`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.615600522917417`", ",", 
                  RowBox[{"-", "0.9953196527558538`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.622243640178258`", ",", 
                  RowBox[{"-", "0.995939659526005`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.625565198808679`", ",", 
                  RowBox[{"-", "0.9962331826735198`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.6288867574390995`", ",", 
                  RowBox[{"-", "0.9965157146377649`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.63552987469994`", ",", 
                  RowBox[{"-", "0.9970477926693346`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.638851433330361`", ",", 
                  RowBox[{"-", "0.99729733286638`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.642172991960781`", ",", 
                  RowBox[{"-", "0.9975358701396615`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.648816109221622`", ",", 
                  RowBox[{"-", "0.9979799255094743`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.652137667852043`", ",", 
                  RowBox[{"-", "0.9981854387068575`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.6554592264824635`", ",", 
                  RowBox[{"-", "0.9983799391822348`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.658780785112883`", ",", 
                  RowBox[{"-", "0.9985634247897324`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.662102343743304`", ",", 
                  RowBox[{"-", "0.9987358935050012`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.665423902373725`", ",", 
                  RowBox[{"-", "0.9988973434252386`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.668745461004145`", ",", 
                  RowBox[{"-", "0.9990477727692091`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.672067019634565`", ",", 
                  RowBox[{"-", "0.9991871798772648`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.675388578264986`", ",", 
                  RowBox[{"-", "0.999315563211363`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.678710136895407`", ",", 
                  RowBox[{"-", "0.9994329213550834`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.682031695525827`", ",", 
                  RowBox[{"-", "0.9995392530136443`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.685353254156247`", ",", 
                  RowBox[{"-", "0.9996345570139157`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.688674812786668`", ",", 
                  RowBox[{"-", "0.9997188323044333`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.691996371417089`", ",", 
                  RowBox[{"-", "0.9997920779554096`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.6953179300475085`", ",", 
                  RowBox[{"-", "0.9998542931587442`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.698639488677929`", ",", 
                  RowBox[{"-", "0.9999054772280328`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.70196104730835`", ",", 
                  RowBox[{"-", "0.9999456295985749`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.70506226697014`", ",", 
                  RowBox[{"-", "0.9999731597553378`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.70816348663193`", ",", 
                  RowBox[{"-", "0.9999910726145558`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.71126470629372`", ",", 
                  RowBox[{"-", "0.9999993680039507`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.71436592595551`", ",", 
                  RowBox[{"-", "0.9999980458437414`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.7174671456173005`", ",", 
                  RowBox[{"-", "0.9999871061466439`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.720568365279091`", ",", 
                  RowBox[{"-", "0.999966549017871`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.723669584940881`", ",", 
                  RowBox[{"-", "0.9999363746551323`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.726770804602671`", ",", 
                  RowBox[{"-", "0.9998965833486313`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.729872024264461`", ",", 
                  RowBox[{"-", "0.9998471754810633`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.732973243926251`", ",", 
                  RowBox[{"-", "0.9997881515276109`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.736074463588041`", ",", 
                  RowBox[{"-", "0.9997195120559406`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.739175683249831`", ",", 
                  RowBox[{"-", "0.9996412577261959`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.742276902911621`", ",", 
                  RowBox[{"-", "0.9995533892909927`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.7453781225734115`", ",", 
                  RowBox[{"-", "0.9994559075954103`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.748479342235202`", ",", 
                  RowBox[{"-", "0.9993488135769842`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.751580561896991`", ",", 
                  RowBox[{"-", "0.9992321082656974`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.75468178155878`", ",", 
                  RowBox[{"-", "0.9991057927839695`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.75778300122057`", ",", 
                  RowBox[{"-", "0.9989698683466467`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.76398544054415`", ",", 
                  RowBox[{"-", "0.9986691979266621`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.7670866602059405`", ",", 
                  RowBox[{"-", "0.9985044548357147`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.770187879867731`", ",", 
                  RowBox[{"-", "0.9983301085725738`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.776390319191311`", ",", 
                  RowBox[{"-", "0.9979526133291932`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.779491538853101`", ",", 
                  RowBox[{"-", "0.9977494679795352`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.782592758514891`", ",", 
                  RowBox[{"-", "0.9975367267188118`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.788795197838471`", ",", 
                  RowBox[{"-", "0.9970824647406413`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.801200076485632`", ",", 
                  RowBox[{"-", "0.9960588860586369`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.804301296147422`", ",", 
                  RowBox[{"-", "0.995779035875485`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.807402515809212`", ",", 
                  RowBox[{"-", "0.995489608732008`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.813604955132792`", ",", 
                  RowBox[{"-", "0.9948820347904858`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.826009833779953`", ",", 
                  RowBox[{"-", "0.9935520920289326`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.829111053441743`", ",", 
                  RowBox[{"-", "0.9931957092579714`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.832212273103533`", ",", 
                  RowBox[{"-", "0.9928297743719727`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.838414712427113`", ",", 
                  RowBox[{"-", "0.9920692624242938`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.8508195910742735`", ",", 
                  RowBox[{"-", "0.9904337741529672`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.853920810736064`", ",", 
                  RowBox[{"-", "0.9900010781451142`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.857022030397854`", ",", 
                  RowBox[{"-", "0.9895588607467664`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.863224469721434`", ",", 
                  RowBox[{"-", "0.9886458788823194`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.875629348368594`", ",", 
                  RowBox[{"-", "0.98670585173196`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.900439105662914`", ",", 
                  RowBox[{"-", "0.9823706192741464`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.903479425131584`", ",", 
                  RowBox[{"-", "0.9817977111324464`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.906519744600255`", ",", 
                  RowBox[{"-", "0.9812157277088956`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.912600383537594`", ",", 
                  RowBox[{"-", "0.9800245566184178`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.924761661412273`", ",", 
                  RowBox[{"-", "0.9775335533712588`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.949084217161632`", ",", 
                  RowBox[{"-", "0.9721182201104046`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.9521245366303015`", ",", 
                  RowBox[{"-", "0.9714007998631828`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.955164856098971`", ",", 
                  RowBox[{"-", "0.9706744004383272`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.961245495036311`", ",", 
                  RowBox[{"-", "0.9691946909966466`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.973406772910991`", ",", 
                  RowBox[{"-", "0.9661278229728828`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"4.997729328660349`", ",", 
                  RowBox[{"-", "0.9595659056233731`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.000769648129019`", ",", 
                  RowBox[{"-", "0.9587056706010422`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.0038099675976895`", ",", 
                  RowBox[{"-", "0.9578365737489534`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.009890606535029`", ",", 
                  RowBox[{"-", "0.9560718267714534`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.0220518844097075`", ",", 
                  RowBox[{"-", "0.9524363498136532`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.046374440159067`", ",", 
                  RowBox[{"-", "0.94474337308632`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.095019551657784`", ",", 
                  RowBox[{"-", "0.927685690836621`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.0983178484843545`", ",", 
                  RowBox[{"-", "0.9264491880027492`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.101616145310924`", ",", 
                  RowBox[{"-", "0.9252026065578339`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.108212738964064`", ",", 
                  RowBox[{"-", "0.9226792621893687`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.121405926270344`", ",", 
                  RowBox[{"-", "0.9175122341427496`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.147792300882904`", ",", 
                  RowBox[{"-", "0.9067000050918066`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.2005650501080245`", ",", 
                  RowBox[{"-", "0.8831897793030962`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.203863346934595`", ",", 
                  RowBox[{"-", "0.8816380248061503`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.2071616437611645`", ",", 
                  RowBox[{"-", "0.8800766791876965`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.2137582374143046`", ",", 
                  RowBox[{"-", "0.8769252826323857`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.226951424720585`", ",", 
                  RowBox[{"-", "0.8705081503932262`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.253337799333145`", ",", 
                  RowBox[{"-", "0.8572204733867919`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.306110548558265`", ",", 
                  RowBox[{"-", "0.8288643941172731`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.309188506416204`", ",", 
                  RowBox[{"-", "0.8271385083955922`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.312266464274144`", ",", 
                  RowBox[{"-", "0.8254047865149695`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.318422379990023`", ",", 
                  RowBox[{"-", "0.8219139000508384`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.330734211421781`", ",", 
                  RowBox[{"-", "0.8148388208684657`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.355357874285298`", ",", 
                  RowBox[{"-", "0.8003192156194565`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.404605200012331`", ",", 
                  RowBox[{"-", "0.7698334159184131`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.503099851466398`", ",", 
                  RowBox[{"-", "0.7033401682558308`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.506435786682237`", ",", 
                  RowBox[{"-", "0.7009648980989094`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.509771721898077`", ",", 
                  RowBox[{"-", "0.6985818272867536`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.516443592329757`", ",", 
                  RowBox[{"-", "0.6937923898628231`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.5297873331931156`", ",", 
                  RowBox[{"-", "0.6841210798072601`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.5564748149198335`", ",", 
                  RowBox[{"-", "0.6644147744115163`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.6098497783732695`", ",", 
                  RowBox[{"-", "0.6235969874691808`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.716599705280141`", ",", 
                  RowBox[{"-", "0.5367543236858701`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"5.92620194673419`", ",", 
                  RowBox[{"-", "0.349449371313095`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"6.121702494195891`", ",", 
                  RowBox[{"-", "0.16078190436227452`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"6.333713592563203`", ",", "0.0505067874363572`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"6.531622996938168`", ",", "0.2458899161374658`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"6.725634788953437`", ",", "0.4281543577493183`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"6.936157131874317`", ",", "0.6075495513221201`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"6.939226204513826`", ",", "0.6099843946526179`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"6.942295277153335`", ",", "0.6124134924184268`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"6.948433422432351`", ",", "0.6172543597896865`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"6.9607097129903845`", ",", "0.6268661446814728`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"6.985262294106451`", ",", "0.6458048637829591`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.034367456338584`", ",", "0.6825032489157954`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.037436528978093`", ",", "0.6847431627421313`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.040505601617601`", ",", "0.6869766268360289`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.046643746896617`", ",", "0.6914241217376856`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.058920037454651`", ",", "0.7002407931988823`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.083472618570717`", ",", "0.7175562330625451`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.13257778080285`", ",", "0.750879309351232`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.135904830800259`", ",", "0.7530724645210166`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.1392318807976665`", ",", "0.7552572837423123`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.1458859807924835`", ",", "0.7596018176947266`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.1591941807821176`", ",", "0.7681897963230189`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.185810580761386`", ",", "0.7849561046138263`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.239043380719922`", ",", "0.8168090706547646`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.24237043071733`", ",", "0.818723948434164`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.245697480714739`", ",", "0.82062976355229`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.252351580709556`", ",", "0.8244141215214849`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.26565978069919`", ",", "0.8318731640527933`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.292276180678458`", ",", "0.8463479660500204`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.345508980636994`", ",", "0.8734891052809138`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.348615691665772`", ",", "0.8749973702195117`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.35172240269455`", ",", "0.8764971899935446`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.357935824752107`", ",", "0.879471436226649`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.3703626688672195`", ",", "0.8853179552642713`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.395216357097444`", ",", "0.896599967344926`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.398323068126222`", ",", "0.8979714185360828`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.401429779155`", ",", "0.8993342028253004`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.407643201212556`", ",", "0.9020337181692524`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.420070045327668`", ",", "0.9073281729170938`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.444923733557893`", ",", "0.9174959454468838`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.448030444586671`", ",", "0.9187271949747402`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.451137155615449`", ",", "0.9199495772732584`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.4573505776730045`", ",", "0.9223676930759747`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.469777421788117`", ",", "0.9270970045653364`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.494631110018341`", ",", "0.9361254199476448`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.54433848647879`", ",", "0.952442370184934`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.547384297314448`", ",", "0.9533660666116314`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.550430108150106`", ",", "0.9542809187028245`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.556521729821421`", ",", "0.9560840560126518`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.568704973164053`", ",", "0.9595838306832306`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.593071459849316`", ",", "0.9661555898135182`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.596117270684974`", ",", "0.9669368045568124`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.599163081520632`", ",", "0.9677090490694565`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.605254703191948`", ",", "0.9692265988297639`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.6174379465345785`", ",", "0.9721537459467288`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.641804433219841`", ",", "0.9775747379997706`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.644850244055499`", ",", "0.9782116161178157`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.647896054891157`", ",", "0.9788394194092749`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.653987676562473`", ",", "0.9800677783002613`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.666170919905103`", ",", "0.9824153475497298`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.669216730740761`", ",", "0.9829794687013498`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.672262541576419`", ",", "0.9835344707952232`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.678354163247734`", ",", "0.9846170972994532`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.690537406590366`", ",", "0.9866727007446359`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.693583217426024`", ",", "0.9871637300131917`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.696629028261682`", ",", "0.9876456014067905`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.702720649932997`", ",", "0.9885818527729167`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.714903893275629`", ",", "0.9903442700096574`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.7179497041112874`", ",", "0.9907619158728898`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.720995514946945`", ",", "0.9911703704809516`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.727087136618261`", ",", "0.9919596908600037`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.7392703799608915`", ",", "0.9934278755477132`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.74257416815445`", ",", "0.9938006043080094`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.745877956348007`", ",", "0.9941624857282501`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.752485532735124`", ",", "0.9948536908672547`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.755789320928681`", ",", "0.99518300704151`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.759093109122239`", ",", "0.995501460786775`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.765700685509355`", ",", "0.9961057672052367`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.769004473702913`", ",", "0.9963916132824249`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.772308261896471`", ",", "0.9966665837386779`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.778915838283587`", ",", "0.9971838859019008`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.782219626477145`", ",", "0.9974262119625144`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.785523414670703`", ",", "0.9976576511095413`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.792130991057819`", ",", "0.9980878586770545`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.795434779251377`", ",", "0.9982866224018223`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.798738567444936`", ",", "0.9984744898216181`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.802042355638493`", ",", "0.9986514588858675`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.805346143832051`", ",", "0.9988175276629523`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.8086499320256095`", ",", "0.9989726943402304`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.811953720219167`", ",", "0.9991169572240568`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.815257508412725`", ",", "0.9992503147398011`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.818561296606283`", ",", "0.999372765431865`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.821865084799842`", ",", "0.9994843079636987`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.8251688729934`", ",", "0.9995849411178145`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.828472661186957`", ",", "0.9996746637958008`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.8317764493805155`", ",", "0.9997534750183343`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.835080237574074`", ",", "0.9998213739251898`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.838384025767631`", ",", "0.9998783597752502`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.841687813961189`", ",", "0.9999244319465147`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.844991602154748`", ",", "0.9999595899361052`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.848295390348306`", ",", "0.9999838333602721`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.851599178541864`", ",", "0.9999971619543983`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.8549029667354215`", ",", "0.9999995755730018`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.85820675492898`", ",", "0.9999910741897383`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.861510543122538`", ",", "0.9999716578974003`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.864814331316095`", ",", "0.9999413269079168`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.868118119509654`", ",", "0.9999000815523507`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.871421907703212`", ",", "0.9998479222808953`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.87472569589677`", ",", "0.9997848496628694`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.878029484090328`", ",", "0.9997108643867111`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.881333272283886`", ",", "0.9996259672599702`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.884637060477444`", ",", "0.9995301592092992`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.887940848671002`", ",", "0.9994234412804438`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.89124463686456`", ",", "0.9993058146382309`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.894548425058118`", ",", "0.9991772805665557`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.897852213251676`", ",", "0.999037840468369`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.9011560014452344`", ",", "0.9988874958656598`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.904459789638793`", ",", "0.9987262483994409`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.911067366025908`", ",", "0.9983710520355275`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.914371154219467`", ",", "0.9981771070148036`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.917674942413024`", ",", "0.9979722668844687`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.9242825188001405`", ",", "0.9975299103571872`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.927586306993698`", ",", "0.997292398788565`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.930890095187256`", ",", "0.9970440017669278`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.937497671574372`", ",", "0.9965145623284143`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.950712824348604`", ",", "0.9953251852672744`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.953796273573531`", ",", "0.9950226533466435`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.956879722798458`", ",", "0.9947106610973004`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.9630466212483135`", ",", "0.9940583075676505`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.975380418148024`", ",", "0.9926402131044143`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.978463867372952`", ",", "0.9922620866441562`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.981547316597879`", ",", "0.9918745261016924`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"7.987714215047735`", ",", "0.9910711175989717`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.000048011947445`", ",", "0.9893512597430998`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.003131461172373`", ",", "0.9888977688177869`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.0062149103973`", ",", "0.9884348757970303`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.012381808847156`", ",", "0.9874809011626378`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.024715605746866`", ",", "0.9854603263776878`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.049383199546286`", ",", "0.980969780482885`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.052466648771212`", ",", "0.9803664341081353`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.05555009799614`", ",", "0.9797537667508995`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.061716996445995`", ",", "0.9785004924776469`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.074050793345705`", ",", "0.9758823543732353`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.098718387145126`", ",", "0.9702011435406177`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.101801836370054`", ",", "0.9694494099399803`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.104885285594982`", ",", "0.9686884591521194`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.111052184044837`", ",", "0.9671389350417117`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.123385980944548`", ",", "0.963929604770766`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.148053574743969`", ",", "0.9570715540399549`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.151395001326797`", ",", "0.9560976945697403`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.154736427909624`", ",", "0.9551131601528681`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.161419281075279`", ",", "0.9531121105679975`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.174784987406591`", ",", "0.9489824036763137`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.201516400069213`", ",", "0.9402151808319549`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.204857826652042`", ",", "0.9390719077531938`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.208199253234868`", ",", "0.937918149822749`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.214882106400523`", ",", "0.9355792310511147`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.228247812731835`", ",", "0.9307761499144376`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.254979225394457`", ",", "0.9206720553555711`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.258320651977286`", ",", "0.9193626356773488`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.261662078560112`", ",", "0.9180429512038546`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.268344931725768`", ",", "0.9153728469232395`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.28171063805708`", ",", "0.9099101167923438`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.308442050719702`", ",", "0.8984980239083058`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.361904876044944`", ",", "0.8737564508460061`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.365185402434651`", ",", "0.872156223086056`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.36846592882436`", ",", "0.8705466093171135`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.375026981603774`", ",", "0.8672992931427271`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.388149087162603`", ",", "0.8606927976168782`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.414393298280263`", ",", "0.8470363688310834`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.466881720515584`", ",", "0.817983208140217`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.571858564986224`", ",", "0.7532039528854418`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.5749187524073`", ",", "0.7511874775864439`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.577978939828377`", ",", "0.7491639676122184`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.584099314670532`", ",", "0.7450959195023652`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.596340064354841`", ",", "0.7368762453562296`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.620821563723457`", ",", "0.7201069176671644`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.66978456246069`", ",", "0.6852838608186039`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.767710559935155`", ",", "0.610797488292236`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"8.980073105789698`", ",", "0.43019146051288054`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.178333957651894`", ",", "0.24395695274087126`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.372697197154395`", ",", "0.05205722277907331`"}], 
                 "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.583570987562506`", ",", 
                  RowBox[{"-", "0.15812653397730536`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.78034308397827`", ",", 
                  RowBox[{"-", "0.3481201954961809`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.783775220102335`", ",", 
                  RowBox[{"-", "0.3513355945232077`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.787207356226398`", ",", 
                  RowBox[{"-", "0.3545468549761507`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.794071628474526`", ",", 
                  RowBox[{"-", "0.36095680890021714`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.807800172970783`", ",", 
                  RowBox[{"-", "0.3737253927839249`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.835257261963294`", ",", 
                  RowBox[{"-", "0.3990488592867452`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.890171439948318`", ",", 
                  RowBox[{"-", "0.4487744668985881`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.893603576072383`", ",", 
                  RowBox[{"-", "0.4518389291600758`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.897035712196447`", ",", 
                  RowBox[{"-", "0.45489806896374485`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.903899984444575`", ",", 
                  RowBox[{"-", "0.46100023711963195`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.917628528940831`", ",", 
                  RowBox[{"-", "0.4731391226380486`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.945085617933342`", ",", 
                  RowBox[{"-", "0.49714710511159654`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.948517754057406`", ",", 
                  RowBox[{"-", "0.5001221199297847`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.95194989018147`", ",", 
                  RowBox[{"-", "0.5030912435360516`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.958814162429597`", ",", 
                  RowBox[{"-", "0.5090116772828992`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.972542706925854`", ",", 
                  RowBox[{"-", "0.5207803160367049`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.975974843049919`", ",", 
                  RowBox[{"-", "0.523707225799429`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.979406979173982`", ",", 
                  RowBox[{"-", "0.52662796652837`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.98627125142211`", ",", 
                  RowBox[{"-", "0.532450803337974`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.989703387546175`", ",", 
                  RowBox[{"-", "0.5353528308282584`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.993135523670238`", ",", 
                  RowBox[{"-", "0.53824855210481`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.996567659794302`", ",", 
                  RowBox[{"-", "0.5411379330573463`"}]}], "]"}], ",", 
                RowBox[{"List", "[", 
                 RowBox[{"9.999999795918367`", ",", 
                  RowBox[{"-", "0.5440209396502703`"}]}], "]"}]}], "]"}], 
              "]"}]}], "]"}], ",", "\"\<Charting`Private`Tag$54147#1\>\""}], 
          "]"}]}], "]"}], ",", 
       RowBox[{"List", "[", "]"}], ",", 
       RowBox[{"List", "[", "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"AspectRatio", ",", 
       RowBox[{"Power", "[", 
        RowBox[{"GoldenRatio", ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"Axes", ",", 
       RowBox[{"List", "[", 
        RowBox[{"True", ",", "True"}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"AxesLabel", ",", 
       RowBox[{"List", "[", 
        RowBox[{"None", ",", "None"}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"AxesOrigin", ",", 
       RowBox[{"List", "[", 
        RowBox[{"0", ",", "0"}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"DisplayFunction", ",", "Identity"}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"Frame", ",", 
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"List", "[", 
          RowBox[{"False", ",", "False"}], "]"}], ",", 
         RowBox[{"List", "[", 
          RowBox[{"False", ",", "False"}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"FrameLabel", ",", 
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"List", "[", 
          RowBox[{"None", ",", "None"}], "]"}], ",", 
         RowBox[{"List", "[", 
          RowBox[{"None", ",", "None"}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"FrameTicks", ",", 
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"List", "[", 
          RowBox[{"Automatic", ",", 
           RowBox[{"Charting`ScaledFrameTicks", "[", 
            RowBox[{"List", "[", 
             RowBox[{"Identity", ",", "Identity"}], "]"}], "]"}]}], "]"}], 
         ",", 
         RowBox[{"List", "[", 
          RowBox[{"Automatic", ",", 
           RowBox[{"Charting`ScaledFrameTicks", "[", 
            RowBox[{"List", "[", 
             RowBox[{"Identity", ",", "Identity"}], "]"}], "]"}]}], "]"}]}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"GridLines", ",", 
       RowBox[{"List", "[", 
        RowBox[{"None", ",", "None"}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"GridLinesStyle", ",", 
       RowBox[{"Directive", "[", 
        RowBox[{"GrayLevel", "[", 
         RowBox[{"0.5`", ",", "0.4`"}], "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"ImagePadding", ",", "All"}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"Method", ",", 
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"Rule", "[", 
          RowBox[{"\"\<DefaultBoundaryStyle\>\"", ",", "Automatic"}], "]"}], 
         ",", 
         RowBox[{"Rule", "[", 
          RowBox[{"\"\<DefaultMeshStyle\>\"", ",", 
           RowBox[{"AbsolutePointSize", "[", "6", "]"}]}], "]"}], ",", 
         RowBox[{"Rule", "[", 
          RowBox[{"\"\<ScalingFunctions\>\"", ",", "None"}], "]"}], ",", 
         RowBox[{"Rule", "[", 
          RowBox[{"\"\<CoordinatesToolOptions\>\"", ",", 
           RowBox[{"List", "[", 
            RowBox[{
             RowBox[{"Rule", "[", 
              RowBox[{"\"\<DisplayFunction\>\"", ",", 
               RowBox[{"Function", "[", 
                RowBox[{"List", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Function", "[", 
                    RowBox[{"Identity", "[", 
                    RowBox[{"Slot", "[", "1", "]"}], "]"}], "]"}], "[", 
                   RowBox[{"Part", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "1", "]"}], ",", "1"}], "]"}], "]"}],
                   ",", 
                  RowBox[{
                   RowBox[{"Function", "[", 
                    RowBox[{"Identity", "[", 
                    RowBox[{"Slot", "[", "1", "]"}], "]"}], "]"}], "[", 
                   RowBox[{"Part", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "1", "]"}], ",", "2"}], "]"}], 
                   "]"}]}], "]"}], "]"}]}], "]"}], ",", 
             RowBox[{"Rule", "[", 
              RowBox[{"\"\<CopiedValueFunction\>\"", ",", 
               RowBox[{"Function", "[", 
                RowBox[{"List", "[", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"Function", "[", 
                    RowBox[{"Identity", "[", 
                    RowBox[{"Slot", "[", "1", "]"}], "]"}], "]"}], "[", 
                   RowBox[{"Part", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "1", "]"}], ",", "1"}], "]"}], "]"}],
                   ",", 
                  RowBox[{
                   RowBox[{"Function", "[", 
                    RowBox[{"Identity", "[", 
                    RowBox[{"Slot", "[", "1", "]"}], "]"}], "]"}], "[", 
                   RowBox[{"Part", "[", 
                    RowBox[{
                    RowBox[{"Slot", "[", "1", "]"}], ",", "2"}], "]"}], 
                   "]"}]}], "]"}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"PlotRange", ",", 
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"List", "[", 
          RowBox[{"0", ",", "10"}], "]"}], ",", 
         RowBox[{"List", "[", 
          RowBox[{
           RowBox[{"-", "0.9999993680039507`"}], ",", "0.9999995755730018`"}],
           "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"PlotRangeClipping", ",", "True"}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"PlotRangePadding", ",", 
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"List", "[", 
          RowBox[{
           RowBox[{"Scaled", "[", "0.02`", "]"}], ",", 
           RowBox[{"Scaled", "[", "0.02`", "]"}]}], "]"}], ",", 
         RowBox[{"List", "[", 
          RowBox[{
           RowBox[{"Scaled", "[", "0.05`", "]"}], ",", 
           RowBox[{"Scaled", "[", "0.05`", "]"}]}], "]"}]}], "]"}]}], "]"}], 
     ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"Ticks", ",", 
       RowBox[{"List", "[", 
        RowBox[{"Automatic", ",", "Automatic"}], "]"}]}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[446]//FullForm=",ExpressionUUID->"9a250998-b80f-432d-9e29-\
67f06b124b94"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"Sin", "[", 
  RowBox[{"Cos", "[", 
   RowBox[{"Exp", "[", 
    RowBox[{"Tan", "[", 
     RowBox[{"RandomReal", "[", "]"}], "]"}], "]"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[481]:=",ExpressionUUID->"4edc7ac2-a117-4dfc-a2e4-f9a13c575ce7"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Identifying the Head of a Composite Expression", "Subsection",ExpressionUUID->"9f9ef166-5a70-4f88-9ecf-40f10adf72e5"],

Cell[TextData[{
 "Use ",
 ButtonBox["Head",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Head.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Head.html"],
 " to see the head of any expression:"
}], "Text",ExpressionUUID->"0e50e028-7961-4350-85b3-154a5737ade8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "=", 
  RowBox[{"a", "+", 
   RowBox[{"b", "/", 
    RowBox[{"(", 
     RowBox[{"2", " ", "c"}], ")"}]}]}]}]], "Input",
 CellLabel->
  "In[447]:=",ExpressionUUID->"4e3b81bb-bd6b-453b-ac4c-bdb8eecf0ce6"],

Cell[BoxData[
 RowBox[{"3", "+", 
  FractionBox["b", 
   RowBox[{"2", " ", "c"}]]}]], "Output",
 CellLabel->
  "Out[447]=",ExpressionUUID->"04a8d74e-e88d-47ca-ad8f-dc9804eacde5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Head", "[", "expr", "]"}]], "Input",
 CellLabel->
  "In[448]:=",ExpressionUUID->"b4992ebe-b6df-44a0-ae49-3023dc113166"],

Cell[BoxData["Plus"], "Output",
 CellLabel->
  "Out[448]=",ExpressionUUID->"8d794bf2-ff45-4e27-9fa7-72f74a686566"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "expr", "]"}]], "Input",
 CellLabel->
  "In[449]:=",ExpressionUUID->"f5b33a8e-c203-4b6b-bff4-f95f7a7275dc"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Plus", "[", 
    RowBox[{"3", ",", 
     RowBox[{"Times", "[", 
      RowBox[{
       RowBox[{"Rational", "[", 
        RowBox[{"1", ",", "2"}], "]"}], ",", "b", ",", 
       RowBox[{"Power", "[", 
        RowBox[{"c", ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[449]//FullForm=",ExpressionUUID->"dd7980a2-87ca-4881-b4fd-\
2405421ccaf6"]
}, Open  ]],

Cell["\<\
The Head can either be a symbol or a composite expression itself.\
\>", "Text",ExpressionUUID->"f629a3fe-8717-42d9-9ff4-63dd1f319b7b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Nested Structures", "Subsection",ExpressionUUID->"54b71a72-514b-4f73-8fb1-c868476fc554"],

Cell["\<\
FullForm can also disclose how nested structures of heads and arguments \
create more complex Wolfram Language expressions:\
\>", "Text",ExpressionUUID->"2f30532e-b156-417b-8cf2-2d91d20d8eb7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", "b"}], "+", 
     RowBox[{"Sqrt", "[", 
      RowBox[{
       RowBox[{"b", "^", "2"}], "-", 
       RowBox[{"4", " ", "a", " ", "c"}]}], "]"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{"2", " ", "a"}], ")"}]}], "]"}]], "Input",
 CellLabel->
  "In[450]:=",ExpressionUUID->"ce2df19f-381a-4347-852d-4b52127f664c"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Times", "[", 
    RowBox[{
     RowBox[{"Rational", "[", 
      RowBox[{"1", ",", "6"}], "]"}], ",", 
     RowBox[{"Plus", "[", 
      RowBox[{
       RowBox[{"Times", "[", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "b"}], "]"}], ",", 
       RowBox[{"Power", "[", 
        RowBox[{
         RowBox[{"Plus", "[", 
          RowBox[{
           RowBox[{"Power", "[", 
            RowBox[{"b", ",", "2"}], "]"}], ",", 
           RowBox[{"Times", "[", 
            RowBox[{
             RowBox[{"-", "12"}], ",", "c"}], "]"}]}], "]"}], ",", 
         RowBox[{"Rational", "[", 
          RowBox[{"1", ",", "2"}], "]"}]}], "]"}]}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[450]//FullForm=",ExpressionUUID->"af2f8810-de6d-4458-b686-\
5cee50eef586"]
}, Open  ]],

Cell["\<\
It is easier to visualize these nested structures graphically:\
\>", "Text",ExpressionUUID->"acd48796-e44a-4f94-b71d-9fe3e5ffd4ef"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TreeForm", "[", 
  RowBox[{
   RowBox[{"(", 
    RowBox[{
     RowBox[{"-", " ", "b"}], "+", 
     RowBox[{"Sqrt", "[", 
      RowBox[{
       RowBox[{"b", "^", "2"}], "-", 
       RowBox[{"4", " ", "a", " ", "c"}]}], "]"}]}], ")"}], "/", 
   RowBox[{"(", 
    RowBox[{"2", " ", "a"}], ")"}]}], "]"}]], "Input",
 CellLabel->
  "In[451]:=",ExpressionUUID->"9d6b055e-65cc-4263-8694-b52cd5a8ebfc"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[
   TagBox[
    GraphicsComplexBox[{{0.8263938705413374, 4.131969352706687}, {
     0.4131969352706687, 3.3055754821653496`}, {1.2395908058120062`, 
     3.3055754821653496`}, {0.4131969352706687, 2.479181611624012}, {0., 
     1.6527877410826743`}, {0.8263938705413374, 1.6527877410826743`}, {
     2.0659846763533434`, 2.479181611624012}, {1.6527877410826748`, 
     1.6527877410826743`}, {0.8263938705413374, 0.8263938705413372}, {
     0.4131969352706687, 0.}, {1.2395908058120062`, 0.}, {2.479181611624012, 
     0.8263938705413372}, {2.0659846763533434`, 0.}, {2.892378546894681, 
     0.}, {2.479181611624012, 1.6527877410826743`}}, {
      {RGBColor[0.55, 0.45, 0.45], 
       LineBox[{{1, 2}, {1, 3}, {3, 4}, {3, 7}, {4, 5}, {4, 6}, {7, 8}, {7, 
        15}, {8, 9}, {8, 12}, {9, 10}, {9, 11}, {12, 13}, {12, 14}}]}, {
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Times", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 1],
         TagBox[
          RowBox[{
            FractionBox["1", "6"], " ", 
            RowBox[{"(", 
              RowBox[{
                RowBox[{"-", "b"}], "+", 
                SqrtBox[
                 RowBox[{
                   SuperscriptBox["b", "2"], "-", 
                   RowBox[{"12", " ", "c"}]}]]}], ")"}]}], HoldForm]],
        Annotation[#, 
         HoldForm[
         Rational[
           1, 6] (-$CellContext`b + ($CellContext`b^2 - 12 $CellContext`c)^
            Rational[1, 2])], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox[
             FractionBox["1", "6"],
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 2],
         TagBox[
          FractionBox["1", "6"], HoldForm]],
        Annotation[#, 
         HoldForm[
          Rational[1, 6]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Plus", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 3],
         TagBox[
          RowBox[{
            RowBox[{"-", "b"}], "+", 
            SqrtBox[
             RowBox[{
               SuperscriptBox["b", "2"], "-", 
               RowBox[{"12", " ", "c"}]}]]}], HoldForm]],
        Annotation[#, 
         HoldForm[-$CellContext`b + ($CellContext`b^2 - 12 $CellContext`c)^
           Rational[1, 2]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Times", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 4],
         TagBox[
          RowBox[{"-", "b"}], HoldForm]],
        Annotation[#, 
         HoldForm[-$CellContext`b], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox[
             RowBox[{"-", "1"}],
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 5],
         TagBox[
          RowBox[{"-", "1"}], HoldForm]],
        Annotation[#, 
         HoldForm[-1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["b",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 6],
         TagBox["b", HoldForm]],
        Annotation[#, 
         HoldForm[$CellContext`b], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Power", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 7],
         TagBox[
          SqrtBox[
           RowBox[{
             SuperscriptBox["b", "2"], "-", 
             RowBox[{"12", " ", "c"}]}]], HoldForm]],
        Annotation[#, 
         HoldForm[($CellContext`b^2 - 12 $CellContext`c)^Rational[1, 2]], 
         "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Plus", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 8],
         TagBox[
          RowBox[{
            SuperscriptBox["b", "2"], "-", 
            RowBox[{"12", " ", "c"}]}], HoldForm]],
        Annotation[#, 
         HoldForm[$CellContext`b^2 - 12 $CellContext`c], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Power", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 9],
         TagBox[
          SuperscriptBox["b", "2"], HoldForm]],
        Annotation[#, 
         HoldForm[$CellContext`b^2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["b",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 10],
         TagBox["b", HoldForm]],
        Annotation[#, 
         HoldForm[$CellContext`b], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["2",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 11],
         TagBox["2", HoldForm]],
        Annotation[#, 
         HoldForm[2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Times", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 12],
         TagBox[
          RowBox[{
            RowBox[{"-", "12"}], " ", "c"}], HoldForm]],
        Annotation[#, 
         HoldForm[(-12) $CellContext`c], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox[
             RowBox[{"-", "12"}],
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 13],
         TagBox[
          RowBox[{"-", "12"}], HoldForm]],
        Annotation[#, 
         HoldForm[-12], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["c",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 14],
         TagBox["c", HoldForm]],
        Annotation[#, 
         HoldForm[$CellContext`c], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox[
             FractionBox["1", "2"],
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.05],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 15],
         TagBox[
          FractionBox["1", "2"], HoldForm]],
        Annotation[#, 
         HoldForm[
          Rational[1, 2]], "Tooltip"]& ]}}],
    Annotation[#, 
     VertexCoordinateRules -> {{0.8263938705413374, 4.131969352706687}, {
      0.4131969352706687, 3.3055754821653496`}, {1.2395908058120062`, 
      3.3055754821653496`}, {0.4131969352706687, 2.479181611624012}, {0., 
      1.6527877410826743`}, {0.8263938705413374, 1.6527877410826743`}, {
      2.0659846763533434`, 2.479181611624012}, {1.6527877410826748`, 
      1.6527877410826743`}, {0.8263938705413374, 0.8263938705413372}, {
      0.4131969352706687, 0.}, {1.2395908058120062`, 0.}, {2.479181611624012, 
      0.8263938705413372}, {2.0659846763533434`, 0.}, {2.892378546894681, 
      0.}, {2.479181611624012, 1.6527877410826743`}}]& ],
   AspectRatio->1,
   FormatType:>StandardForm,
   FrameTicks->Automatic,
   PlotRange->All,
   PlotRangePadding->Scaled[0.1]],
  TreeForm[
  Rational[1, 6] (-$CellContext`b + ($CellContext`b^2 - 12 $CellContext`c)^
     Rational[1, 2])],
  Editable->False]], "Output",
 CellLabel->
  "Out[451]//TreeForm=",ExpressionUUID->"3933d767-5af8-4f71-bad2-\
5d0654c3027a"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Everything Is an Expression", "Subsection",ExpressionUUID->"a6367f7a-24ac-4cbf-91d5-06f1f987366f"],

Cell["\<\
Everything in Wolfram Language is an expression\[LongDash]whether data or the \
program itself. That also includes math, notebooks, images, inputs and \
outputs, datasets, models, etc.:\
\>", "Text",ExpressionUUID->"800c52fc-35a4-4216-980e-d7c04b953534"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lst", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"\"\<Alice\>\"", ",", "10"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Bob\>\"", ",", "5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"\"\<Claire\>\"", ",", "7"}], "}"}]}], "}"}], " "}]], "Input",
 CellLabel->
  "In[452]:=",ExpressionUUID->"de3c4cac-1b36-4e0b-8988-d13b54915e6e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"Alice\"\>", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Bob\"\>", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"Claire\"\>", ",", "7"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[452]=",ExpressionUUID->"ebe2dfe5-dbf4-4c9f-9eb7-00f3644ef004"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FullForm", "[", "lst", "]"}], "\[IndentingNewLine]", 
 RowBox[{"TreeForm", "[", "lst", "]"}]}], "Input",
 CellLabel->
  "In[453]:=",ExpressionUUID->"93d7ceaf-90d0-4e73-b32d-d80a4d498e90"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"\"\<Alice\>\"", ",", "10"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"\"\<Bob\>\"", ",", "5"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"\"\<Claire\>\"", ",", "7"}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[453]//FullForm=",ExpressionUUID->"eb8fd6d8-f5ef-49a7-b145-\
f8ae83045b25"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[
   TagBox[
    GraphicsComplexBox[{{1.7437145811572892`, 1.3949716649258315`}, {
     0.34874291623145787`, 0.6974858324629157}, {0., 0.}, {0.6974858324629157,
      0.}, {1.7437145811572892`, 0.6974858324629157}, {1.3949716649258315`, 
     0.}, {2.092457497388747, 0.}, {3.1386862460831204`, 
     0.6974858324629157}, {2.789943329851663, 0.}, {3.4874291623145783`, 
     0.}}, {
      {RGBColor[0.55, 0.45, 0.45], 
       LineBox[{{1, 2}, {1, 5}, {1, 8}, {2, 3}, {2, 4}, {5, 6}, {5, 7}, {8, 
        9}, {8, 10}}]}, {
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.044444444444444446`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 1],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"\"Alice\"", ",", "10"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Bob\"", ",", "5"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"\"Claire\"", ",", "7"}], "}"}]}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{{"Alice", 10}, {"Bob", 5}, {"Claire", 7}}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.044444444444444446`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 2],
         TagBox[
          RowBox[{"{", 
            RowBox[{"\"Alice\"", ",", "10"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{"Alice", 10}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"Alice\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.044444444444444446`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 3],
         TagBox["\"Alice\"", HoldForm]],
        Annotation[#, 
         HoldForm["Alice"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["10",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.044444444444444446`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 4],
         TagBox["10", HoldForm]],
        Annotation[#, 
         HoldForm[10], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.044444444444444446`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 5],
         TagBox[
          RowBox[{"{", 
            RowBox[{"\"Bob\"", ",", "5"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{"Bob", 5}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"Bob\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.044444444444444446`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 6],
         TagBox["\"Bob\"", HoldForm]],
        Annotation[#, 
         HoldForm["Bob"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["5",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.044444444444444446`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 7],
         TagBox["5", HoldForm]],
        Annotation[#, 
         HoldForm[5], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.044444444444444446`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 8],
         TagBox[
          RowBox[{"{", 
            RowBox[{"\"Claire\"", ",", "7"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{"Claire", 7}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"Claire\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.044444444444444446`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 9],
         TagBox["\"Claire\"", HoldForm]],
        Annotation[#, 
         HoldForm["Claire"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["7",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.044444444444444446`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 10],
         TagBox["7", HoldForm]],
        Annotation[#, 
         HoldForm[7], "Tooltip"]& ]}}],
    Annotation[#, 
     VertexCoordinateRules -> {{1.7437145811572892`, 1.3949716649258315`}, {
      0.34874291623145787`, 0.6974858324629157}, {0., 0.}, {
      0.6974858324629157, 0.}, {1.7437145811572892`, 0.6974858324629157}, {
      1.3949716649258315`, 0.}, {2.092457497388747, 0.}, {3.1386862460831204`,
       0.6974858324629157}, {2.789943329851663, 0.}, {3.4874291623145783`, 
      0.}}]& ],
   AspectRatio->NCache[3^Rational[-1, 2], 0.5773502691896258],
   FormatType:>StandardForm,
   FrameTicks->Automatic,
   PlotRange->All,
   PlotRangePadding->Scaled[0.1]],
  TreeForm[{{"Alice", 10}, {"Bob", 5}, {"Claire", 7}}],
  Editable->False]], "Output",
 CellLabel->
  "Out[454]//TreeForm=",ExpressionUUID->"8776d4d8-e074-4071-af37-\
f1c3ccefa59f"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"image", "=", 
  RowBox[{"ArrayPlot", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "0"}], "}"}]}], "}"}], "]"}]}]], "Input",
 CellLabel->
  "In[455]:=",ExpressionUUID->"60f6ee6e-047a-46bb-9e2c-5a59ac2ccdb4"],

Cell[BoxData[
 GraphicsBox[
  RasterBox[{{0, 1}, {1, 0}}, {{-0.08992422952494644, -0.0668470275144877}, {
   1.9100757704750546`, 1.9331529724855117`}}, {0, 1}],
  Frame->Automatic,
  FrameLabel->{None, None},
  FrameTicks->{{None, None}, {None, None}},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->{{0.5, 0.5}, {0.5, 0.5}},
  ImageSize->{276.2968749999993, Automatic},
  Method->{
   "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> Automatic, 
    "DefaultGraphicsInteraction" -> {
     "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
      "Effects" -> {
       "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
        "Droplines" -> {
         "freeformCursorMode" -> True, 
          "placement" -> {"x" -> "All", "y" -> "None"}}}}, "DefaultPlotStyle" -> 
    Automatic},
  PlotRange->{{-0.04166666666666667, 2.0416666666666665`}, {-0.04, 2.04}},
  PlotRangePadding->Automatic]], "Input",ExpressionUUID->"307f5b5e-3e71-44b2-\
bf47-45c1432f8bb0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"FullForm", "[", "image", "]"}], " "}], "\[IndentingNewLine]", 
 RowBox[{"TreeForm", "[", "image", "]"}]}], "Input",
 CellLabel->
  "In[456]:=",ExpressionUUID->"f679d436-8ef3-4fde-b991-e15bfd4e8c36"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Graphics", "[", 
    RowBox[{
     RowBox[{"Raster", "[", 
      RowBox[{
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"List", "[", 
          RowBox[{"0", ",", "1"}], "]"}], ",", 
         RowBox[{"List", "[", 
          RowBox[{"1", ",", "0"}], "]"}]}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"List", "[", 
          RowBox[{"0", ",", "0"}], "]"}], ",", 
         RowBox[{"List", "[", 
          RowBox[{"2", ",", "2"}], "]"}]}], "]"}], ",", 
       RowBox[{"List", "[", 
        RowBox[{"0", ",", "1"}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"Frame", ",", "Automatic"}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"FrameLabel", ",", 
       RowBox[{"List", "[", 
        RowBox[{"None", ",", "None"}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"FrameTicks", ",", 
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"List", "[", 
          RowBox[{"None", ",", "None"}], "]"}], ",", 
         RowBox[{"List", "[", 
          RowBox[{"None", ",", "None"}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"GridLinesStyle", ",", 
       RowBox[{"Directive", "[", 
        RowBox[{"GrayLevel", "[", 
         RowBox[{"0.5`", ",", "0.4`"}], "]"}], "]"}]}], "]"}], ",", 
     RowBox[{"Rule", "[", 
      RowBox[{"Method", ",", 
       RowBox[{"List", "[", 
        RowBox[{
         RowBox[{"Rule", "[", 
          RowBox[{"\"\<GridLinesInFront\>\"", ",", "True"}], "]"}], ",", 
         RowBox[{"Rule", "[", 
          RowBox[{"\"\<DefaultBoundaryStyle\>\"", ",", "Automatic"}], "]"}], 
         ",", 
         RowBox[{"Rule", "[", 
          RowBox[{"\"\<DefaultGraphicsInteraction\>\"", ",", 
           RowBox[{"List", "[", 
            RowBox[{
             RowBox[{"Rule", "[", 
              RowBox[{"\"\<Version\>\"", ",", "1.2`"}], "]"}], ",", 
             RowBox[{"Rule", "[", 
              RowBox[{"\"\<TrackMousePosition\>\"", ",", 
               RowBox[{"List", "[", 
                RowBox[{"True", ",", "False"}], "]"}]}], "]"}], ",", 
             RowBox[{"Rule", "[", 
              RowBox[{"\"\<Effects\>\"", ",", 
               RowBox[{"List", "[", 
                RowBox[{
                 RowBox[{"Rule", "[", 
                  RowBox[{"\"\<Highlight\>\"", ",", 
                   RowBox[{"List", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<ratio\>\"", ",", "2"}], "]"}], "]"}]}], 
                  "]"}], ",", 
                 RowBox[{"Rule", "[", 
                  RowBox[{"\"\<HighlightPoint\>\"", ",", 
                   RowBox[{"List", "[", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<ratio\>\"", ",", "2"}], "]"}], "]"}]}], 
                  "]"}], ",", 
                 RowBox[{"Rule", "[", 
                  RowBox[{"\"\<Droplines\>\"", ",", 
                   RowBox[{"List", "[", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<freeformCursorMode\>\"", ",", "True"}], 
                    "]"}], ",", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<placement\>\"", ",", 
                    RowBox[{"List", "[", 
                    RowBox[{
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<x\>\"", ",", "\"\<All\>\""}], "]"}], ",", 
                    RowBox[{"Rule", "[", 
                    RowBox[{"\"\<y\>\"", ",", "\"\<None\>\""}], "]"}]}], 
                    "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], "]"}]}], 
            "]"}]}], "]"}], ",", 
         RowBox[{"Rule", "[", 
          RowBox[{"\"\<DefaultPlotStyle\>\"", ",", "Automatic"}], "]"}]}], 
        "]"}]}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[456]//FullForm=",ExpressionUUID->"339b8e4a-39e8-4bf7-8a22-\
94799fa60605"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[
   TagBox[GraphicsComplexBox[CompressedData["
1:eJxllF1Ik2EUx19MQmS6D9emS8u1OdvUOYQJRbYHgi6yKNYHFkFUWCA0Eeuq
bkJvMm2byaSLuuiiJXUxiJB1uUYQWVhYdCOuC8GL0KCwogl9nP3/8b4bjJff
c875n+c5zzmP+9xgtL9C07Qzf/5/vxeyvljvgkudPG+Phm31qug50j1Qu0ld
zEwWMhZHaX0lcmXDMthutqvkdM24xzQfGTkQ30jX2JRW+iX+rVtK9kIELHHf
6C/2L7SL/g+y5N2skE/iKpQ+XlN6/UpyryP1PFtXTX/Rr6K956UzvHeLSen3
a2G+0LU7D3KOWsZXD73JL5usZKlPHeuDdcQbv4UbRxuGrU764ws76m70h+67
Pe/HvtsayLL/Rurk104Ur9q3Mn72/sdLmqOJDDvipT4uQz0ayTPHTy2NOrfT
X+qxzVCvZrLUx839HKqMPRwdb2b+F4vBT/sn3GWsr6+berK+Q+n7wUf9R/u6
8ocTLdTzNn0tWpM+cjaRib665THcl8fQL14y9OC/+uFtetXcUpYffHf9SXgh
2Up/ua9Wpe/nnWTooe+6BoZuTsS97EvkB0MP/jgf7Mhv9MccID9Y7r+NelUj
60uuqQDjr5+erV+caiNLv/kZ75i/HEtN4jyais+E0323/WXcV5pjxCdKcy79
FiBjP9DHfqCH/RgZ+oiHnpyrnSz9GqT+sHnX2NlUB/U+r/zMeaaDZNihL/PT
UaYH7s89+7U83Ul/mZdO2mU+QmS9vRBBfryb0APL/ITov/a6x3XsYIj2x7vv
dT+d+8+ov/698BvewwD5NzDxHRE=
     "], {
      {RGBColor[0.55, 0.45, 0.45], 
       LineBox[{{1, 2}, {1, 20}, {1, 23}, {1, 28}, {1, 37}, {1, 43}, {2, 3}, {
        2, 10}, {2, 17}, {3, 4}, {3, 7}, {4, 5}, {4, 6}, {7, 8}, {7, 9}, {10, 
        11}, {10, 14}, {11, 12}, {11, 13}, {14, 15}, {14, 16}, {17, 18}, {17, 
        19}, {20, 21}, {20, 22}, {23, 24}, {23, 25}, {25, 26}, {25, 27}, {28, 
        29}, {28, 30}, {30, 31}, {30, 34}, {31, 32}, {31, 33}, {34, 35}, {34, 
        36}, {37, 38}, {37, 39}, {39, 40}, {40, 41}, {40, 42}, {43, 44}, {43, 
        45}, {45, 46}, {45, 49}, {45, 52}, {45, 93}, {46, 47}, {46, 48}, {49, 
        50}, {49, 51}, {52, 53}, {52, 54}, {54, 55}, {54, 58}, {54, 63}, {55, 
        56}, {55, 57}, {58, 59}, {58, 60}, {60, 61}, {60, 62}, {63, 64}, {63, 
        65}, {65, 66}, {65, 72}, {65, 78}, {66, 67}, {66, 68}, {68, 69}, {69, 
        70}, {69, 71}, {72, 73}, {72, 74}, {74, 75}, {75, 76}, {75, 77}, {78, 
        79}, {78, 80}, {80, 81}, {80, 84}, {81, 82}, {81, 83}, {84, 85}, {84, 
        86}, {86, 87}, {86, 90}, {87, 88}, {87, 89}, {90, 91}, {90, 92}, {93, 
        94}, {93, 95}}]}, {
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Graphics", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 1],
         TagBox[
          GraphicsBox[
           RasterBox[{{0, 1}, {1, 0}}, {{0, 0}, {2, 2}}, {0, 1}], Frame -> 
           Automatic, FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> Automatic, 
             "DefaultGraphicsInteraction" -> {
              "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
               "Effects" -> {
                "Highlight" -> {"ratio" -> 2}, 
                 "HighlightPoint" -> {"ratio" -> 2}, 
                 "Droplines" -> {
                  "freeformCursorMode" -> True, 
                   "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
             "DefaultPlotStyle" -> Automatic}], HoldForm]],
        Annotation[#, 
         HoldForm[
          Graphics[
           Raster[{{0, 1}, {1, 0}}, {{0, 0}, {2, 2}}, {0, 1}], Frame -> 
           Automatic, FrameLabel -> {None, None}, 
           FrameTicks -> {{None, None}, {None, None}}, GridLinesStyle -> 
           Directive[
             GrayLevel[0.5, 0.4]], 
           Method -> {
            "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> Automatic, 
             "DefaultGraphicsInteraction" -> {
              "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
               "Effects" -> {
                "Highlight" -> {"ratio" -> 2}, 
                 "HighlightPoint" -> {"ratio" -> 2}, 
                 "Droplines" -> {
                  "freeformCursorMode" -> True, 
                   "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
             "DefaultPlotStyle" -> Automatic}]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Raster", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 2],
         TagBox[
          RowBox[{"Raster", "[", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"0", ",", "1"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"1", ",", "0"}], "}"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{
                  RowBox[{"{", 
                    RowBox[{"0", ",", "0"}], "}"}], ",", 
                  RowBox[{"{", 
                    RowBox[{"2", ",", "2"}], "}"}]}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}]}], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          Raster[{{0, 1}, {1, 0}}, {{0, 0}, {2, 2}}, {0, 1}]], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 3],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"0", ",", "1"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"1", ",", "0"}], "}"}]}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{{0, 1}, {1, 0}}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 4],
         TagBox[
          RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{0, 1}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 5],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 6],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 7],
         TagBox[
          RowBox[{"{", 
            RowBox[{"1", ",", "0"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{1, 0}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 8],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 9],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 10],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"0", ",", "0"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"2", ",", "2"}], "}"}]}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{{0, 0}, {2, 2}}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 11],
         TagBox[
          RowBox[{"{", 
            RowBox[{"0", ",", "0"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{0, 0}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 12],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 13],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 14],
         TagBox[
          RowBox[{"{", 
            RowBox[{"2", ",", "2"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{2, 2}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["2",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 15],
         TagBox["2", HoldForm]],
        Annotation[#, 
         HoldForm[2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["2",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 16],
         TagBox["2", HoldForm]],
        Annotation[#, 
         HoldForm[2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 17],
         TagBox[
          RowBox[{"{", 
            RowBox[{"0", ",", "1"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{0, 1}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 18],
         TagBox["0", HoldForm]],
        Annotation[#, 
         HoldForm[0], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 19],
         TagBox["1", HoldForm]],
        Annotation[#, 
         HoldForm[1], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 20],
         TagBox[
          RowBox[{"Frame", "\[Rule]", "Automatic"}], HoldForm]],
        Annotation[#, 
         HoldForm[Frame -> Automatic], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["Frame",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 21],
         TagBox["Frame", HoldForm]],
        Annotation[#, 
         HoldForm[Frame], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["Automatic",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 22],
         TagBox["Automatic", HoldForm]],
        Annotation[#, 
         HoldForm[Automatic], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 23],
         TagBox[
          RowBox[{"FrameLabel", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{"None", ",", "None"}], "}"}]}], HoldForm]],
        Annotation[#, 
         HoldForm[FrameLabel -> {None, None}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["FrameLabel",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 24],
         TagBox["FrameLabel", HoldForm]],
        Annotation[#, 
         HoldForm[FrameLabel], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 25],
         TagBox[
          RowBox[{"{", 
            RowBox[{"None", ",", "None"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{None, None}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["None",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 26],
         TagBox["None", HoldForm]],
        Annotation[#, 
         HoldForm[None], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["None",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 27],
         TagBox["None", HoldForm]],
        Annotation[#, 
         HoldForm[None], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 28],
         TagBox[
          RowBox[{"FrameTicks", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{"{", 
                  RowBox[{"None", ",", "None"}], "}"}], ",", 
                RowBox[{"{", 
                  RowBox[{"None", ",", "None"}], "}"}]}], "}"}]}], HoldForm]],
        
        Annotation[#, 
         HoldForm[FrameTicks -> {{None, None}, {None, None}}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["FrameTicks",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 29],
         TagBox["FrameTicks", HoldForm]],
        Annotation[#, 
         HoldForm[FrameTicks], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 30],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"{", 
                RowBox[{"None", ",", "None"}], "}"}], ",", 
              RowBox[{"{", 
                RowBox[{"None", ",", "None"}], "}"}]}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{{None, None}, {None, None}}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 31],
         TagBox[
          RowBox[{"{", 
            RowBox[{"None", ",", "None"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{None, None}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["None",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 32],
         TagBox["None", HoldForm]],
        Annotation[#, 
         HoldForm[None], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["None",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 33],
         TagBox["None", HoldForm]],
        Annotation[#, 
         HoldForm[None], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 34],
         TagBox[
          RowBox[{"{", 
            RowBox[{"None", ",", "None"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{None, None}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["None",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 35],
         TagBox["None", HoldForm]],
        Annotation[#, 
         HoldForm[None], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["None",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 36],
         TagBox["None", HoldForm]],
        Annotation[#, 
         HoldForm[None], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 37],
         TagBox[
          RowBox[{"GridLinesStyle", "\[Rule]", 
            RowBox[{"Directive", "[", 
              
              TemplateBox[<|"color" -> GrayLevel[0.5, 0.4]|>, 
               "GrayLevelColorSwatchTemplate"], "]"}]}], HoldForm]],
        Annotation[#, 
         HoldForm[GridLinesStyle -> Directive[
            GrayLevel[0.5, 0.4]]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["GridLinesStyle",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 38],
         TagBox["GridLinesStyle", HoldForm]],
        Annotation[#, 
         HoldForm[GridLinesStyle], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Directive", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 39],
         TagBox[
          RowBox[{"Directive", "[", 
            
            TemplateBox[<|"color" -> GrayLevel[0.5, 0.4]|>, 
             "GrayLevelColorSwatchTemplate"], "]"}], HoldForm]],
        Annotation[#, 
         HoldForm[
          Directive[
           GrayLevel[0.5, 0.4]]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["GrayLevel", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 40],
         TagBox[
          
          TemplateBox[<|"color" -> GrayLevel[0.5, 0.4]|>, 
           "GrayLevelColorSwatchTemplate"], HoldForm]],
        Annotation[#, 
         HoldForm[
          GrayLevel[0.5, 0.4]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0.5`",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 41],
         TagBox["0.5`", HoldForm]],
        Annotation[#, 
         HoldForm[0.5], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["0.4`",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 42],
         TagBox["0.4`", HoldForm]],
        Annotation[#, 
         HoldForm[0.4], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 43],
         TagBox[
          RowBox[{"Method", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{"\"GridLinesInFront\"", "\[Rule]", "True"}], ",", 
                RowBox[{"\"DefaultBoundaryStyle\"", "\[Rule]", "Automatic"}], 
                ",", 
                RowBox[{"\"DefaultGraphicsInteraction\"", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"Version\"", "\[Rule]", "1.2`"}], ",", 
                    RowBox[{"\"TrackMousePosition\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}]}], ",", 
                    RowBox[{"\"Effects\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"Highlight\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
                    RowBox[{"\"HighlightPoint\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Droplines\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"freeformCursorMode\"", "\[Rule]", "True"}], 
                    ",", 
                    RowBox[{"\"placement\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"x\"", "\[Rule]", "\"All\""}], ",", 
                    RowBox[{"\"y\"", "\[Rule]", "\"None\""}]}], "}"}]}]}], 
                    "}"}]}]}], "}"}]}]}], "}"}]}], ",", 
                RowBox[{"\"DefaultPlotStyle\"", "\[Rule]", "Automatic"}]}], 
              "}"}]}], HoldForm]],
        Annotation[#, 
         HoldForm[
         Method -> {
           "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> Automatic, 
            "DefaultGraphicsInteraction" -> {
             "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
              "Effects" -> {
               "Highlight" -> {"ratio" -> 2}, 
                "HighlightPoint" -> {"ratio" -> 2}, 
                "Droplines" -> {
                 "freeformCursorMode" -> True, 
                  "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
            "DefaultPlotStyle" -> Automatic}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["Method",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 44],
         TagBox["Method", HoldForm]],
        Annotation[#, 
         HoldForm[Method], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 45],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"\"GridLinesInFront\"", "\[Rule]", "True"}], ",", 
              RowBox[{"\"DefaultBoundaryStyle\"", "\[Rule]", "Automatic"}], 
              ",", 
              RowBox[{"\"DefaultGraphicsInteraction\"", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"\"Version\"", "\[Rule]", "1.2`"}], ",", 
                    RowBox[{"\"TrackMousePosition\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}]}], ",", 
                    RowBox[{"\"Effects\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"Highlight\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
                    RowBox[{"\"HighlightPoint\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Droplines\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"freeformCursorMode\"", "\[Rule]", "True"}], 
                    ",", 
                    RowBox[{"\"placement\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"x\"", "\[Rule]", "\"All\""}], ",", 
                    RowBox[{"\"y\"", "\[Rule]", "\"None\""}]}], "}"}]}]}], 
                    "}"}]}]}], "}"}]}]}], "}"}]}], ",", 
              RowBox[{"\"DefaultPlotStyle\"", "\[Rule]", "Automatic"}]}], 
            "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{
          "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> Automatic, 
           "DefaultGraphicsInteraction" -> {
            "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
             "Effects" -> {
              "Highlight" -> {"ratio" -> 2}, 
               "HighlightPoint" -> {"ratio" -> 2}, 
               "Droplines" -> {
                "freeformCursorMode" -> True, 
                 "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
           "DefaultPlotStyle" -> Automatic}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 46],
         TagBox[
          RowBox[{"\"GridLinesInFront\"", "\[Rule]", "True"}], HoldForm]],
        Annotation[#, 
         HoldForm["GridLinesInFront" -> True], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"GridLinesInFront\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 47],
         TagBox["\"GridLinesInFront\"", HoldForm]],
        Annotation[#, 
         HoldForm["GridLinesInFront"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["True",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 48],
         TagBox["True", HoldForm]],
        Annotation[#, 
         HoldForm[True], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 49],
         TagBox[
          RowBox[{"\"DefaultBoundaryStyle\"", "\[Rule]", "Automatic"}], 
          HoldForm]],
        Annotation[#, 
         HoldForm["DefaultBoundaryStyle" -> Automatic], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"DefaultBoundaryStyle\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 50],
         TagBox["\"DefaultBoundaryStyle\"", HoldForm]],
        Annotation[#, 
         HoldForm["DefaultBoundaryStyle"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["Automatic",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 51],
         TagBox["Automatic", HoldForm]],
        Annotation[#, 
         HoldForm[Automatic], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 52],
         TagBox[
          RowBox[{"\"DefaultGraphicsInteraction\"", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{"\"Version\"", "\[Rule]", "1.2`"}], ",", 
                RowBox[{"\"TrackMousePosition\"", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{"True", ",", "False"}], "}"}]}], ",", 
                RowBox[{"\"Effects\"", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"Highlight\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
                    RowBox[{"\"HighlightPoint\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Droplines\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"freeformCursorMode\"", "\[Rule]", "True"}], 
                    ",", 
                    RowBox[{"\"placement\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"x\"", "\[Rule]", "\"All\""}], ",", 
                    RowBox[{"\"y\"", "\[Rule]", "\"None\""}]}], "}"}]}]}], 
                    "}"}]}]}], "}"}]}]}], "}"}]}], HoldForm]],
        Annotation[#, 
         HoldForm[
         "DefaultGraphicsInteraction" -> {
           "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
            "Effects" -> {
             "Highlight" -> {"ratio" -> 2}, 
              "HighlightPoint" -> {"ratio" -> 2}, 
              "Droplines" -> {
               "freeformCursorMode" -> True, 
                "placement" -> {"x" -> "All", "y" -> "None"}}}}], 
         "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"DefaultGraphicsInteraction\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 53],
         TagBox["\"DefaultGraphicsInteraction\"", HoldForm]],
        Annotation[#, 
         HoldForm["DefaultGraphicsInteraction"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 54],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"\"Version\"", "\[Rule]", "1.2`"}], ",", 
              RowBox[{"\"TrackMousePosition\"", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"True", ",", "False"}], "}"}]}], ",", 
              RowBox[{"\"Effects\"", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"\"Highlight\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
                    RowBox[{"\"HighlightPoint\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
                    RowBox[{"\"Droplines\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"freeformCursorMode\"", "\[Rule]", "True"}], 
                    ",", 
                    RowBox[{"\"placement\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"x\"", "\[Rule]", "\"All\""}], ",", 
                    RowBox[{"\"y\"", "\[Rule]", "\"None\""}]}], "}"}]}]}], 
                    "}"}]}]}], "}"}]}]}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{
          "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
           "Effects" -> {
            "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2},
              "Droplines" -> {
              "freeformCursorMode" -> True, 
               "placement" -> {"x" -> "All", "y" -> "None"}}}}], 
         "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 55],
         TagBox[
          RowBox[{"\"Version\"", "\[Rule]", "1.2`"}], HoldForm]],
        Annotation[#, 
         HoldForm["Version" -> 1.2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"Version\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 56],
         TagBox["\"Version\"", HoldForm]],
        Annotation[#, 
         HoldForm["Version"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["1.2`",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 57],
         TagBox["1.2`", HoldForm]],
        Annotation[#, 
         HoldForm[1.2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 58],
         TagBox[
          RowBox[{"\"TrackMousePosition\"", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{"True", ",", "False"}], "}"}]}], HoldForm]],
        Annotation[#, 
         HoldForm["TrackMousePosition" -> {True, False}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"TrackMousePosition\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 59],
         TagBox["\"TrackMousePosition\"", HoldForm]],
        Annotation[#, 
         HoldForm["TrackMousePosition"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 60],
         TagBox[
          RowBox[{"{", 
            RowBox[{"True", ",", "False"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{True, False}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["True",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 61],
         TagBox["True", HoldForm]],
        Annotation[#, 
         HoldForm[True], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["False",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 62],
         TagBox["False", HoldForm]],
        Annotation[#, 
         HoldForm[False], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 63],
         TagBox[
          RowBox[{"\"Effects\"", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{"\"Highlight\"", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
                RowBox[{"\"HighlightPoint\"", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
                RowBox[{"\"Droplines\"", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"freeformCursorMode\"", "\[Rule]", "True"}], 
                    ",", 
                    RowBox[{"\"placement\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"x\"", "\[Rule]", "\"All\""}], ",", 
                    RowBox[{"\"y\"", "\[Rule]", "\"None\""}]}], "}"}]}]}], 
                    "}"}]}]}], "}"}]}], HoldForm]],
        Annotation[#, 
         HoldForm[
         "Effects" -> {
           "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
            "Droplines" -> {
             "freeformCursorMode" -> True, 
              "placement" -> {"x" -> "All", "y" -> "None"}}}], "Tooltip"]& ], 
       
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"Effects\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 64],
         TagBox["\"Effects\"", HoldForm]],
        Annotation[#, 
         HoldForm["Effects"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 65],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"\"Highlight\"", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
              RowBox[{"\"HighlightPoint\"", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], ",", 
              RowBox[{"\"Droplines\"", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"\"freeformCursorMode\"", "\[Rule]", "True"}], 
                    ",", 
                    RowBox[{"\"placement\"", "\[Rule]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"x\"", "\[Rule]", "\"All\""}], ",", 
                    RowBox[{"\"y\"", "\[Rule]", "\"None\""}]}], "}"}]}]}], 
                  "}"}]}]}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{
          "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
           "Droplines" -> {
            "freeformCursorMode" -> True, 
             "placement" -> {"x" -> "All", "y" -> "None"}}}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 66],
         TagBox[
          RowBox[{"\"Highlight\"", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], HoldForm]],
        Annotation[#, 
         HoldForm["Highlight" -> {"ratio" -> 2}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"Highlight\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 67],
         TagBox["\"Highlight\"", HoldForm]],
        Annotation[#, 
         HoldForm["Highlight"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 68],
         TagBox[
          RowBox[{"{", 
            RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{"ratio" -> 2}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 69],
         TagBox[
          RowBox[{"\"ratio\"", "\[Rule]", "2"}], HoldForm]],
        Annotation[#, 
         HoldForm["ratio" -> 2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"ratio\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 70],
         TagBox["\"ratio\"", HoldForm]],
        Annotation[#, 
         HoldForm["ratio"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["2",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 71],
         TagBox["2", HoldForm]],
        Annotation[#, 
         HoldForm[2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 72],
         TagBox[
          RowBox[{"\"HighlightPoint\"", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}]}], HoldForm]],
        Annotation[#, 
         HoldForm["HighlightPoint" -> {"ratio" -> 2}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"HighlightPoint\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 73],
         TagBox["\"HighlightPoint\"", HoldForm]],
        Annotation[#, 
         HoldForm["HighlightPoint"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 74],
         TagBox[
          RowBox[{"{", 
            RowBox[{"\"ratio\"", "\[Rule]", "2"}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{"ratio" -> 2}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 75],
         TagBox[
          RowBox[{"\"ratio\"", "\[Rule]", "2"}], HoldForm]],
        Annotation[#, 
         HoldForm["ratio" -> 2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"ratio\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 76],
         TagBox["\"ratio\"", HoldForm]],
        Annotation[#, 
         HoldForm["ratio"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["2",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 77],
         TagBox["2", HoldForm]],
        Annotation[#, 
         HoldForm[2], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 78],
         TagBox[
          RowBox[{"\"Droplines\"", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{"\"freeformCursorMode\"", "\[Rule]", "True"}], ",", 
                RowBox[{"\"placement\"", "\[Rule]", 
                  RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\"x\"", "\[Rule]", "\"All\""}], ",", 
                    RowBox[{"\"y\"", "\[Rule]", "\"None\""}]}], "}"}]}]}], 
              "}"}]}], HoldForm]],
        Annotation[#, 
         HoldForm[
         "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"Droplines\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 79],
         TagBox["\"Droplines\"", HoldForm]],
        Annotation[#, 
         HoldForm["Droplines"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 80],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"\"freeformCursorMode\"", "\[Rule]", "True"}], ",", 
              RowBox[{"\"placement\"", "\[Rule]", 
                RowBox[{"{", 
                  RowBox[{
                    RowBox[{"\"x\"", "\[Rule]", "\"All\""}], ",", 
                    RowBox[{"\"y\"", "\[Rule]", "\"None\""}]}], "}"}]}]}], 
            "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{
          "freeformCursorMode" -> True, 
           "placement" -> {"x" -> "All", "y" -> "None"}}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 81],
         TagBox[
          RowBox[{"\"freeformCursorMode\"", "\[Rule]", "True"}], HoldForm]],
        Annotation[#, 
         HoldForm["freeformCursorMode" -> True], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"freeformCursorMode\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 82],
         TagBox["\"freeformCursorMode\"", HoldForm]],
        Annotation[#, 
         HoldForm["freeformCursorMode"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["True",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 83],
         TagBox["True", HoldForm]],
        Annotation[#, 
         HoldForm[True], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 84],
         TagBox[
          RowBox[{"\"placement\"", "\[Rule]", 
            RowBox[{"{", 
              RowBox[{
                RowBox[{"\"x\"", "\[Rule]", "\"All\""}], ",", 
                RowBox[{"\"y\"", "\[Rule]", "\"None\""}]}], "}"}]}], 
          HoldForm]],
        Annotation[#, 
         HoldForm["placement" -> {"x" -> "All", "y" -> "None"}], 
         "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"placement\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 85],
         TagBox["\"placement\"", HoldForm]],
        Annotation[#, 
         HoldForm["placement"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["List", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 86],
         TagBox[
          RowBox[{"{", 
            RowBox[{
              RowBox[{"\"x\"", "\[Rule]", "\"All\""}], ",", 
              RowBox[{"\"y\"", "\[Rule]", "\"None\""}]}], "}"}], HoldForm]],
        Annotation[#, 
         HoldForm[{"x" -> "All", "y" -> "None"}], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 87],
         TagBox[
          RowBox[{"\"x\"", "\[Rule]", "\"All\""}], HoldForm]],
        Annotation[#, 
         HoldForm["x" -> "All"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"x\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 88],
         TagBox["\"x\"", HoldForm]],
        Annotation[#, 
         HoldForm["x"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"All\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 89],
         TagBox["\"All\"", HoldForm]],
        Annotation[#, 
         HoldForm["All"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 90],
         TagBox[
          RowBox[{"\"y\"", "\[Rule]", "\"None\""}], HoldForm]],
        Annotation[#, 
         HoldForm["y" -> "None"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"y\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 91],
         TagBox["\"y\"", HoldForm]],
        Annotation[#, 
         HoldForm["y"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"None\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 92],
         TagBox["\"None\"", HoldForm]],
        Annotation[#, 
         HoldForm["None"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["Rule", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 93],
         TagBox[
          RowBox[{"\"DefaultPlotStyle\"", "\[Rule]", "Automatic"}], HoldForm]],
        Annotation[#, 
         HoldForm["DefaultPlotStyle" -> Automatic], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"DefaultPlotStyle\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 94],
         TagBox["\"DefaultPlotStyle\"", HoldForm]],
        Annotation[#, 
         HoldForm["DefaultPlotStyle"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["Automatic",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.01],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameMargins->0.7462686567164178,
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 95],
         TagBox["Automatic", HoldForm]],
        Annotation[#, 
         HoldForm[Automatic], "Tooltip"]& ]}}],
    Annotation[#, VertexCoordinateRules -> CompressedData["
1:eJxllF1Ik2EUx19MQmS6D9emS8u1OdvUOYQJRbYHgi6yKNYHFkFUWCA0Eeuq
bkJvMm2byaSLuuiiJXUxiJB1uUYQWVhYdCOuC8GL0KCwogl9nP3/8b4bjJff
c875n+c5zzmP+9xgtL9C07Qzf/5/vxeyvljvgkudPG+Phm31qug50j1Qu0ld
zEwWMhZHaX0lcmXDMthutqvkdM24xzQfGTkQ30jX2JRW+iX+rVtK9kIELHHf
6C/2L7SL/g+y5N2skE/iKpQ+XlN6/UpyryP1PFtXTX/Rr6K956UzvHeLSen3
a2G+0LU7D3KOWsZXD73JL5usZKlPHeuDdcQbv4UbRxuGrU764ws76m70h+67
Pe/HvtsayLL/Rurk104Ur9q3Mn72/sdLmqOJDDvipT4uQz0ayTPHTy2NOrfT
X+qxzVCvZrLUx839HKqMPRwdb2b+F4vBT/sn3GWsr6+berK+Q+n7wUf9R/u6
8ocTLdTzNn0tWpM+cjaRib665THcl8fQL14y9OC/+uFtetXcUpYffHf9SXgh
2Up/ua9Wpe/nnWTooe+6BoZuTsS97EvkB0MP/jgf7Mhv9MccID9Y7r+NelUj
60uuqQDjr5+erV+caiNLv/kZ75i/HEtN4jyais+E0323/WXcV5pjxCdKcy79
FiBjP9DHfqCH/RgZ+oiHnpyrnSz9GqT+sHnX2NlUB/U+r/zMeaaDZNihL/PT
UaYH7s89+7U83Ul/mZdO2mU+QmS9vRBBfryb0APL/ITov/a6x3XsYIj2x7vv
dT+d+8+ov/698BvewwD5NzDxHRE=
      "]]& ],
   AspectRatio->NCache[Rational[13, 67]^Rational[1, 2], 0.44048819592160315`],
   
   FormatType:>StandardForm,
   FrameTicks->Automatic,
   PlotRange->All,
   PlotRangePadding->Scaled[0.1]],
  TreeForm[
   Graphics[
    Raster[{{0, 1}, {1, 0}}, {{0, 0}, {2, 2}}, {0, 1}], Frame -> Automatic, 
    FrameLabel -> {None, None}, FrameTicks -> {{None, None}, {None, None}}, 
    GridLinesStyle -> Directive[
      GrayLevel[0.5, 0.4]], 
    Method -> {
     "GridLinesInFront" -> True, "DefaultBoundaryStyle" -> Automatic, 
      "DefaultGraphicsInteraction" -> {
       "Version" -> 1.2, "TrackMousePosition" -> {True, False}, 
        "Effects" -> {
         "Highlight" -> {"ratio" -> 2}, "HighlightPoint" -> {"ratio" -> 2}, 
          "Droplines" -> {
           "freeformCursorMode" -> True, 
            "placement" -> {"x" -> "All", "y" -> "None"}}}}, 
      "DefaultPlotStyle" -> Automatic}]],
  Editable->False]], "Output",
 CellLabel->
  "Out[457]//TreeForm=",ExpressionUUID->"ce067248-182e-4080-aaa9-\
01248a30e40b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"nb", "=", 
  RowBox[{"CreateDocument", "[", "]"}]}]], "Input",
 CellLabel->
  "In[458]:=",ExpressionUUID->"bf10f728-617b-4fb5-9f0b-654b97d85669"],

Cell[BoxData[
 TemplateBox[<|
  "obj" -> NotebookObject[
    "a703c50b-977d-4cd3-bcfe-b9d73882ed1a", 
     "2599e7b0-a1a5-4f16-9773-6610940d9519"], "label" -> "\"Untitled-1\""|>,
  "NotebookObjectUUIDsUnsaved"]], "Output",
 CellLabel->
  "Out[458]=",ExpressionUUID->"20f8a640-f752-45a8-bb22-6e1819160a33"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FullForm", "[", "nb", "]"}], "\[IndentingNewLine]", 
 RowBox[{"TreeForm", "[", "nb", "]"}]}], "Input",
 CellLabel->
  "In[459]:=",ExpressionUUID->"44b51297-7d26-4082-b06e-e2e233376f29"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"NotebookObject", "[", 
    RowBox[{
    "\"\<a703c50b-977d-4cd3-bcfe-b9d73882ed1a\>\"", ",", 
     "\"\<2599e7b0-a1a5-4f16-9773-6610940d9519\>\""}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[459]//FullForm=",ExpressionUUID->"933bee3a-18b5-46dc-8aa0-\
9fc547c7d8f7"],

Cell[BoxData[
 InterpretationBox[
  GraphicsBox[
   TagBox[
    GraphicsComplexBox[{{0.4472135954999579, 0.8944271909999159}, {0., 0.}, {
     0.8944271909999159, 0.}}, {
      {RGBColor[0.55, 0.45, 0.45], LineBox[{{1, 2}, {1, 3}}]}, {
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox["NotebookObject", "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.011111111111111112`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 1],
         TagBox[
          
          TemplateBox[<|
           "obj" :> NotebookObject[
             "a703c50b-977d-4cd3-bcfe-b9d73882ed1a", 
              "2599e7b0-a1a5-4f16-9773-6610940d9519"], "label" -> 
            "\"a703c50b-977d-4cd3-bcfe-b9d73882ed1a\""|>, 
           "NotebookObjectUUIDsMissing"], HoldForm]],
        Annotation[#, 
         HoldForm[
          NotebookObject[
          "a703c50b-977d-4cd3-bcfe-b9d73882ed1a", 
           "2599e7b0-a1a5-4f16-9773-6610940d9519"]], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"a703c50b-977d-4cd3-bcfe-b9d73882ed1a\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.011111111111111112`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 2],
         TagBox["\"a703c50b-977d-4cd3-bcfe-b9d73882ed1a\"", HoldForm]],
        Annotation[#, 
         HoldForm["a703c50b-977d-4cd3-bcfe-b9d73882ed1a"], "Tooltip"]& ], 
       TagBox[
        TooltipBox[InsetBox[
          FrameBox[
           StyleBox[
            TagBox["\<\"2599e7b0-a1a5-4f16-9773-6610940d9519\"\>",
             HoldForm], "StandardForm", "Output",
            StripOnInput->False,
            LineColor->GrayLevel[0],
            FrontFaceColor->GrayLevel[0],
            BackFaceColor->GrayLevel[0],
            GraphicsColor->GrayLevel[0],
            FontSize->Scaled[0.011111111111111112`],
            FontColor->GrayLevel[0]],
           Background->RGBColor[1., 1., 0.871],
           FrameStyle->GrayLevel[0.5],
           StripOnInput->False], 3],
         TagBox["\"2599e7b0-a1a5-4f16-9773-6610940d9519\"", HoldForm]],
        Annotation[#, 
         HoldForm["2599e7b0-a1a5-4f16-9773-6610940d9519"], "Tooltip"]& ]}}],
    Annotation[#, 
     VertexCoordinateRules -> {{0.4472135954999579, 0.8944271909999159}, {0., 
      0.}, {0.8944271909999159, 0.}}]& ],
   AspectRatio->NCache[Rational[1, 3] 2^Rational[-1, 2], 0.2357022603955158],
   FormatType:>StandardForm,
   FrameTicks->Automatic,
   ImageSize->{682.1458333333317, Automatic},
   PlotRange->All,
   PlotRangePadding->Scaled[0.1]],
  TreeForm[
   NotebookObject[
   "a703c50b-977d-4cd3-bcfe-b9d73882ed1a", 
    "2599e7b0-a1a5-4f16-9773-6610940d9519"]],
  Editable->False]], "Output",
 CellLabel->
  "Out[460]//TreeForm=",ExpressionUUID->"42b09bc1-c348-4950-bca3-\
4cbbab17c840"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Parts of a Composite Expression", "Section",ExpressionUUID->"bacbb3f3-56c5-476c-90bb-18cfff701a17"],

Cell[TextData[{
 "Since the composite function is built out of parts, you would want a way to \
access and inspect those parts. The ",
 ButtonBox["Part",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/Part.html"], None},
  ButtonNote->"https://reference.wolfram.com/language/ref/Part.html"],
 " function can be the perfect tool for this."
}], "Text",ExpressionUUID->"592264ca-fd05-4600-b569-086c20366ee2"],

Cell["Get the first element of the expression:", "Text",ExpressionUUID->"9497d806-4e27-4c0e-b150-72f3653811f9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "=", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"x", ",", "y"}], "}"}], ",", 
    RowBox[{"{", " ", 
     RowBox[{"0", ",", "5"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"Red", ",", "Green", ",", "Blue"}], "}"}]}], "}"}]}]], "Input",
 CellLabel->
  "In[461]:=",ExpressionUUID->"805ae166-b17d-4f43-8759-bae68dbea3bd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"c", "+", 
      RowBox[{"b", " ", "x"}], "+", 
      RowBox[{"3", " ", 
       SuperscriptBox["x", "2"]}]}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"0", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
      "RGBColorSwatchTemplate"], ",", 
     TemplateBox[<|"color" -> RGBColor[0, 1, 0]|>,
      "RGBColorSwatchTemplate"], ",", 
     TemplateBox[<|"color" -> RGBColor[0, 0, 1]|>,
      "RGBColorSwatchTemplate"]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[461]=",ExpressionUUID->"6315ef96-81e0-4645-a9d6-1dc3798fc1dc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "expr", "]"}]], "Input",
 CellLabel->
  "In[462]:=",ExpressionUUID->"150942ba-b271-49da-9ace-46aaa995b30c"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"List", "[", 
    RowBox[{
     RowBox[{"List", "[", 
      RowBox[{"x", ",", 
       RowBox[{"Plus", "[", 
        RowBox[{"c", ",", 
         RowBox[{"Times", "[", 
          RowBox[{"b", ",", "x"}], "]"}], ",", 
         RowBox[{"Times", "[", 
          RowBox[{"3", ",", 
           RowBox[{"Power", "[", 
            RowBox[{"x", ",", "2"}], "]"}]}], "]"}]}], "]"}]}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{"0", ",", "5"}], "]"}], ",", 
     RowBox[{"List", "[", 
      RowBox[{
       RowBox[{"RGBColor", "[", 
        RowBox[{"1", ",", "0", ",", "0"}], "]"}], ",", 
       RowBox[{"RGBColor", "[", 
        RowBox[{"0", ",", "1", ",", "0"}], "]"}], ",", 
       RowBox[{"RGBColor", "[", 
        RowBox[{"0", ",", "0", ",", "1"}], "]"}]}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[462]//FullForm=",ExpressionUUID->"b3d0335d-c0da-495b-b01c-\
520d34e9192a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Part", "[", 
  RowBox[{"expr", ",", "1"}], "]"}]], "Input",
 CellLabel->
  "In[463]:=",ExpressionUUID->"e3db10e5-57a4-46cc-b273-fef56baec61e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", 
   RowBox[{"c", "+", 
    RowBox[{"b", " ", "x"}], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["x", "2"]}]}]}], "}"}]], "Output",
 CellLabel->
  "Out[463]=",ExpressionUUID->"1eea2fcf-244b-493d-8a9e-37d4c1808414"]
}, Open  ]],

Cell["You can also use the shorthand notation for Part[[ ]]:", "Text",ExpressionUUID->"c753b42d-8d15-4a8e-9fa9-0159434f382e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "[", 
  RowBox[{"[", "1", "]"}], "]"}]], "Input",
 CellLabel->
  "In[464]:=",ExpressionUUID->"19547473-d561-4d58-b68f-65c0548b6756"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x", ",", 
   RowBox[{"c", "+", 
    RowBox[{"b", " ", "x"}], "+", 
    RowBox[{"3", " ", 
     SuperscriptBox["x", "2"]}]}]}], "}"}]], "Output",
 CellLabel->
  "Out[464]=",ExpressionUUID->"bb2ea363-9ca8-494c-a001-70b587a3621c"]
}, Open  ]],

Cell["\<\
You can select what you want from the second part by adding a second argument:\
\>", "Text",ExpressionUUID->"4453368d-dec2-4c7b-a0c9-ac506d49d501"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[465]:=",ExpressionUUID->"929e770d-2915-4aad-83a9-26f68bf61081"],

Cell[BoxData["0"], "Output",
 CellLabel->
  "Out[465]=",ExpressionUUID->"90b0a687-2998-42d1-9c0a-8072c5eff5f0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "[", 
  RowBox[{"[", 
   RowBox[{"3", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[466]:=",ExpressionUUID->"29be47a0-28e0-4814-ab07-3930758bfac5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   TemplateBox[<|"color" -> RGBColor[1, 0, 0]|>,
    "RGBColorSwatchTemplate"], ",", 
   TemplateBox[<|"color" -> RGBColor[0, 0, 1]|>,
    "RGBColorSwatchTemplate"]}], "}"}]], "Output",
 CellLabel->
  "Out[466]=",ExpressionUUID->"2fc0f257-354d-47a1-ba9f-b80f9dc2471a"]
}, Open  ]],

Cell["\<\
Part works for any composite expression, not just a list of elements:\
\>", "Text",ExpressionUUID->"ec4fd4ff-6d76-4899-bf4c-63d857ada2e2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "=", 
  RowBox[{"a", "+", 
   RowBox[{"b", "*", 
    RowBox[{"c", "/", "d"}]}]}]}]], "Input",
 CellLabel->
  "In[467]:=",ExpressionUUID->"2a303c8c-4e37-4640-90cf-f437f8968603"],

Cell[BoxData[
 RowBox[{"3", "+", 
  FractionBox[
   RowBox[{"b", " ", "c"}], "d"]}]], "Output",
 CellLabel->
  "Out[467]=",ExpressionUUID->"e8a9b2cb-798f-4a37-993d-00099e80a742"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullForm", "[", "expr", "]"}]], "Input",
 CellLabel->
  "In[468]:=",ExpressionUUID->"0b1b5813-83d0-416c-90bb-4b450c2c76ae"],

Cell[BoxData[
 TagBox[
  StyleBox[
   RowBox[{"Plus", "[", 
    RowBox[{"3", ",", 
     RowBox[{"Times", "[", 
      RowBox[{"b", ",", "c", ",", 
       RowBox[{"Power", "[", 
        RowBox[{"d", ",", 
         RowBox[{"-", "1"}]}], "]"}]}], "]"}]}], "]"}],
   ShowSpecialCharacters->False,
   ShowStringCharacters->True,
   NumberMarks->True],
  FullForm]], "Output",
 CellLabel->
  "Out[468]//FullForm=",ExpressionUUID->"597c00db-c1b9-41f5-8316-\
3eb16952223a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "[", 
  RowBox[{"[", "2", "]"}], "]"}]], "Input",
 CellLabel->
  "In[469]:=",ExpressionUUID->"800742c7-a8d9-4ce0-bbd0-d65bc3c615ad"],

Cell[BoxData[
 FractionBox[
  RowBox[{"b", " ", "c"}], "d"]], "Output",
 CellLabel->
  "Out[469]=",ExpressionUUID->"1d64293a-c45f-4111-b3a4-625199eac96f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "3"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[470]:=",ExpressionUUID->"c1a1af43-8c9b-488a-bcec-37536d351a35"],

Cell[BoxData[
 FractionBox["1", "d"]], "Output",
 CellLabel->
  "Out[470]=",ExpressionUUID->"e8db15c5-fb45-47d1-9ee8-313dd6fa189b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "2"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[471]:=",ExpressionUUID->"15fdb294-7cf3-4c7a-b965-73b2ec590518"],

Cell[BoxData["c"], "Output",
 CellLabel->
  "Out[471]=",ExpressionUUID->"343f5b84-246e-4a7e-b8da-b9660c664d8b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", "1"}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[473]:=",ExpressionUUID->"b76b7037-d5dc-4c49-8402-2923c815b01b"],

Cell[BoxData["b"], "Output",
 CellLabel->
  "Out[473]=",ExpressionUUID->"a34a879c-3ca2-4110-9d5f-0e57e8b61c99"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"expr", "[", 
  RowBox[{"[", 
   RowBox[{"2", ",", 
    RowBox[{"{", 
     RowBox[{"1", ",", "3"}], "}"}]}], "]"}], "]"}]], "Input",
 CellLabel->
  "In[472]:=",ExpressionUUID->"8761e333-1157-4e9b-88c7-a3700ec32100"],

Cell[BoxData[
 FractionBox["b", "d"]], "Output",
 CellLabel->
  "Out[472]=",ExpressionUUID->"93fda23b-9550-4c46-a059-b4ce74b0a406"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "CYUButton"], 
          TextCell[#, "CYUButton" <> "Active"]]& )[
          Framed[
           Style["Check Your Understanding", "CYUButton"], RoundingRadius -> 
           5, FrameMargins -> {{18, 18}, {15, 15}}, ImageSize -> {205, 51}, 
           BaseStyle -> "Text"]], (WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         Framed[
          Column[{
            TextCell[
            "For exp = 1 + x^2, what corresponds to the part exp[[2, 2]] of \
the expression?", "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "2 x^2", "info" -> 
                    "2 x^2 is not a part of exp.", "index" -> 1, "correct" -> 
                    False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "2 x^2", "info" -> 
                    "2 x^2 is not a part of exp.", "index" -> 1, "correct" -> 
                    False|>["index"], {}, 
                    <|
                    "statement" -> "2 x^2", "info" -> 
                    "2 x^2 is not a part of exp.", "index" -> 1, "correct" -> 
                    False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "2 x^2", "info" -> 
                    "2 x^2 is not a part of exp.", "index" -> 1, "correct" -> 
                    False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "2 x^2", "info" -> 
                    "2 x^2 is not a part of exp.", "index" -> 1, "correct" -> 
                    False|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "2 x^2", "info" -> 
                    "2 x^2 is not a part of exp.", "index" -> 1, "correct" -> 
                    False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "x", "info" -> "x is exp[[2, 1]].", 
                    "index" -> 2, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "x", "info" -> "x is exp[[2, 1]].", 
                    "index" -> 2, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "x", "info" -> "x is exp[[2, 1]].", 
                    "index" -> 2, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "x", "info" -> "x is exp[[2, 1]].", 
                    "index" -> 2, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "x", "info" -> "x is exp[[2, 1]].", 
                    "index" -> 2, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "x", "info" -> "x is exp[[2, 1]].", 
                    "index" -> 2, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "2", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "2", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "2", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "2", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "2", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "2", "info" -> "Correct", "index" -> 3, 
                    "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 4 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "+", "info" -> 
                    "In FullForm the operator + is the head of the \
expression, Plus.", "index" -> 4, "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "+", "info" -> 
                    "In FullForm the operator + is the head of the \
expression, Plus.", "index" -> 4, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "+", "info" -> 
                    "In FullForm the operator + is the head of the \
expression, Plus.", "index" -> 4, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "+", "info" -> 
                    "In FullForm the operator + is the head of the \
expression, Plus.", "index" -> 4, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "+", "info" -> 
                    "In FullForm the operator + is the head of the \
expression, Plus.", "index" -> 4, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "+", "info" -> 
                    "In FullForm the operator + is the head of the \
expression, Plus.", "index" -> 4, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}], 
            Spacer[0], 
            TextCell["What is returned by Part[1 + x^2, {2, 2}]?", "Text"], 
            DynamicModule[{WolframUTools`Private`qState = None}, 
             RadioButtonBar[
              Dynamic[WolframUTools`Private`qState], {1 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "2", "info" -> 
                    "That would be Part[1+ x^2, 2, 2]", "index" -> 1, 
                    "correct" -> False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "2", "info" -> 
                    "That would be Part[1+ x^2, 2, 2]", "index" -> 1, 
                    "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "2", "info" -> 
                    "That would be Part[1+ x^2, 2, 2]", "index" -> 1, 
                    "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "2", "info" -> 
                    "That would be Part[1+ x^2, 2, 2]", "index" -> 1, 
                    "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "2", "info" -> 
                    "That would be Part[1+ x^2, 2, 2]", "index" -> 1, 
                    "correct" -> False|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "2", "info" -> 
                    "That would be Part[1+ x^2, 2, 2]", "index" -> 1, 
                    "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 2 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "x^2", "info" -> 
                    "That would be Part[1+ x^2, 2].", "index" -> 2, "correct" -> 
                    False|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "x^2", "info" -> 
                    "That would be Part[1+ x^2, 2].", "index" -> 2, "correct" -> 
                    False|>["index"], {}, 
                    <|
                    "statement" -> "x^2", "info" -> 
                    "That would be Part[1+ x^2, 2].", "index" -> 2, "correct" -> 
                    False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "x^2", "info" -> 
                    "That would be Part[1+ x^2, 2].", "index" -> 2, "correct" -> 
                    False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "x^2", "info" -> 
                    "That would be Part[1+ x^2, 2].", "index" -> 2, "correct" -> 
                    False|>["info"], "Text", FontColor -> If[
                    <|
                    "statement" -> "x^2", "info" -> 
                    "That would be Part[1+ x^2, 2].", "index" -> 2, "correct" -> 
                    False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 3 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "2 x^2", "info" -> 
                    "Correct. {2, 2} returns a list of item 2 and item 2 \
again with the Head \[OpenCurlyQuote]Plus\[CloseCurlyQuote] from the original \
expression.", "index" -> 3, "correct" -> True|>["statement"], "Text", 
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "2 x^2", "info" -> 
                    "Correct. {2, 2} returns a list of item 2 and item 2 \
again with the Head \[OpenCurlyQuote]Plus\[CloseCurlyQuote] from the original \
expression.", "index" -> 3, "correct" -> True|>["index"], {}, 
                    <|
                    "statement" -> "2 x^2", "info" -> 
                    "Correct. {2, 2} returns a list of item 2 and item 2 \
again with the Head \[OpenCurlyQuote]Plus\[CloseCurlyQuote] from the original \
expression.", "index" -> 3, "correct" -> True|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "2 x^2", "info" -> 
                    "Correct. {2, 2} returns a list of item 2 and item 2 \
again with the Head \[OpenCurlyQuote]Plus\[CloseCurlyQuote] from the original \
expression.", "index" -> 3, "correct" -> True|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "2 x^2", "info" -> 
                    "Correct. {2, 2} returns a list of item 2 and item 2 \
again with the Head \[OpenCurlyQuote]Plus\[CloseCurlyQuote] from the original \
expression.", "index" -> 3, "correct" -> True|>["info"], "Text", FontColor -> 
                    If[
                    <|
                    "statement" -> "2 x^2", "info" -> 
                    "Correct. {2, 2} returns a list of item 2 and item 2 \
again with the Head \[OpenCurlyQuote]Plus\[CloseCurlyQuote] from the original \
expression.", "index" -> 3, "correct" -> True|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]], 4 -> Dynamic[
                 Column[{
                   TextCell[
                    <|
                    "statement" -> "^", "info" -> 
                    "In FullForm the operator ^ is the head of the \
expression, Power.", "index" -> 4, "correct" -> False|>["statement"], "Text", 
                    
                    Apply[Sequence, 
                    Which[
                    WolframUTools`Private`qState =!= <|
                    "statement" -> "^", "info" -> 
                    "In FullForm the operator ^ is the head of the \
expression, Power.", "index" -> 4, "correct" -> False|>["index"], {}, 
                    <|
                    "statement" -> "^", "info" -> 
                    "In FullForm the operator ^ is the head of the \
expression, Power.", "index" -> 4, "correct" -> False|>["correct"], {
                    FontColor -> Darker[Green, 5/9], FontWeight -> Bold}, 
                    True, {FontColor -> Darker[Red, 5/9], FontWeight -> 
                    Bold}]]], 
                   If[
                   WolframUTools`Private`qState === <|
                    "statement" -> "^", "info" -> 
                    "In FullForm the operator ^ is the head of the \
expression, Power.", "index" -> 4, "correct" -> False|>["index"], 
                    TextCell[
                    <|
                    "statement" -> "^", "info" -> 
                    "In FullForm the operator ^ is the head of the \
expression, Power.", "index" -> 4, "correct" -> False|>["info"], "Text", 
                    FontColor -> If[
                    <|
                    "statement" -> "^", "info" -> 
                    "In FullForm the operator ^ is the head of the \
expression, Power.", "index" -> 4, "correct" -> False|>["correct"], 
                    Darker[Green], 
                    Darker[Red]]], Nothing]}, BaselinePosition -> {1, 1}, 
                  Spacings -> 0]]}, Appearance -> "Vertical", 
              BaselinePosition -> Automatic], DynamicModuleValues :> {}]}], 
          FrameStyle -> Directive[
            GrayLevel[0.92], 
            Thickness[Large]], RoundingRadius -> 0, Background -> 
          GrayLevel[0.97], FrameMargins -> 15]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1177.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"b5e09a4c-b7da-44c9-926e-\
f88401e6b4d9"]], "Text",
 CellTags->"CYU",ExpressionUUID->"c5f4ba0e-d194-434b-bc2f-2ea27dd0aeef"]
}, Open  ]],

Cell[CellGroupData[{

Cell["References", "Section",ExpressionUUID->"d43a5ede-b42a-4d83-a919-1983efe1bf3a"],

Cell[TextData[ButtonBox["Expressions Overview",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/tutorial/ExpressionsOverview.\
html"], None},
 ButtonNote->
  "https://reference.wolfram.com/language/tutorial/ExpressionsOverview.html"]]\
, "Item",ExpressionUUID->"e5e78013-117a-4f5e-81b6-eb711360d2ce"],

Cell[TextData[ButtonBox["How to Use Wolfram Language's Syntax",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/howto/UseMathematicasSyntax.\
html"], None},
 ButtonNote->
  "https://reference.wolfram.com/language/howto/UseMathematicasSyntax.html"]],\
 "Item",ExpressionUUID->"a01b5f3b-0221-411e-82a8-f8470480bf7b"],

Cell[TextData[ButtonBox["Building Up Calculations",
 BaseStyle->"Hyperlink",
 ButtonData->{
   URL["https://reference.wolfram.com/language/tutorial/\
BuildingUpCalculations.html"], None},
 ButtonNote->
  "https://reference.wolfram.com/language/tutorial/BuildingUpCalculations.\
html"]], "Item",ExpressionUUID->"14c8f4e0-52ac-4a6e-8bf8-5b90986e2479"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Exercises", "Section",ExpressionUUID->"d6918514-265c-4160-9ca6-cdf8ba6d56c7"],

Cell[TextData[{
 "Use the ",
 StyleBox["\[OpenCurlyDoubleQuote]InternationalAirlinePassengers\
\[CloseCurlyDoubleQuote]", "Input"],
 " data from ",
 ButtonBox["ExampleData",
  BaseStyle->"Hyperlink",
  ButtonData->{
    URL["https://reference.wolfram.com/language/ref/ExampleData.html"], None},
  
  ButtonNote->"https://reference.wolfram.com/language/ref/ExampleData.html"],
 ", which provides the monthly totals for the number of international airline \
passengers from January 1949 to December 1960 (given in thousands of \
passengers)."
}], "Text",ExpressionUUID->"3c83d4d4-9a77-4885-a68b-ff11d41f7639"],

Cell[BoxData[
 RowBox[{"data", "=", 
  RowBox[{"ExampleData", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "\"\<Statistics\>\"", ",", "\"\<InternationalAirlinePassengers\>\""}], 
     "}"}], ",", "\"\<DataElements\>\""}], "]"}]}]], "Input",ExpressionUUID->\
"e6f64e38-f368-4da3-a3a7-3167d66a5a37"],

Cell[TextData[{
 "What type of an object is ",
 StyleBox["data", "Input"],
 "? "
}], "ItemNumbered",ExpressionUUID->"bd73ec34-940d-44be-9099-7f0d7cb48f81"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{
             StyleBox["What is the ", FontWeight -> "Plain"], 
             StyleBox[
              ButtonBox["Head", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL["https://reference.wolfram.com/language/ref/Head.html"], 
                 None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/Head.html"], 
              FontWeight -> "Plain"], 
             StyleBox[" of the expression?", FontWeight -> "Plain"]}], 
           "Text"]]}}, {}]], Spacings -> 2, Alignment -> {Left, Baseline}, 
     ItemSize -> Scaled[1], BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1177.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"ff6fcd00-049e-4af0-a732-\
405cd6009164"]], "Text",
 CellTags->"CYU",ExpressionUUID->"5a33d627-33bb-4c59-af4f-d5dbd4f9a096"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"Head", "[", "data", "]"}]], "Input"]]}}, {}]], Spacings -> 
     2, Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1177.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"75ae5235-a355-447d-8420-\
bd70eab0ab93"]], "Text",
 CellTags->"CYU",ExpressionUUID->"7b4a12d9-bca0-4c17-843c-a15e2f058dc3"],

Cell["Is it an atomic expression or a composite expression?", "ItemNumbered",ExpressionUUID->"e14b8da5-5ae5-4f5c-b5a2-a8b8a2c7d6df"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{
             StyleBox["Remember ", FontWeight -> "Plain"], 
             StyleBox[
              ButtonBox["AtomQ", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL["https://reference.wolfram.com/language/ref/AtomQ.html"],
                  None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/AtomQ.html"], 
              FontWeight -> "Plain"], 
             StyleBox[".", FontWeight -> "Plain"]}], "Text"]]}}, {}]], 
     Spacings -> 2, Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], 
     BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1177.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"c19ab450-54e7-4e5c-8819-\
0cfd33aee83c"]], "Text",
 CellTags->"CYU",ExpressionUUID->"d5d06b0a-81a7-46e7-92ed-1ea4c4abdf98"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"AtomQ", "[", "data", "]"}]], "Input"]]}}, {}]], Spacings -> 
     2, Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1177.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"42fad0ac-9714-447b-83e9-\
1a2842c38aea"]], "Text",
 CellTags->"CYU",ExpressionUUID->"de5fed75-e0fe-4d96-a158-24986edaee1d"],

Cell[CellGroupData[{

Cell["\<\
To get a list of the number of passengers (in thousands) for all the 12 \
months in the year 1960, evaluate \
\>", "ItemNumbered",ExpressionUUID->"0965e990-8625-402f-9d30-fe3f95ef0bb9"],

Cell[BoxData[
 RowBox[{"\t", 
  RowBox[{"data1960", "=", 
   RowBox[{"Rest", "[", 
    StyleBox[
     RowBox[{"Last", "[", "data", "]"}], "Input"], 
    StyleBox["]", "Input"]}]}]}]], "Input",ExpressionUUID->"393bff40-4808-\
4766-af72-8c77a951cd46"],

Cell["\<\
How would you use Part to access the passenger volume for February (second \
item in the list)? For November (next-to-last item in the list)?\
\>", "ItemParagraph",ExpressionUUID->"02d7cfaa-4a95-410e-b6b4-103f5947c4af"]
}, Open  ]],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{
             StyleBox[
              ButtonBox["Part", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL["https://reference.wolfram.com/language/ref/Part.html"], 
                 None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/Part.html"], 
              FontWeight -> "Plain"], 
             StyleBox[
             " can work from the head as well as the tail of the list.", 
              FontWeight -> "Plain"]}], "Text"]]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1177.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"79f48ad7-83a8-49b3-a4c6-\
b7dd03064a25"]], "Text",
 CellTags->"CYU",ExpressionUUID->"9fb2a8fe-3503-4e27-a495-fba1293c4cc1"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"data1960", " ", "=", 
              RowBox[{"Rest", "[", 
                RowBox[{"Last", "[", "data", "]"}], "]"}]}]], "Input", 
           CellLabel -> "In[360]:="]]}, {
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"Part", "[", 
              RowBox[{"data1960", ",", "2"}], "]"}]], "Input", CellLabel -> 
           "In[362]:="]]}, {
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"Part", "[", 
              RowBox[{"data1960", ",", 
                RowBox[{"-", "2"}]}], "]"}]], "Input", CellLabel -> 
           "In[363]:="]]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1177.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"83c9d927-76c2-4beb-8564-\
77ff98d5fcc5"]], "Text",
 CellTags->"CYU",ExpressionUUID->"565203c5-cd28-461b-9707-4084cf819118"],

Cell[TextData[{
 "Get the monthly passenger volumes for the years 1950, 1955 and 1960. For \
example, you can get the monthly passenger volumes for 1950 with ",
 StyleBox["Rest[data[[2]]]", "Input"],
 ". "
}], "ItemNumbered",ExpressionUUID->"379582cb-ea7b-4d8f-ba85-abe36edfea6b"],

Cell[TextData[{
 "Start typing in List and from the suggestions for code completion, pick \
ListLinePlot:  ",
 Cell[BoxData[
  GraphicsBox[
   TagBox[RasterBox[CompressedData["
1:eJztnXtQVFl+x91HHpU/UskfqVTc3T+2aquyeZRVGUhlk/zlKqlksxuVvDYR
J8nuDjr7GHFfM2yyM+ruquyuCuMDRkHFkdFBR/HRMIggOKAINiCg4PCQZwMN
dGM30ECj35zfube7b3ff29BNN7cvnFP1Hex7Hr9zz/n0Ob9zu/s3n//GzuTU
T65Zs+YHv83+k/w/r6///vf/J/2ff4+9+NfXfvDq9tde+dY/vPbDV7a/8v0v
feNT7GI90wdMn2aCSCKJJJJIIokkkkgiiSSSSCKJJJJIIokkkkgiiSSSQZPN
OohBq0Pvbogk0iKSG+UZ60Efz5FSL7bp3SGRVkVyo7YgA3v37sXenHK4wqpr
Q876P/Ayu2Z9DrsSxZ65XHC53FFsUaSVkRw+7tZnhcmcCwUpn/Myuy7jTvS6
5TJj05pP8nZzmoXfIZIyOXB60x9518nw6bCh2WyGubkzgrqhulWrYDa81V+k
lZ7CY9ZlbcOdO7WorfWI8UrMsr89Nu19nOqVFJxGRkYGsrKykFNwFbVtg/Cv
4UBnWzOam5tRfjrNu36nZJUwGx57d2Bus0bhvkUybgqPWXOW78wVqIxadc+i
NidVs86a9am42izXY2vrenltDal14fowIq2sFB6zbQXa/GWZg0ly91z1lfnE
OqSkpbPzXho2rfsd7/UcTz1XM1LXfHphZlMK4Iz+QIhkmLQ0f9ZmzgrJrEOR
vymrVpHjRlt5AXKuqj8fc5hzFly/RVqtaWnMOppzQjLr6izwWyPXbUrD6Yvl
aBsMzeFC7Yq0mlNsmaXUWZKFdWs+oeKXpiCnRGOdFcyKpJlizyxPLivMJQXY
m7opiN2U0+aQ7eaYxfNZkZRJweym02F+DrYYZl3o6Ql4NuV2oFm59qp8lqFs
N71kMMxeibSyk4/ZT/wm26svXsTFggIUKMX8T60VdCFmOy9Kz1nXp2ahvLkT
Ngd9HuvCoPmi77mWCrOuttMKH4Keh/Xw7+J0mstZf2rDfm+JtJKSAzmedVZL
n1qPWo3tOSSz7k6krfmNBZ9dpV3sVGnZiox1v6tant5b4qOx1Zwcft8ZUGXk
t1I1GXG1+Z4LqPqdbhvuXMxCyvrfVzmDbUKWxhmMJ5sZezf9ocrnEOloE8yK
tAzJ5bBhcHCQy2pb/LnKZbNKdaw2OMT3vEQSSSSRRBJJJJEMnz5qHxQSimup
MeucnhESiksJZoWMJsHs6tXguEP3PkQiLWYdLE9oZetWa6/ufYhEmsxOuYRW
uDizcdCPcCWYXb1aacw+Y3lCK1vErN59iESC2dUrwewS9MzOzrBO3cditSna
zHYN2VDc2In8yhacKGtif5thaujEx5bxqNrRYtY+6YqKRof70NEzGqLMKI5v
Xou1axPwQYczanaFFhYxG412xp3TKG/pQc7NRk2VPXyKMcd0VOxpMTsxOR0V
Vf06gfG4Dz2aZazI2/pZVmYDrvc4Ft3uQEM+Xlq7E3eHo9PP1ShiNhrt3Nbg
9fL9Nr/XNx92RcVerJm9e2QD1iYcxUCE9cfGrBgYC2Z5uOEo57xqTP+5N6qi
wSz5A2q83vt4AK45dxC3HZaxJdvUYtbG1vtoqPptidm+wLzRenxzLfMJEhLw
0oYNTDtRParI76/H3q2sLpVhemnrWyhutvB636E6CQlSHv2b/m49EWxDKKSI
2aW28WFDt6Y/EMgryWTuXLJN3Zi196K48BIuma4h41vE32aUDfnyK38t8Zph
akKzuYqVScGxaotUr+gS4/kz3AfOOHcNl9jrSzebYI0DDoykaDB7rqo1iMv3
qh/hqXWCn70C886wc9lSberGrEL330nhzFYqmH1sekteRzdj79uXUP3Yolqn
2q7/3BtV0WA2r7xJdY0lv4D8g8Dr9DxhqTa1mB13TkVFErNHMBiyzGbO3+2h
gLyhdpjOHcF3Nkt+wPpflAXXGY1OP1ejiNmltqG2zt4wf8yZpfVWbZ1dqk0t
ZsccU1HRR5ytV3DmSjEKr1xF4fsXUVTbq1JmMyosnmsjOPO9zfjGry7iQfcg
Oh9V4du05n75CHrkOj21RzjH33i7GA8e1qHoRh0GotTn1SJidqltlDR0BXFp
7h7ieWUPg33dG8yfXTJTMWd2q/cc5dH6n9f4l8nZGsSsKedN6Wzl0UtbUfhw
RFGvF4e+laBo9zU8sOnPgZEUDWbVfFZi1mJzqJ7B2gZGl85UjJhtfdKJk6fO
LFGncDz7HRzNPqlZJueEf/7AyJjuLBhF0WCWVN4c+vME3/PZ7qjY02J29Nnk
kvR0YAh37tUtu4bG7Evu+2oRMRuNdkYmnKp+gB+vTd0YtjujYi9WzArFv6LF
rEftbN+/Ye5A/m36voF03rr+oAOP+0ejakcwu3oVbWaXS1rMWlme0MoWMat3
HyKRYHb1asUxOzEptMLFmY2DfoQrLWbpLCi0skXM6t2HSCSYXb3qGrHp3odI
JJgVMpq0mBUSimepMTs7Ny8kFJcSzAoZTYJZIaOJ+PT9/wqbBbNCcS8ls+sy
zIJZobgX8dlmlf5fQzb5/zMkmBWKZxGfgf8nLcGsUDxLi9kZlickFI8SzAoZ
TXHB7PQkxhwzuo+FkDEUa2YnbUPoH5wIUWYCucn0u9lEXO+NBrczGB4km5KG
bZPevIn2QmxJTMKW5GSmn8Ds0H/8hcJXrJmtzUxkPP4Sw5plJnB22+dYmSSU
Di6e2bGWc0hYuwtmW0CerR4bA36bvjZxFz5ibU/23sWhA1nYn5bMrifjo8C6
kdoUWlbFmlnz8STGTA7GIqw/6ZhQ9RsmWnI457WBa6WjHlsYpwnphegY7Ebp
8V2c24Q9Vb42PXU12CObE9PB1zVtCi2rdGPW0YRUvgYmImFjEtMu/716pAn7
tyV518qEbXtR0T7K66VRncREeQ1l/6a/205JNmRmtxxvktuaxLGNVC7Lu9aP
NWgwO92Ps+kve22mZhZLdRayKbQ6mJ0eQsWVIly/WYxD2xOD9uraTInXQzcf
oaOF7enbX0bu/VGpnqmI8fxZ7gMfer8Y19nr67cfYVLB7MYDVez1DPpbivnr
tWlFUr4msx4fhbV5pQql7+71rc8L2RRaHcwq9DDvZc6skqGnN/fKa1oy9h8v
grlzVLWOOXAPZ8ymqPizFQpfWZVZ213Jpzhw13vtctoXWLldeDy9gE2hZRXx
6VoGZidClkkOYlbiqBsV7+cgLVnak2ntDKqj6c8WMX+2H/2Do0FrocRsIipG
lLbqg5i9zpndgYeOBWwKLauIz4KSEly9eBW1nbYYMJvM5/2CqYztp2xPZf5A
acOQShklsxO4wM72qZlFeMyYG+68izRaLzf61muJO+ZzHi/D4/YmlN5skt4X
Qf5ssHx1i2G+XwVzLz0PG8Ih8nvZ+pt7uwm1pizJZ00rDvApVGwKLTuz3u91
7a2NAbMvIzAu4sYD9f5lgnyDCVTk7ZWY8e7vL+N6u/I57xCObU9UtCvv4ey8
lMKZrdfuFztrHdvmq5uSJ/PNzn27k33XE7bnoMPPD9CwGQfzuJpEfKalpSE1
JQVZJT1RY7a7pw9n3z23RJ1FXm4eTuae0Sxz5pR/vv2Zc9F9HBsZVX2OpvV8
zS9f8VmF0PIzG5iiwezouB3mhqZll3PKpfuYCsVWsWJWSChWEswKGU2C2UVo
ehqzTjtmbSOYs/ZjztKJub5HcPe0wN3dBHenGe6OB3A/uc90D+72Gsw//oj/
5a/pOuVTOSrP6lF93g5rj9ql9smO7vdqAK10ZomFueEezsp8ayWe37+CF7dP
48WNQ0Dhm8DZXcCJV4C3/wP41T8BP/sy8H9fAr6/DvjenwI7vri8evWLkl2y
T/2g/lC/qH/UT+ov6zf1n+6D7ofui+6P7pOzHwfjLphV0fQUW6c6MP+oCs9r
zuNFcRZw/ifAO98Efvk1ab71YC4eRPdN90/jQOPBxoXGh8aJxovGjcZP9zlc
gczOjg2y/fUunn9UAFz+BZC7A8j4R+DHL+nPxUoQjSONJ40rG18aZxpvGne9
5z7emZ0ds2C+5TZe3MwGzuwEDnwFSPtz/ed0NYvGn+aBzQfNC80PzZPevOrB
7Oz4MOYbS4GrGcCR/wR+9Bf6zQvtoWT/p38D7Ps74OAW4Ng2tu68Cpz7EfMb
3wKu7GO+40G8+PAIXtw6iedVZ9ke+77kR9Zfw7zZxO7nQ8w33cR88y02txV8
/51/fEf6S6/pOuVTOSrP6lF93g5rj9rl7TM7ZI/bJfvUD+oP9Yv6R/2k/urp
85B9mjc2fzSPNJ8rjdm5wY/x/M67wOnvSj5WrBkkG3RmeedbwIX/lfw4Zp/z
RWd5OrOPDmB2cvGfl8WjqP90H3Q/dF/8fcDuk/v17L75/dM4LIdfTzbY/JJ9
mm+jMTvrsPPx43t8+l9Gd2xeT5DOFbT+sPWI1qj55nLMDTzhdvXmKJ5F40Pj
RONF48bXcxpHGk8a12jOE807m3/iIBbzEg1mZ+1WaS3N+nfgO3+ytPt97c+A
/X/P3rffw4uSt/leSs8yZ6fE5/sxZZqNL40zjTeNO40/nweaj6XMJ/HAuCA+
iBNdmZ2d4z4asv87ck7TE4Hj/4UX13+N+YYSzA1183b1nj8h/3mmeaH5oXmi
+eLzFim/jBfiZinzHDaz7P34oiKPnQf+Ovz+/vKrwAc/Y/dfHPfPU4RCi+aP
5hEf7JXmNdx1i/FDHM1EsH9qM+v21+wsnlcXhOf7/HwDcPnnmG+9zc4MjuA2
hVaMaH5pnmm++byHcUYhroivxdpaDLNzlo+l99Ji1tK3v858/Hz2PhzQfRyF
9BPNP3FAPODbi2CX8cU/n1tE2wsxO99UuvDzfearP688zXzsEd3HSij+RFwQ
H/xMF4ojxhnxtlB7oZjl/orWe4TW1NPfhbu7UfcxETKOiBf+rF7L/2W8EXeh
2tBidm6oE9ip8Zwj71XpjB8HYyBkTBE/xJEqX4w74k+rrhaz/HMUFX95/lFl
9O9h2okxh2t5x00Pm0JBIp5Uv/PE+NOqo8bsveaPg9duxuvcSE/YfZq0WdA/
aA9Rxq6Iixgdhpbd5rSd2bPIsvq9F/xjMabD7NCfk3gTcRX0PIrxJ30XeHHM
NleVBXFP31OLpD9SXMQMDIfgxxcXcfH8+GIULp9Nzb7czwz+PXx6Ibc/2VuD
QwcyFbEYw2w7xH2uJPHvmwYwR7/r0INZKY5MNsYivJdJh111D59oyZZjFEbf
Jrdrs2NiWiVPxacYa8jma/blhi48ba+R44+txaH7vnVi0tNfDfYmmL1Jtesh
7nMlaanMavkGs2wNd7E64eiBzM9oYJ6jMSgu4gOHIn+kMSAu4h6Ut1t5vZ2q
MQrzvDYis2nH+e1JSMksRP4ej90knG+wevM/lOOC8nU0LRuP5LqjDRJX9zxt
DZpkZq1e294yNv8+jbaXYedGz/qcjJO3u7x9Xeg+V4pmNXyDGeYbqJUP9wzm
Zj5zVJidtqD8ShGu3TR54yLeUcznPW9cxFZ83EJr1zacJAaonl+MQhOusdfX
brfCuSSbdhxL9uzrebh2JVuKvby9kLdbfiCJ2ztmamT9YZzxvCKe5+GxfNDJ
bNhx7/30xTE7UinZ2JiOa9U1OJYm33O1ZVH3uRLkDnEG06qj+f8OXeBZ1+xQ
99KYVehh3jbOj3I+u2/u8YuL+KDTqlrnwXS0bNpxkpjd6KnnlF9nYmi6VWKU
ld+fmYlDxzPl2Issz8ujvz+7hfmzQwp7aswOVUt+8MkWp/yeapTikGbWLOo+
jazZBZ51EX/hMkt5i/lMYa67cVHM2kOWSQ5ilsvWhfL3s7HTGxexMriOI1o2
A5lVvHa0yj7FDuS/z3yHd8/hPFuvPzDVcRujsj/7AfNnu3v7MGRzBtnzlCkf
UTKbsSCzoe7TiJpb5GcKodoIxSzJHcZntzP2EQ02duC8qYztbWx/Y3P9YYNl
QX7Oy3ERHw1aMdRZI61zG31rp2dtoxiFj9ob8eHNRi+jkdo8FsCs77UL19L/
2Osb9A324Z4pjzFqVfQlKSRXvv6a8OB+JR70Mk4Hy2QfNQN3Wlpxfk8yL/PW
zT6VesH3aRTNhPHZLfG2UHsLMUuajfA7MhIb21TiItb586OyT5fn7QmIi7gN
19qVPrklKEbho2n3kmzydTVZsc7S8zDP6+k+nExL8mtzv6lLwZXKPqEUq+8f
i1Han7qr8/z+nyVvvFsXUFf7PuNZkXxHZtbSsai2F8MsVwTfRXT+IAHtP/86
Ko78FO/ln+J7anjK53ERT+Se1ixz+pR/vu2ZI6Zz4XTYMcr2/kjPQaMjVuZr
uAKuu2C32UO26bGrN4tampl0wN16Gy/4dxE3LpoRz3cRia/F2uLMuq2oLb+K
goICbWY9fZuaxHP6zne4v0dk77WZ3esxmvNdPL1yHM3Vt/CgoTHqckxN6z5/
q0G0js43mPh3+CP6zjfj57n8ne9wbROfKWs+5Y2bvBCzXrH3Bfd1l/zbmpfl
39YUs7NiV1jvN6FlEJsPmheaH+m3NS8v+bc13Gddwjx74nynpGcgKz3Fx+ys
e9GasY1Iv+XM+rfo/oax+G3MP7iBud5Wtvc4w+qTUHii8aVxpvGmcY/ubxj/
jfNBnESjr8RnSacj2J+N9N6f2TBff1X6rfgbUfyt+KtflH8r/lX+XO/FlV+w
s2g+3M3lmO1v53b1nvd4Fo0PjRONF40bjR9/PkrjSeP6apTmifSG57fiV2My
L5pnsCi1PzvwRFqDlysmB/228ldf88XkMGVKcRDqr8H96A7mnrZg1tqPGadD
d46WxCDrP90H3Q/dF4/JQTFp2P36YnJ8TRqP5YrJUfUun+9Y33usmQ0a67Eh
uBs+xIui/fET++jNvwX2JSliH+0Azv1QipnJ1iMe+6jkKJ5T7CO2Rs3XXMA8
j310ne+l7oYSuBtL4X5YxtcxN8XWfFQl/aXXdJ3yWTkqz+tRfdYOtUftUvvc
Dq1/FGOU7FM/vLGPkqR+xknsoxdXD/B5pPlc7vfrcjOryvHoIJvbCjwvPS5i
zMWLFDHmaF5ofmielpvPeGVWS7MUj6qtBs/vFEjP/U6milie0ZQnlicbVxpf
Gmcabxp3vefeqMyG0szkJGYHP+b773z1e5If542Z/FURM5nHTP6qL2YyGx8a
JxovGjcXPReNg3lcTcwumm2HHbPDTzHX1QB3y23mR17G84pTUtzMwp/6x6an
Of7ZeuAnf6VfbHoPc2Sf+kH9oX75xab/Ke8/3QfdD90X3R/dJ92v3mMumNVb
c3xNIhZmxocZF718naJnmXPdDxkrjZjrMDPVY+5JLdzt99j+Ws3P8vwve03X
eT6Vo/JUj9Wndqg9apezxte+uTi45/iWYFbIaBLMChlNglkho0kwK2Q0CWaF
jCbBrJDRJJgVMpoEs0JGkxaz0yxv2TTlhPWZa3ltChlWsWbWMW5B74A9RBk7
TmyRYhRe64kmty70drSi3tyKrhH93g+2tkJsTkzC5i3JTOmof6b/nBtdsWb2
7mEpRqFFs4wd+XKMwpKBxbNlbZbiBdaPq+SP1GFnov9vxffd6NJlfB09NTh4
IBP75LiIVWr9FQpLsWa2Xo7pYo10zp/ZVf0GW7MUB+Nu0LrllN8Da5Fy2ISu
njq8zv79emmff/1xOxyh7LJ821S4/XXBOu5Ub8/T30iYFb6Tn3Rj9llwjEK/
fXOkEfsC4iLearPyelrxArmNHpP/a27L6eXT2uYfh/DEbc/6a8d7FBfxcCHy
d/viIr5ntrK1sgybKb6LYq1uvZzOY9VIfXah/nKGN4YI9fVuwJ5hNQcz23SB
4ixuQ9WI55oVJ7YlYkN6EWxyn0oUsRg3pGWjVfgW+jE7ZcGty0W4VmrCQTlG
oXLfvHtY4uZgaSueNLP9dfs2nLhvlerdKGI8S/ECD14w4doNKV4gcWm9L8UK
OkhlA22OVGKDIg7hUTkuzMFqC+fj6BaZDYqLeDlbKru9kLVrxVHiPDFT9nH6
8JY3z42uG1IcxM27C1F1u1COP7cLrYp1Wo3Z6QHp/ZWS28pfO9rOSbGPSi38
9S05FuPRG41sDHyxGEPtD6tB8eAbNOVKcYiU89lV6ouLuO94Eeo7rKp16gP2
b4mNtThqDj73WeQ4hCea5f17qpGvnxsO18B7Ftzo6atTfi1x2iv3J7+N9vk8
hQ3PGXIPurx2MoLeN6rMsvX50vbPs+vp6CVGdyf6WJ/yxWLcdzgTBxWxGLXP
BqtDy8WsLWSZ5CBmuca7cOtCNnZukfyADQcqg+sE7JU2macNu8tUmM0Ig9mA
11NPOEMbDphwabd0ruxVlkv0vKa1PlOD2UTcGvHvk/c9dltaRzcfb5Tynili
MV5g/srZc3iP7UuXbtSFHMvVoNgzK8UofO9GGdvD2T7Oxr3EbFmAWeZbUlzE
w0VoHbDC0uGLi+hZrz1zTfECW9saUVLa6PUBvWew3Xm4VV2GtxhTCemM4QFf
HMKq5la8t1uOQ8jPZ7JvoGDW/zXrZ64vdt3OC0+8/X9yYZevL7SH82cW2/ye
afj6a0L9/UrU93jOahbs8z7joGcnnjq+WIzkG/QO9OHujTxcMqv4PKtMsWc2
OEbhhgN1/mWCfAM7buWqxEVsU+73FhwNiBfo9R+nunAiLVmRl4z8aum5QVd1
nuSnynr9bJ3XJl8vtyjWWWJ/i8KvYf7wZl5vR8BzVnZWOrzDr6+XmgN8k6k+
HFXGRcxt9DEv+8MJaQG+KqtzIiAWo17P7OJJsWK262lvBHEQg+Mi5p7Mw4mT
2nERT53yzx+fcHj7QM/JLKrPtFwLPuuKSPRMSuNZl0fWEWvYz634875x56o/
e8Wa2ZExG+obGpddzyandR9TodgqLr5vICQUhgSzQkaTYFbIaBLMChlNglkh
o0kwK2Q0CWaFjCbBrJDRJJgVMpoEs0JGk2BWyGgSzAoZTYJZIaNJMCtkNAlm
hYwmTWZn3EJCcSnBrJDRJJgVMprigtlJJ6wTLt3HQsgYijWzjjELevvtIcoo
4iI+jQa3Llj6yaYky5jTm2d7XIjNCYoYhRPRHUvbhF3lvedU9McKWxzMudEV
a2bvHpLjImqWsSM/RY6L2L94Zq0P5biIYwF5Y3V+vwXnStiFKta242kNDu5X
xCgMrBuhTRtr960Uxe/WN0r2pP7UBPQnCUcrunSfdyMr1szWH0tizGTDGmF9
h+raxTh5KMcSClwrJ+p4DIKENwrxpL8LJcekeBkJuyt9bXrqajBLNm2Twde1
bHZdl+IT7LtQiZJc6d9rt+RJa6rcn9cv16G+NNMbs+FSh/CFIpVuzE7IcRET
FHERlSwMN2JfiiIuYsoe3Hps5fV2Up0EeV1LkOMipuRJNmRGNh9rlNtySvHh
EjK9a703dlYgs5N9yH/DF0Mk9ZBJqrOQTbZXtHZ4/B87DirtTUjr/kGzlN9b
IcVf8vVPyDDMTiriIqYmBu3Vdw8p4iI+ZHt66jacqLVK9a4XMZ4/44uLyF5f
q2iFQ8Hshv2V7LULvQ9NUuwXitESklmPj8LavMzWy7N7fOvzQja5LLh2Nhtv
pXr6Le//Hmap77xcF4+Hm/BGmaKuUDSYnWJ50VCdzOxIiDKNcuyjmjHftU5P
XMSEZOw7VoS6DqtqnbrJgPYYI1tV/Nky5l96yozIzCrtTTG/k/sU+2u81y6m
fYHHVGqZXMAmt9uKN7ckyXt/Io5U9Hn742FWKmvBvgRWJrUI41Ea49Wm5WI2
1PzUHUsOYlbiqAtlF7LxmicuIls7g+pMBDMr+bNFaO/v42f1ZwH2RuQYhWXD
Slt1Qcxe5czuQOPEAjYDVLw70VfO6xs4ed6zx4Ve30DvuTeqYs+sHBfxehmu
XjfhKvMHis2WBZiV4iK+cqgILYy5wY4avCbHRfSs1yNynMFXjpWh5XEjiksb
pfeFwp/V6pOvrgl1tZWoe0o8WSQ/lK2/JyoaUXNdPi+lmbzMa9ksfoMxuiUD
ZeZWNH5kwmsb1/pYl/vzSq4JxRcy5WcISSju13/ujarYM6sSF3F/nX+ZIN/A
jrLAuIgJ23D1sV1Rz4Ijqf5xEfkezs5LWzmzddr9YmetI4pnU1tzZb7Zue/N
Lb7rCanZaPfzA9Rtdn50DlsTlH3dgYsP5b4G+Cob2FmyuMMe0VgKxZbZzu5e
nDl7bonKx8mTeXjn5GnNMqfy/PPH7I5F93Fk2IqRCVfQ9WcTdtXrfvljzqDr
42Pq14WMwezwqA115sZl14RzWvcxFYqtYu0bCAlFW4JZIaNJMCtkNGkzOyck
FJcSzAoZTYJZIaNJMCtkNAlmhYwmwayQ0aTFrJBQPEuN2Vn3vJBQXEowK2Q0
CWaFjCZNZufmhYTiUlrMzrA8IaF4lGBWyGgSzEZfxbXN+OHx9/G4d0g1/+Lt
ep4/9mxS974aUdrMuoUiFDH7L28ew1d+fBj5H1YzNp38+uNeC7596Cy/Tn/7
RsZ176sRpcWsi+UJRa5exiOtpcTnf/0iF788X8L/TTrDONa7f0aWJrOzbqEI
NTbhRFVTO//3mZJqL6u0tj7usfB8071m3ftpVAlmoy/PmkrrbO/wOOeUfFjK
I1Y9foOHa6HwJJiNjTzrK/FJ/yZ2lb5CfftT3ftoVGkxq/f/m2QlqI5xSXx6
fAPS0cvlGGW+gd59M7IEs7EV8Umc/jNbbyuZL6B3f1aCBLNCRpMmszNuIaG4
lBazev+GXUhIS9rM6v8bCiEhNQlmhYwmwayQ0aTFrJBQPEskkUQSSaTlS/8P
YtXiuw==
     "], {{0, 203}, {173, 0}}, {0, 255},
     ColorFunction->RGBColor],
    BoxForm`ImageTag["Byte", ColorSpace -> ColorProfileData[CompressedData["
1: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
tS6evSR+6VgLa8u+Vqg1uXW2LaRt7LLX5UftNu3dHbodLVcUrpzuFO4sv8p+
9eA1+mvZ11avp1yfvxF9Y6YruGui27f7+U3Pm497nHr6b9ne6r1tcfvmHeM7
13v1ezvv6txtv6d1r+2+xv3WPvW+lgfqD1r6NfpbH2o+vDygPdDxSO/RtUHD
wa4hs6Hbj60f33/i8OTRsNvwyNNtT8dGAkemR8NHvzxLeLb0POMF5sW+l8wv
i17xvap6Lf26eUxj7Oobszd94y7jzycCJj6+jX37azL7HfFd0ZTgVP20ynTn
e4v3Ax+2fpj8GP1xaSbnE8unY5+lPl/6y+ivvlnP2ckvtC+rc/u/cn89/U3t
W/e84/yr7xHflxb2/eD+UbeotXjnp8fPqaXEX7hfJcvSyx0rtisvViNWV6PJ
NPL6UQCFXHBQEABzpwEgegHAOgAAPeNG7rVZUNBayrGmS0TOMHrISasQ9EMk
yBOqg2E4Ap5AUVBz6DyMEmYMW4ELxZvRSdAzEmAGFJGFUZbJmpnGcpL0kk2A
3Z/jAhea24/nBp8gf67AFyEf4fuiOmKnJNgkM6SmZBxkm+UZFQIULyotqeiq
xqodV+/ReKO5qM2gw6Mro6elb2bgYOhtFGKcYJJjWmRWZ95hcc/ymdW09YIt
2o7Zns9Bcouyo46TibO1i4Ors5ubu4eHp6eXl7e391bvbd4+3ts9fd39nMn2
/hYBBoHqFJkgwWDWEFzIEvVz6Juwx+F3kFV5Jqoi+kBMMo0caxzHHfc5viuh
ODEqySZZNHk55emO5p17U/3SNNMZkbV1JbMgK2SXfjZr9vTuazmFe0L26uVy
5C7nofcbHGg6qHXowuHlQsEjskcVipSKlUtUS9XK1MvVj2lU6FRaHKecKDk5
Us1eY3zKpzbydEpdTv3hhvIzpxqbm9rP3mwePPfpgvDF6EsDrdJt4ZdL2ls7
Hl6Z6ly5xnFd+YZ7V0H3dI/VrfLbD+686Z29h70v3mf5ILA/9mH4gNsjzUGB
IfqhxccTTx4MX3/aMdI5ev1Z1/NrL5pfHn4V/tpkjHts7s3AePtE3dvyyUPv
dk8lT0e89/tg/1F1hjTz8dPtzzV/5cyGfnGYU/sq8k163uf7tR9Ki0d+vv7F
vey5UrO6uuYngAB4kVOiM5LnNIJ3kCQUBd2AeeEseA4VjfqB3osRxtzCxuEU
cF/x3XQV9KmEQAZPogujJ5M/czxLHqmOdYDtB4ckpw9XIfdDXiKfHf9+gX4h
orCTyGHRAXGChLlkglSt9COZb3LM8lIKaoraStrKqirSqgJqzOqQ+jeNSWS3
6tVu16nXLdPL099hEGq41cjB2MRE01TBTMycx4LZEmu5ZDVrPWkzYttnd83+
nEPVlkLHbKdYZ7KLo6uBm6w7lwfG44vnC69e74tbj2/L9Ynd7uNr7idHZiX/
8H8Z0BVYQ9kbFBZsH6JIZaF+DX0S1hpeEpEc6RmlEU2Kfh9znVYYGxinHo+J
H044lRifZJ7MljyRcmFHxk6HVL7UD2kd6QcyQjOds8wQz9DZrZGjtEd2r3iu
4D7uPNJ+wgH0geX87we/HJo7vFiIO8J1VKpIs9isxLF0a1lwOe1YasWeyoLj
x06cPnm5arB68ZR07bbTeXUt9c8aVhqFm8zPhjQfONd2/vNF9Uu7Wx61ES/r
t1M7Sq/c71y9pn49/EZN14ubLD1Gt6i38+409PbefX+f2Kf6wLs/62HjwNNB
7JDaY98n2cM1T3tG3j2jf674wvVl8qvK13fGFsaVJ2hvL07OTclNB7+v/vB6
hveT5+djf81+SfgqP09aoF+Ef378dWWFujn/9IATyAErJNspBvcgLGQJHYYm
YH34JIqI2o3GoQswEpgb2EAcCXcXv5fOgV6QfpHwmOEy8RRjKVMB80GWAlIZ
6ym2VvZejleci9wkHnleCz4y/06BYsGzQt3Cj0UmRT+JzYnPIqemEalu6VMy
u2S95RTlIflBhRrFRCUbZSHlBZV+1Vq1NHU3DTlNWHNEq0k7S8ddV0Z3WW9A
v9og0dDGSNBo3rjP5JRpmpm7uYIFxuKF5SWrfdZ+Nhq2BNsxuxb7XAcfJFJg
HEedGp0zXFxcxV2/u/W6l3mEeep6Ebyee5/ZmrLNyofD5+32877pfrZkTvKE
/9mAlEALCgvleVBtcEyILhVN7Q8tDvMLlw7/EnE5MiPKIpouui9mP80mFh97
Ky4r3iB+KaEtMTZJIel9ck2K7w6eHY935qdapcFp19LTMqwy+TOXssZ29Waf
312ek70nYq97rsE+iTxi3vz+Fwdu5jccPHIo83BiAa0w+ghyLCiKKY4piS6N
LKOW+x1zqbCptDvucyL5ZEXVrerPp9hrNU/b1TnXOzVsPbOj8VLTUrPlucLz
ry/KXkpo6WojXHZpL+l43il8Nfza1RusXaHdN3t4b8Xd7u+VuJt673GfzIOs
/okB90fDQwGP54f3jvCMNj03ejH8KmPMftzl7aF3C++PzNz64rowujb/G7/B
rRWsBgCnLABwPwKAizaC8wEQr0P2Dz0AHIkAuGoDmLsUQFejAbRN6s/+IQCM
kb1jF6gBt5DogUXihzUUBh2AmpFc7xvMCevCvvAuuA7uh7+ieFDGqBDUIST7
HkcT0BpoMvoAuh09hWHHmGPikaxrBMuANcYmYs9ip3EiOF9cJe4VXgQfgj+H
X6azoztB953ekb6JQCREEgYZtBhOEgnEBOIEoxNjF5MKUw0zN/MhFjqW3SSY
lMWKYc1lY2YrZRdnv8hhxjHCGcWF56rhNuV+y7OHV573CV86vxz/C4F8QTPB
ZaEO4RQRA1GM6EOxY+JhEvqSJMkPUj3SVTJZshQ5O3ltBQVFRSUDZTeVcNVd
SMhv0RjS/K7Nr2Opm6BXr//akNvIw7jU5LWZlHm8xW0rHutgm6O2xXYJ9kb2
qw5dW/Y7hjpRnbNdzrm+defxcPHM9+rbStzm5FO0fcSPiazqbxngFhhISQ86
EzxNVQ7NDBuKkEI871mMJq0o9ke8R0Jj4qdkzhSlHSY7vVLT09oz6DJDsh5k
a+yu2sO0Ny13Ks94f/aBlvyxQ4yHHQrOHVE7eqvYoeRBmVX57Qqnyh8nequu
1VyoLa5LaaA2bj1rfI79/JuLTS3pbdvbva/svNp2fbFbuyfi9r7e0ns1fc39
1wYeDU49wT/VHz3w/Nsr77GWCcIkearjA35G8jP4q+KLwFzJN7751oWIRfWf
v361rviuxw8xYAtiQBHoBOMQHlKAXKEUqArJ9L/A3LAJHAYfhW/AH5Gc3RTZ
TSpQfagltCx6Gzof3YWex8hgyJgSzCMsAWuJ3Y3twWFxNriDuBG8GD4Wf4uO
jy6Rbphem/4EgZ6QSJhi8GR4QDQldjJqMbYyaTC1Mxsy30Zy1FEShTTHmsXG
xlbHbsg+yhHPycbZyuXNDXM38njx0vF28sUicz0tcFqQKqQg9F24S+SgqK+Y
qji9+FuJbskaqVzpWBk/WSc5c3k9BU1FdSUNZR0VE1V7ta3qkRo5mrVaD7VX
dNX0ovTPGswZaRtnmwyZSZqnWzy30rWusFm2c7QvdLi35ZeTgnOgS6XrM2SO
t3me9PqwVX3bLp8hX3G/WHKn/0qgPiU1qCuEjuoeeipsIcIusjrqV4wX7XIc
d/zOhGdJSsk7Uq7u+Jmqk5aZ3p8pkpW8a2i3Uk7+ns+5Dvsa8pYOGOXvPNhy
aL7ArLDqKF0RrXik1KCs+hi+Iqpy+IT+ydpqtprcWuzp/HqBhkuN9k0TzUnn
CReOX1Jrudfmd3m+Y28n39WW6x5dcHdLD/U2353+uxn31fo+9FcPbB1kGbr+
JOApGCl/pv385cs9r1XGXo/vf6s7OTNV+d7hw/zM3k+Lf1nP7v5yfq7/6/S3
1e9cC6o/XBd3/mxY+rCstXJ0ff6lgStIB/VgCKxA0sjsZ0CN0AiMhdVgf/gw
3IWcIkRR7qhc1FXUV7Q02g9dih7CMGHsMHmY+1gi1hlbih3HyeNScQ/xEvhM
/Bs6S7oL9GL05QQOwlEGDoYyoiCxllGJsZPJjuk1ct5gYmkk2ZO+sJaymbHN
sVdzuHMSOLu4Urg1uL/ztPOm81nzcyJzfVXwqBANOYGoifKIoZG9Z0JiVHJQ
6iGSmT+RfSX3Uf6XIklJTtkGWdGFatfUP2kKaXloF+gM6rHr+xg0GC4ZO5o0
mNGZR1g8tbKxvm1rZzfiQHUETuUueq7j7vmehl7zW8/70Hw1/Ob8ywNlKU3B
MiG1oRJh9RGKke3RljEjsRHx2ISqJOPk1zuSUrFp+RlsmaW7RLKbcnT3PMgN
yIP2n8nfdgh7uLxQ4MjRIlxxYslUmXf5UIVn5bcT9VWUGtypfbXf6zzrW86w
NcY1DTdrn6u8gLkYeWm01bKtvV2po6FT7Gr5dcYbqV0fbnr09NxWuXPyLule
9v2FB+H9bwd8Ho0OeTx+Ouz69O6oyrOC5x9fGrzKf/3yjfx42sTApOi7pKkH
70U/JHy8MbPyWfkvm1mvL15zDl/1vonO4+bHv3csZPzQ/zG7mPmT9PPEEt1S
zNLoL5Nfpb+mlzWXdy8/XhFdoa40rcyuqq0mrV5Zm//YIFWV9e0DYjABAPNq
dfWrBAC4AgCWD6+uLlWtri5XI0nGCwBuhG/8r7O+1zADcOzmGrqdMpHx7/9X
/guSk9IK
       "], "RGB", "XYZ"], Interleaving -> True],
    Selectable->False],
   DefaultBaseStyle->"ImageGraphics",
   ImageSize->{116.0390625, Automatic},
   ImageSizeRaw->{173, 203},
   PlotRange->{{0, 173}, {0, 203}}]], "Input",ExpressionUUID->
  "71d46e4c-e09a-464a-b69a-6fd6bce4cda9"],
 "\[LineSeparator]"
}], "Text",ExpressionUUID->"dccd2e67-b677-451b-bcde-5caeffb70a8e"],

Cell["\<\
Press the keys Ctrl+Shift+K (on a Mac, Cmd+Shift+K) to get template \
suggestions on various ways to use the function. Pick the following and fill \
it out with the data from the three years specified. Evaluate to plot the \
data and compare the seasonal variations for the three years:\
\>", "Text",ExpressionUUID->"1f920b59-a479-4df5-95cb-03cfae45093d"],

Cell[TextData[Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{"{", 
   RowBox[{
    TagBox[
     FrameBox[
      SubscriptBox["data", "1"]],
     "Placeholder"], ",", 
    TagBox[
     FrameBox[
      SubscriptBox["data", "2"]],
     "Placeholder"], ",", 
    TagBox[
     FrameBox["\[Ellipsis]"],
     "Placeholder"]}], "}"}], 
  "]"}]], "Input",ExpressionUUID->"857424f5-d644-453a-bbbc-6e6097cc627e"]], \
"Text",ExpressionUUID->"329cf67e-8b49-4ff0-b64a-03786b8ce697"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{
             StyleBox["As suggested, ", FontWeight -> "Plain"], 
             StyleBox[
              ButtonBox["Rest", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL["https://reference.wolfram.com/language/ref/Rest.html"], 
                 None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/Rest.html"], 
              FontWeight -> "Plain"], 
             StyleBox[" and ", FontWeight -> "Plain"], 
             StyleBox[
              ButtonBox["ListLinePlot", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL[
                 "https://reference.wolfram.com/language/ref/ListLinePlot.\
html"], None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/ListLinePlot.html"]\
, FontWeight -> "Plain"], 
             StyleBox[".", FontWeight -> "Plain"]}], "Text"]]}}, {}]], 
     Spacings -> 2, Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], 
     BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1177.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"f8453940-73aa-4e20-a7ac-\
1085ec59c217"]], "Text",
 CellTags->"CYU",ExpressionUUID->"c1b4bc11-1f3d-4c32-98e6-12d91ea0a6ee"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[{
             RowBox[{
               RowBox[{"data50", " ", "=", " ", 
                 RowBox[{"Rest", "[", 
                   RowBox[{"data", "[", 
                    RowBox[{"[", "2", "]"}], "]"}], "]"}]}], ";"}], 
             "\[IndentingNewLine]", 
             RowBox[{
               RowBox[{"data55", " ", "=", " ", 
                 RowBox[{"Rest", "[", 
                   RowBox[{"data", "[", 
                    RowBox[{"[", "7", "]"}], "]"}], "]"}]}], ";"}], 
             "\[IndentingNewLine]", 
             RowBox[{
               RowBox[{"data60", " ", "=", " ", 
                 RowBox[{"Rest", "[", 
                   RowBox[{"data", "[", 
                    RowBox[{"[", 
                    RowBox[{"-", "1"}], "]"}], "]"}], "]"}]}], ";"}], 
             "\[IndentingNewLine]", 
             RowBox[{"ListLinePlot", "[", 
               RowBox[{"{", 
                 RowBox[{"data50", ",", "data55", ",", "data60"}], "}"}], 
               "]"}]}], "Input", CellLabel -> "In[258]:="]]}}, {}]], Spacings -> 
     2, Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1177.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"37ca997c-0fbf-4716-821f-\
926916711401"]], "Text",
 CellTags->"CYU",ExpressionUUID->"18b1405c-6023-4f7f-ade2-61a07c4e77a2"],

Cell["\<\
Can you use the function ListLinePlot in prefix form and postfix form?\
\>", "ItemNumbered",ExpressionUUID->"d081c887-ec4e-43c9-aff1-7e7eb6868cea"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{
             StyleBox[
              ButtonBox["Prefix", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL[
                 "https://reference.wolfram.com/language/ref/Prefix.html"], 
                 None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/Prefix.html"], 
              FontWeight -> "Plain"], " and ", 
             ButtonBox["Postfix", BaseStyle -> "Hyperlink", ButtonData -> {
                URL[
                "https://reference.wolfram.com/language/ref/Postfix.html"], 
                None}, ButtonNote -> 
              "https://reference.wolfram.com/language/ref/Postfix.html"], 
             "."}], "Text"]]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1177.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"8b12d767-f91c-4cd4-a8dc-\
2f7f2ed7985f"]], "Text",
 CellTags->"CYU",ExpressionUUID->"5aa3569d-d91a-439c-87dd-09797327dc10"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = False}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell["Standard form:", "Text"]]}, {
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"ListLinePlot", "[", 
              RowBox[{"data", "[", 
                RowBox[{"[", 
                  RowBox[{"All", ",", 
                    RowBox[{"2", ";;"}]}], "]"}], "]"}], "]"}]], "Input", 
           CellLabel -> "In[249]:="]]}, {
         RawBoxes[
          Cell["Prefix form:", "Text"]]}, {
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{"ListLinePlot", "@", 
              RowBox[{"data", "[", 
                RowBox[{"[", 
                  RowBox[{"All", ",", 
                    RowBox[{"2", ";;"}]}], "]"}], "]"}]}]], "Input", 
           CellLabel -> "In[252]:="]]}, {
         RawBoxes[
          Cell["Postfix form:", "Text"]]}, {
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{
              RowBox[{"data", "[", 
                RowBox[{"[", 
                  RowBox[{"All", ",", 
                    RowBox[{"2", ";;"}]}], "]"}], "]"}], "//", 
              "ListLinePlot"}]], "Input", CellLabel -> "In[253]:="]]}}, {}]], 
     Spacings -> 2, Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], 
     BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1177.5, {32.82568359375, 43.67431640625}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"2b76cd67-40f5-40d0-bf3e-\
ecb0a2075735"]], "Text",
 CellTags->"CYU",ExpressionUUID->"153eee61-bf9c-43cc-91e7-772ae2f85b1b"],

Cell["\<\
The visualization produced is a composite expression itself. What is its Head?\
\>", "ItemNumbered",ExpressionUUID->"c9d753be-ff5f-45e2-8bd8-a5da5a64d4a3"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "HintButton"], 
          TextCell[#, "HintButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "?", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Hint"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           TextData[{
             StyleBox["Try ", FontWeight -> "Plain"], 
             StyleBox[
              ButtonBox["Head", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL["https://reference.wolfram.com/language/ref/Head.html"], 
                 None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/Head.html"], 
              FontWeight -> "Plain"], 
             StyleBox[" and ", FontWeight -> "Plain"], 
             StyleBox[
              ButtonBox[
              "InputForm", BaseStyle -> "Hyperlink", ButtonData -> {
                 URL[
                 "https://reference.wolfram.com/language/ref/InputForm.html"],
                  None}, ButtonNote -> 
               "https://reference.wolfram.com/language/ref/InputForm.html"], 
              FontWeight -> "Plain"], "."}], "Text"]]}}, {}]], Spacings -> 2, 
     Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], BaseStyle -> 
     "Text"], StandardForm],
   ImageSizeCache->{1177.5, {51.46680450439453, 62.31543731689453}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"9db44449-03d2-4463-96cb-\
ee9c39923b03"]], "Text",
 CellTags->"CYU",ExpressionUUID->"790598e7-c531-42f8-9df4-aa0c8adad9b1"],

Cell[TextData[Cell[BoxData[
 DynamicModuleBox[{WolframUTools`Private`cyuOpen$$ = True}, 
  DynamicBox[ToBoxes[
    Grid[
     Join[{{
        Button[
         (Mouseover[
          TextCell[#, "SolutionButton"], 
          TextCell[#, "SolutionButton" <> "Active"]]& )[
          Framed[
           TextGrid[{{
              Item[
              "\[LightBulb]", Alignment -> {Right, Center}, 
               BaseStyle -> {FontSize -> 24}], "Solution"}}, ItemSize -> {{
               Scaled[
                Rational[1, 4]], 
               Scaled[
                Rational[3, 4]]}}, 
            BaseStyle -> {
             "HintButton", 
              GridBoxOptions -> {
               GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Center}}}}}], 
           RoundingRadius -> 5, FrameMargins -> {{15, 15}, {10, 10}}, 
           ImageSize -> {116, 51}, BaseStyle -> "Text"]], (
         WolframUTools`Private`cyuOpen$$ = 
         Not[WolframUTools`Private`cyuOpen$$])& , Appearance -> None, 
         Evaluator -> Automatic, Method -> "Preemptive"]}}, 
      If[WolframUTools`Private`cyuOpen$$, {{
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{
              GraphicsBox[{{}, {{}, {}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  PointSize[
                   NCache[
                    Rational[7, 360], 0.019444444444444445`]], 
                  AbsoluteThickness[1.6], 
                  
                  LineBox[{{1., 115.}, {2., 126.}, {3., 141.}, {4., 135.}, {
                   5., 125.}, {6., 149.}, {7., 170.}, {8., 170.}, {9., 
                   158.}, {10., 133.}, {11., 114.}, {12., 140.}}]}, {
                  RGBColor[0.880722, 0.611041, 0.142051], 
                  PointSize[
                   NCache[
                    Rational[7, 360], 0.019444444444444445`]], 
                  AbsoluteThickness[1.6], 
                  
                  LineBox[{{1., 242.}, {2., 233.}, {3., 267.}, {4., 269.}, {
                   5., 270.}, {6., 315.}, {7., 364.}, {8., 347.}, {9., 
                   312.}, {10., 274.}, {11., 237.}, {12., 278.}}]}, {
                  RGBColor[0.560181, 0.691569, 0.194885], 
                  PointSize[
                   NCache[
                    Rational[7, 360], 0.019444444444444445`]], 
                  AbsoluteThickness[1.6], 
                  
                  LineBox[{{1., 417.}, {2., 391.}, {3., 419.}, {4., 461.}, {
                   5., 472.}, {6., 535.}, {7., 622.}, {8., 606.}, {9., 
                   508.}, {10., 461.}, {11., 390.}, {12., 
                   432.}}]}}, {}, {}, {}, {}}, AspectRatio -> 
               NCache[GoldenRatio^(-1), 0.6180339887498948], 
               Axes -> {True, True}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0., 0}, DisplayFunction -> Identity, 
               Frame -> {{False, False}, {False, False}}, 
               FrameLabel -> {{None, None}, {None, None}}, 
               FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}},
                GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImagePadding -> All, 
               Method -> {
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{0., 12.}, {0, 622.}}, 
               PlotRangeClipping -> True, PlotRangePadding -> {{
                  Scaled[0.02], 
                  Scaled[0.02]}, {
                  Scaled[0.02], 
                  Scaled[0.05]}}, Ticks -> {Automatic, Automatic}], "//", 
              "Head"}]], "Input", CellLabel -> "In[263]:="]]}, {
         RawBoxes[
          Cell[
           BoxData[
            RowBox[{
              GraphicsBox[{{}, {{}, {}, {
                  RGBColor[0.368417, 0.506779, 0.709798], 
                  PointSize[
                   NCache[
                    Rational[7, 360], 0.019444444444444445`]], 
                  AbsoluteThickness[1.6], 
                  
                  LineBox[{{1., 115.}, {2., 126.}, {3., 141.}, {4., 135.}, {
                   5., 125.}, {6., 149.}, {7., 170.}, {8., 170.}, {9., 
                   158.}, {10., 133.}, {11., 114.}, {12., 140.}}]}, {
                  RGBColor[0.880722, 0.611041, 0.142051], 
                  PointSize[
                   NCache[
                    Rational[7, 360], 0.019444444444444445`]], 
                  AbsoluteThickness[1.6], 
                  
                  LineBox[{{1., 242.}, {2., 233.}, {3., 267.}, {4., 269.}, {
                   5., 270.}, {6., 315.}, {7., 364.}, {8., 347.}, {9., 
                   312.}, {10., 274.}, {11., 237.}, {12., 278.}}]}, {
                  RGBColor[0.560181, 0.691569, 0.194885], 
                  PointSize[
                   NCache[
                    Rational[7, 360], 0.019444444444444445`]], 
                  AbsoluteThickness[1.6], 
                  
                  LineBox[{{1., 417.}, {2., 391.}, {3., 419.}, {4., 461.}, {
                   5., 472.}, {6., 535.}, {7., 622.}, {8., 606.}, {9., 
                   508.}, {10., 461.}, {11., 390.}, {12., 
                   432.}}]}}, {}, {}, {}, {}}, AspectRatio -> 
               NCache[GoldenRatio^(-1), 0.6180339887498948], 
               Axes -> {True, True}, AxesLabel -> {None, None}, 
               AxesOrigin -> {0., 0}, DisplayFunction -> Identity, 
               Frame -> {{False, False}, {False, False}}, 
               FrameLabel -> {{None, None}, {None, None}}, 
               FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}},
                GridLines -> {None, None}, GridLinesStyle -> Directive[
                 GrayLevel[0.5, 0.4]], ImagePadding -> All, 
               Method -> {
                "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (Identity[#]& )[
                    Part[#, 1]], 
                    (Identity[#]& )[
                    Part[#, 2]]}& )}}, PlotRange -> {{0., 12.}, {0, 622.}}, 
               PlotRangeClipping -> True, PlotRangePadding -> {{
                  Scaled[0.02], 
                  Scaled[0.02]}, {
                  Scaled[0.02], 
                  Scaled[0.05]}}, Ticks -> {Automatic, Automatic}], "//", 
              "InputForm"}]], "Input", CellLabel -> "In[264]:="]]}}, {}]], 
     Spacings -> 2, Alignment -> {Left, Baseline}, ItemSize -> Scaled[1], 
     BaseStyle -> "Text"], StandardForm],
   ImageSizeCache->{1177.5, {127.98218607484165`, 138.83081888734165`}}],
  DynamicModuleValues:>{}]],ExpressionUUID->"5ff4b45f-0981-42d4-afd5-\
a4209ba56684"]], "Text",
 CellTags->"CYU",ExpressionUUID->"83e90a1a-874b-4861-b9e6-1608d3e805ad"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["Failure",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"name 'python' is not defined\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              BaseStyle -> {}, Evaluator -> Automatic, Method -> 
              "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            FrameBox[
             StyleBox["\"\[WarningSign]\"", 
              Directive["Message", 35], StripOnInput -> False], 
             ContentPadding -> False, FrameStyle -> None, 
             FrameMargins -> {{0, 0}, {0, 0}}, StripOnInput -> False], 
            GridBox[{{
               TagBox[
                GridBox[{{
                   TagBox["\"Message: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox[
                   "\"name 'python' is not defined\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               TagBox[
                GridBox[{{
                   TagBox["\"Tag: \"", "SummaryItemAnnotation"], 
                   "\[InvisibleSpace]", 
                   TagBox["\"PythonError\"", "SummaryItem"]}}, 
                 GridBoxItemSize -> {"Columns" -> {6.5, All, Automatic}}, 
                 GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                 GridBoxSpacings -> {"Columns" -> {{0}}}], "SummaryItem"]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"FailureCode\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox["\"NameError\"", HoldForm], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox[
                  TemplateBox[{"\"Traceback\"", "\": \""}, "RowDefault"], 
                  "SummaryItemAnnotation"], "\[InvisibleSpace]", 
                 TagBox[
                  TagBox[
                   TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"NameError\"", "\" \"", 
                    "\"name 'python' is not defined\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    
                    TemplateBox[{
                    "\"NameError\"", "\" \"", 
                    "\"name 'python' is not defined\""}, "RowDefault"]}, {
                    "", 
                    PaneBox[
                    StyleBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"safe_wl_execute\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  14.      \\\"wl\\\": \
b'Failure[\\\"PythonFailure\\\", <|\\\"MessageTemplate\\\" -> \\\"Unexpected \
error occurred.\\\"|>]',\""}, {"\"  15.  }\""}, {"\"  16.  \""}, {
                    "\"  17.  \""}, {
                    "\"  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):\""}, {"\"  19.  \""}, {
                    "\"  20.      try:\""}, {
                    ItemBox[
                    "\"  21.          return export(function(*args, **opts), \
**export_opts)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {
                    "\"  22.      except Exception as export_exception:\""}, {
                    "\"  23.          try:\""}, {
                    "\"  24.              try:\""}, {"\"  25.  \""}, {
                    "\"  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running \
another\""}, {
                    "\"  27.                  # try / except to return errors \
that are happening during class serialization\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"function\"", 
                    "\"<function handle_message at 0x1059a3240>\""}, {
                    "\"args\"", 
                    "\"(<zmq.Socket(zmq.PAIR) at 0x105984bb0>,)\""}, {
                    "\"opts\"", 
                    "\"{'consumer': <ExternalEvaluateConsumer globals=3 \
objects=0>}\""}, {"\"export_opts\"", 
                    "\"{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104d513a0>, 'target_format': \
'wxf'}\""}, {"\"exception_class\"", "\"None\""}, {"\"export_exception\"", 
                    "\"name 'python' is not defined\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x1059a3240>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105984bb0>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=3 \
objects=0>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104d513a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {"export_exception", 
                    "name 'python' is not defined"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"function", 
                    "<function handle_message at 0x1059a3240>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105984bb0>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=3 \
objects=0>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104d513a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", "name 'python' is not defined"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"handle_message\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"handle_message\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 412.          self.socket.send(zmq.Frame(bytes))\""}, \
{"\" 413.  \""}, {"\" 414.      def send_side_effect(self, expr):\""}, {
                    "\" 415.          \
self.write(export(self.keep_listening(expr), target_format=\\\"wxf\\\"))\""}, \
{"\" 416.  \""}, {"\" 417.  \""}, {
                    "\" 418.  def handle_message(socket, consumer):\""}, {
                    ItemBox[
                    "\" 419.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 420.  \""}, {
                    "\" 421.      sys.stdout.flush()\""}, {
                    "\" 422.      return result\""}, {"\" 423.  \""}, {
                    "\" 424.  \""}, {
                    "\" 425.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"socket\"", 
                    "\"<zmq.Socket(zmq.PAIR) at 0x105984bb0>\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=3 objects=0>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x105984bb0>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 412.          self.socket.send(zmq.Frame(bytes))", 
                    " 413.  ", " 414.      def send_side_effect(self, expr):",
                     " 415.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 416.  ", " 417.  ", 
                    " 418.  def handle_message(socket, consumer):", 
                    Item[
                    " 419.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 420.  ", 
                    " 421.      sys.stdout.flush()", 
                    " 422.      return result", " 423.  ", " 424.  ", 
                    " 425.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"socket", 
                    "<zmq.Socket(zmq.PAIR) at 0x105984bb0>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.py\
\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.py\
\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"binary_deserialize\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\"  33.  \""}, {
                    "\"  34.      \\\"\\\"\\\"\""}, {
                    "\"  35.      parser = WXFParser(wxf_input)\""}, {
                    "\"  36.      if consumer is None:\""}, {
                    "\"  37.          consumer = WXFConsumerNumpy()\""}, {
                    "\"  38.  \""}, {"\"  39.      try:\""}, {
                    ItemBox[
                    "\"  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  41.      except StopIteration:\""}, {
                    "\"  42.          raise WolframParserException(\""}, {
                    "\"  43.              \\\"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\\\"\""}, {
                    "\"  44.          )\""}, {
                    "\"  45.      if not \
parser.context.is_valid_final_state():\""}, {
                    "\"  46.          raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"wxf_input\"", 
                    "\"8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Castf\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04EvalS\.07python\\nA\.00S\\nExpression\""}, {
                    "\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=3 objects=0>\""}, {
                    "\"kwargs\"", "\"{}\""}, {"\"parser\"", 
                    "\"<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x10584d810>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Castf\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04EvalS\.07python\nA\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x10584d810>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"wxf_input", 
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Castf\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04EvalS\.07python\nA\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "kwargs", "{}"}, {"parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x10584d810>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False]], 
                    DynamicModuleValues -> Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=3 objects=0>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x105971900>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=3>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=3 objects=0>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=3 objects=0>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=3 objects=0>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{"\" 381.  \""}, {
                    "\" 382.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):\""}, {
                    "\" 383.          self.objects_registry = \
registry(objects_registry)\""}, {
                    "\" 384.          self.globals_registry = \
registry(globals_registry)\""}, {
                    "\" 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 386.  \""}, {
                    "\" 387.      def consume_function(self, *args, \
**kwargs):\""}, {
                    ItemBox[
                    "\" 388.          expr = super().consume_function(*args, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 389.  \""}, {
                    "\" 390.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 391.              assert len(expr.args) >= 1\""}, {
                    
                    "\" 392.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 393.  \""}, {
                    "\" 394.          return expr\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=3 objects=0>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x105996f70>, <generator object WXFParser.tokens at \
0x105971900>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x105996f70>, <generator object WXFParser.tokens at \
0x105971900>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "consume_function"}], 
                    
                    Column[{
                    
                    Column[{" 381.  ", 
                    " 382.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 383.          self.objects_registry = \
registry(objects_registry)", 
                    " 384.          self.globals_registry = \
registry(globals_registry)", 
                    " 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                    " 387.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 388.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 389.  ", 
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", 
                    " 394.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x105996f70>, <generator object WXFParser.tokens at \
0x105971900>)"}, {"kwargs", "{}"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`\""}, {"\"  95.          applied to the head and arguments.\""}, {
                    "\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {
                    ItemBox["\" 101.          args = tuple(\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\""}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=3 objects=0>\""}, {
                    "\"current_token\"", 
                    "\"WXFToken<b'f', data=None, len=3>\""}, {"\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x105971900>\""}, {"\"kwargs\"", "\"{}\""}, {"\"head\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[" 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}, {
                    "kwargs", "{}"}, {"head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"<genexpr>\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  95.          applied to the head and arguments.\""}, \
{"\"  96.  \""}, {
                    "\"  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override\""}, {
                    "\"  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.\""}, {"\"  99.          \\\"\\\"\\\"\""}, {
                    "\" 100.          head = self.next_expression(tokens, \
**kwargs)\""}, {"\" 101.          args = tuple(\""}, {
                    ItemBox[
                    "\" 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 103.          )\""}, {
                    "\" 104.          if head == self._LIST:\""}, {
                    "\" 105.              return args\""}, {
                    "\" 106.          else:\""}, {
                    "\" 107.              return self.build_function(head, \
args, **kwargs)\""}, {"\" 108.  \""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\".0\"", 
                    "\"<range_iterator object at 0x105991c20>\""}, {
                    "\"i\"", "\"1\""}, {"\"kwargs\"", "\"{}\""}, {
                    "\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=3 objects=0>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x105971900>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x105991c20>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {".0", 
                    "<range_iterator object at 0x105991c20>"}, {"i", "1"}, {
                    "kwargs", "{}"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py\"", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"next_expression\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\"  69.          constants.WXF_CONSTANTS.RuleDelayed: \\\
\"consume_rule_delayed\\\",\""}, {"\"  70.      }\""}, {"\"  71.  \""}, {
                    "\"  72.      def next_expression(self, tokens, \
**kwargs):\""}, {
                    "\"  73.          \\\"\\\"\\\"Deserialize the next \
expression starting at the next token yield by `tokens`.\\\"\\\"\\\"\""}, {
                    "\"  74.          token = next(tokens)\""}, {
                    "\"  75.          consumer = \
self._consumer_from_type(token.wxf_type)\""}, {
                    ItemBox[
                    "\"  76.          return consumer(token, tokens, \
**kwargs)\"", Background -> RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\"  77.  \""}, {
                    "\"  78.      def _consumer_from_type(self, \
wxf_type):\""}, {"\"  79.          try:\""}, {
                    "\"  80.              func = self._mapping[wxf_type]\""}, \
{"\"  81.          except KeyError:\""}, {
                    "\"  82.              raise WolframParserException(\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=3 objects=0>\""}, {
                    "\"tokens\"", 
                    "\"<generator object WXFParser.tokens at \
0x105971900>\""}, {"\"kwargs\"", "\"{}\""}, {"\"token\"", 
                    "\"WXFToken<b'f', data=None, len=3>\""}, {"\"consumer\"", 
                    "\"<bound method \
ExternalEvaluateConsumer.consume_function of <ExternalEvaluateConsumer \
globals=3 objects=0>>\""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {"Columns" -> {{
                    Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=3 objects=0>>"}}, Background -> {
                    Null, {LightGray}}, Alignment -> Left, Frame -> 
                    LightGray]}, False]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}, {
                    "kwargs", "{}"}, {"token", 
                    "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=3 objects=0>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"consume_function\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)\""}, {"\" 386.  \""}, {
                    "\" 387.      def consume_function(self, *args, \
**kwargs):\""}, {
                    "\" 388.          expr = super().consume_function(*args, \
**kwargs)\""}, {"\" 389.  \""}, {
                    "\" 390.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 391.              assert len(expr.args) >= 1\""}, {
                    ItemBox[
                    "\" 392.              return \
self.dispatch_wl_object(*expr.args)\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}, {"\" 393.  \""}, {
                    "\" 394.          return expr\""}, {"\" 395.  \""}, {
                    "\" 396.      def dispatch_wl_object(self, route, *args):\
\""}, {"\" 397.          return self.routes_registry[route](self, *args)\""}, \
{"\" 398.  \""}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=3 objects=0>\""}, {
                    "\"args\"", 
                    "\"(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x105996fc0>, <generator object WXFParser.tokens at \
0x105971900>)\""}, {"\"kwargs\"", "\"{}\""}, {"\"expr\"", 
                    "\"ExternalEvaluate`Private`ExternalEvaluateCommand['Eval'\
, 'python\\\\n', {}]\""}, {"\"__class__\"", 
                    "\"<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x105996fc0>, <generator object WXFParser.tokens at \
0x105971900>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Eval', \
'python\\n', {}]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "consume_function"}], 
                    
                    Column[{
                    
                    Column[{
                    " 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                    " 387.      def consume_function(self, *args, **kwargs):",
                     " 388.          expr = super().consume_function(*args, \
**kwargs)", " 389.  ", 
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    Item[
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 393.  ", 
                    " 394.          return expr", " 395.  ", 
                    " 396.      def dispatch_wl_object(self, route, *args):", 
                    " 397.          return self.routes_registry[route](self, \
*args)", " 398.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x105996fc0>, <generator object WXFParser.tokens at \
0x105971900>)"}, {"kwargs", "{}"}, {"expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Eval', \
'python\\n', {}]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"dispatch_wl_object\""}, 
                    "RowDefault"]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"dispatch_wl_object\""}, 
                    "RowDefault"]}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 390.          if check_wl_symbol(expr, \
self.hook_symbol):\""}, {
                    "\" 391.              assert len(expr.args) >= 1\""}, {
                    "\" 392.              return \
self.dispatch_wl_object(*expr.args)\""}, {"\" 393.  \""}, {
                    "\" 394.          return expr\""}, {"\" 395.  \""}, {
                    "\" 396.      def dispatch_wl_object(self, route, *args):\
\""}, {
                    ItemBox[
                    "\" 397.          return \
self.routes_registry[route](self, *args)\"", Background -> 
                    RGBColor[1, 1, 0.85], StripOnInput -> False]}, {
                    "\" 398.  \""}, {"\" 399.      def __repr__(self):\""}, {
                    "\" 400.          return \\\"<{} globals={} objects={}>\\\
\".format(\""}, {
                    "\" 401.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)\""}, {
                    "\" 402.          )\""}, {"\" 403.  \""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"self\"", 
                    "\"<ExternalEvaluateConsumer globals=3 objects=0>\""}, {
                    "\"route\"", "\"Eval\""}, {"\"args\"", 
                    "\"('python\\\\n', {})\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Null}}, "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "route", "Eval"}, {"args", "('python\\n', {})"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", " 394.          return expr",
                     " 395.  ", 
                    " 396.      def dispatch_wl_object(self, route, *args):", 
                    
                    Item[
                    " 397.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 398.  ", 
                    " 399.      def __repr__(self):", 
                    " 400.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 401.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 402.          )", 
                    " 403.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "route", "Eval"}, {"args", "('python\\n', {})"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"Eval\""}, "RowDefault"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], 
                    TemplateBox[{
                    ButtonBox[
                    StyleBox[
                    "\"/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py\"", 
                    
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier", 
                    StripOnInput -> False], ButtonFunction :> If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless", Evaluator -> Automatic, Method -> 
                    "Preemptive"], "\" in \"", "\"Eval\""}, "RowDefault"]}, {
                    "", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    
                    GridBox[{{
                    "\" 222.      if isinstance(last_expr, ast.Expr):\""}, {
                    "\" 223.          result = expressions.pop(-1)\""}, {
                    "\" 224.  \""}, {"\" 225.      if expressions:\""}, {
                    "\" 226.          exec(compile(Module(expressions), \
\\\"\\\", \\\"exec\\\"), env)\""}, {"\" 227.  \""}, {
                    "\" 228.      if result:\""}, {
                    ItemBox[
                    "\" 229.          return \
eval(compile(ast.Expression(result.value), \\\"\\\", \\\"eval\\\"), env)\"", 
                    Background -> RGBColor[1, 1, 0.85], StripOnInput -> 
                    False]}, {"\" 230.  \""}, {
                    "\" 231.      elif isinstance(last_expr, \
(ast.FunctionDef, ast.ClassDef)):\""}, {
                    "\" 232.          return env[last_expr.name]\""}, {
                    "\" 233.  \""}, {"\" 234.  \""}, {
                    "\" 235.  @routes.register_function\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = False}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}], True -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"Local variables\""}, {"", 
                    PaneBox[
                    TagBox[
                    
                    GridBox[{{"\"Key\"", "\"Value\""}, {"\"consumer\"", 
                    "\"<ExternalEvaluateConsumer globals=3 objects=0>\""}, {
                    "\"code\"", "\"python\\n\""}, {"\"constants\"", 
                    "\"{}\""}, {"\"env\"", "\"<registry len=3>\""}, {
                    "\"result\"", "\"<ast.Expr object at 0x105991cf0>\""}, {
                    "\"expressions\"", "\"[]\""}, {"\"last_expr\"", 
                    "\"<ast.Expr object at 0x105991cf0>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Null}}, 
                    "Rows" -> {
                    GrayLevel[0.85]}}, 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {"Columns" -> {{
                    Automatic}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    ImageMargins -> 0]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, AutoDelete -> False, 
                    GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "code", "python\n"}, {"constants", "{}"}, {
                    "env", "<registry len=3>"}, {"result", 
                    "<ast.Expr object at 0x105991cf0>"}, {
                    "expressions", "[]"}, {"last_expr", 
                    "<ast.Expr object at 0x105991cf0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}, False]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "Eval"}], 
                    Column[{
                    
                    Column[{" 222.      if isinstance(last_expr, ast.Expr):", 
                    " 223.          result = expressions.pop(-1)", " 224.  ", 
                    " 225.      if expressions:", 
                    " 226.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", " 227.  ", " 228.      if result:", 
                    Item[
                    " 229.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", Background -> 
                    LightYellow], " 230.  ", 
                    " 231.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", " 232.          return env[last_expr.name]", " 233.  ", 
                    " 234.  ", " 235.  @routes.register_function"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {"consumer", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "code", "python\n"}, {"constants", "{}"}, {
                    "env", "<registry len=3>"}, {
                    "result", "<ast.Expr object at 0x105991cf0>"}, {
                    "expressions", "[]"}, {"last_expr", 
                    "<ast.Expr object at 0x105991cf0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}, {
                    TagBox[
                    DynamicModuleBox[{Typeset`var$$ = True}, 
                    InterpretationBox[
                    StyleBox[
                    PaneSelectorBox[{False -> GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"<module>\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}], True -> 
                    GridBox[{{
                    OpenerBox[
                    Dynamic[Typeset`var$$], Appearance -> Automatic, Enabled -> 
                    Automatic, AutoAction -> False, ContinuousAction -> 
                    False], "\"<module>\""}, {"", 
                    PaneBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    "\"   1.  python\"", Background -> RGBColor[1, 1, 0.85], 
                    StripOnInput -> False]}}, GridBoxAlignment -> {
                    "Columns" -> {{Left}}}, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}}, DefaultBaseStyle -> "Column", 
                    GridBoxFrame -> {"ColumnsIndexed" -> {{{1, -1}, {1, -1}} -> 
                    GrayLevel[0.85]}}, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"]}, {"\"No local variables\""}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}], "Column"], ImageMargins -> 
                    0]}}, GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    AutoDelete -> False, GridBoxBackground -> {
                    "Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {"Columns" -> {{Automatic}}, 
                    "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{0.2}}, 
                    "Rows" -> {{0.5}}}, BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{"<module>", 
                    Column[{
                    Column[{
                    Item["   1.  python", Background -> LightYellow]}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    "No local variables"}]}, True]], DynamicModuleValues -> 
                    Automatic], Setting[#, {0}]& ]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], FontFamily -> "Courier", StripOnInput -> 
                    False], ImageMargins -> 0]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxBackground -> {"Columns" -> {{Automatic}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{0.5}}}, 
                    BaselinePosition -> {1, 1}]}, 
                    Dynamic[
                    TrueQ[Typeset`var$$]], Alignment -> Automatic, ImageSize -> 
                    Automatic, ImageMargins -> 0, BaseStyle -> {}, 
                    DefaultBaseStyle -> "OpenerView", BaselinePosition -> 
                    Baseline], Deployed -> False, StripOnInput -> False], 
                    OpenerView[{
                    Row[{"NameError", " ", "name 'python' is not defined"}], 
                    Style[
                    Column[{
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/language/decorators.py"]], 
                    Appearance -> "Frameless"], " in ", "safe_wl_execute"}], 
                    Column[{
                    
                    Column[{
                    "  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                    "  16.  ", "  17.  ", 
                    "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                    Item[
                    "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                    "  22.      except Exception as export_exception:", 
                    "  23.          try:", "  24.              try:", 
                    "  25.  ", 
                    "  26.                  # The user can provide an \
exception class, and it can be broken, in which case we are running another", 
                    "  27.                  # try / except to return errors \
that are happening during class serialization"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "function", "<function handle_message at 0x1059a3240>"}, {
                    "args", "(<zmq.Socket(zmq.PAIR) at 0x105984bb0>,)"}, {
                    "opts", 
                    "{'consumer': <ExternalEvaluateConsumer globals=3 \
objects=0>}"}, {"export_opts", 
                    "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104d513a0>, 'target_format': 'wxf'}"}, {
                    "exception_class", "None"}, {
                    "export_exception", "name 'python' is not defined"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "handle_message"}], 
                    Column[{
                    
                    Column[{
                    " 412.          self.socket.send(zmq.Frame(bytes))", 
                    " 413.  ", " 414.      def send_side_effect(self, expr):",
                     " 415.          \
self.write(export(self.keep_listening(expr), target_format=\"wxf\"))", 
                    " 416.  ", " 417.  ", 
                    " 418.  def handle_message(socket, consumer):", 
                    Item[
                    " 419.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                    Background -> LightYellow], " 420.  ", 
                    " 421.      sys.stdout.flush()", 
                    " 422.      return result", " 423.  ", " 424.  ", 
                    " 425.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "socket", "<zmq.Socket(zmq.PAIR) at 0x105984bb0>"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/__init__.\
py"]], Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
                    Column[{
                    
                    Column[{"  33.  ", "  34.      \"\"\"", 
                    "  35.      parser = WXFParser(wxf_input)", 
                    "  36.      if consumer is None:", 
                    "  37.          consumer = WXFConsumerNumpy()", "  38.  ",
                     "  39.      try:", 
                    Item[
                    "  40.          o = \
consumer.next_expression(parser.tokens(), **kwargs)", Background -> 
                    LightYellow], "  41.      except StopIteration:", 
                    "  42.          raise WolframParserException(", 
                    "  43.              \"Input data does not represent a \
valid expression in WXF format. Expecting more input data.\"", 
                    "  44.          )", 
                    "  45.      if not \
parser.context.is_valid_final_state():", 
                    "  46.          raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "wxf_input", 
                    "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Castf\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04EvalS\.07python\nA\.00S\nExpression"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "kwargs", "{}"}, {
                    "parser", 
                    "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x10584d810>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                    Left, Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=3 objects=0>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "consume_function"}], 
                    
                    Column[{
                    
                    Column[{" 381.  ", 
                    " 382.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                    " 383.          self.objects_registry = \
registry(objects_registry)", 
                    " 384.          self.globals_registry = \
registry(globals_registry)", 
                    " 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                    " 387.      def consume_function(self, *args, **kwargs):", 
                    Item[
                    " 388.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 389.  ", 
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", 
                    " 394.          return expr"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x105996f70>, <generator object WXFParser.tokens at \
0x105971900>)"}, {"kwargs", "{}"}, {
                    "__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "consume_function"}], 
                    Column[{
                    
                    Column[{
                    "  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                    Item[
                    " 101.          args = tuple(", Background -> 
                    LightYellow], 
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)"}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}, {
                    "kwargs", "{}"}, {
                    "head", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "<genexpr>"}], 
                    Column[{
                    
                    Column[{
                    "  95.          applied to the head and arguments.", 
                    "  96.  ", 
                    "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                    "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                    " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                    Item[
                    " 102.              self.next_expression(tokens, \
**kwargs) for i in range(current_token.length)", Background -> LightYellow], 
                    " 103.          )", 
                    " 104.          if head == self._LIST:", 
                    " 105.              return args", " 106.          else:", 
                    " 107.              return self.build_function(head, \
args, **kwargs)", " 108.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    ".0", "<range_iterator object at 0x105991c20>"}, {
                    "i", "1"}, {"kwargs", "{}"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.\
py"]], Appearance -> "Frameless"], " in ", "next_expression"}], 
                    Column[{
                    
                    Column[{
                    "  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                    "  72.      def next_expression(self, tokens, **kwargs):",
                     "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                    "  74.          token = next(tokens)", 
                    "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                    Item[
                    "  76.          return consumer(token, tokens, **kwargs)",
                     Background -> LightYellow], "  77.  ", 
                    "  78.      def _consumer_from_type(self, wxf_type):", 
                    "  79.          try:", 
                    "  80.              func = self._mapping[wxf_type]", 
                    "  81.          except KeyError:", 
                    "  82.              raise WolframParserException("}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "tokens", 
                    "<generator object WXFParser.tokens at 0x105971900>"}, {
                    "kwargs", "{}"}, {
                    "token", "WXFToken<b'f', data=None, len=3>"}, {
                    "consumer", 
                    "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=3 objects=0>>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "consume_function"}], 
                    
                    Column[{
                    
                    Column[{
                    " 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                    " 387.      def consume_function(self, *args, **kwargs):",
                     " 388.          expr = super().consume_function(*args, \
**kwargs)", " 389.  ", 
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    Item[
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 393.  ", 
                    " 394.          return expr", " 395.  ", 
                    " 396.      def dispatch_wl_object(self, route, *args):", 
                    " 397.          return self.routes_registry[route](self, \
*args)", " 398.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "args", 
                    "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x105996fc0>, <generator object WXFParser.tokens at \
0x105971900>)"}, {"kwargs", "{}"}, {
                    "expr", 
                    "ExternalEvaluate`Private`ExternalEvaluateCommand['Eval', \
'python\\n', {}]"}, {"__class__", 
                    "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", 
                    "dispatch_wl_object"}], 
                    Column[{
                    
                    Column[{
                    " 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                    " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", " 394.          return expr",
                     " 395.  ", 
                    " 396.      def dispatch_wl_object(self, route, *args):", 
                    
                    Item[
                    " 397.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 398.  ", 
                    " 399.      def __repr__(self):", 
                    " 400.          return \"<{} globals={} \
objects={}>\".format(", 
                    " 401.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 402.          )", 
                    " 403.  "}, Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "self", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "route", "Eval"}, {"args", "('python\\n', {})"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, False], 
                    OpenerView[{
                    Row[{
                    Button[
                    Style[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                    RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
                    
                    If[
                    FileExistsQ[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                    SystemOpen[
                    "/Applications/Wolfram.app/Contents/SystemFiles/\
Components/WolframClientForPython/wolframclient/utils/externalevaluate.py"]], 
                    Appearance -> "Frameless"], " in ", "Eval"}], 
                    Column[{
                    
                    Column[{" 222.      if isinstance(last_expr, ast.Expr):", 
                    " 223.          result = expressions.pop(-1)", " 224.  ", 
                    " 225.      if expressions:", 
                    " 226.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", " 227.  ", " 228.      if result:", 
                    Item[
                    " 229.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", Background -> 
                    LightYellow], " 230.  ", 
                    " 231.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", " 232.          return env[last_expr.name]", " 233.  ", 
                    " 234.  ", " 235.  @routes.register_function"}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    OpenerView[{"Local variables", 
                    
                    Grid[{{"Key", "Value"}, {
                    "consumer", 
                    "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                    "code", "python\n"}, {"constants", "{}"}, {
                    "env", "<registry len=3>"}, {
                    "result", "<ast.Expr object at 0x105991cf0>"}, {
                    "expressions", "[]"}, {
                    "last_expr", "<ast.Expr object at 0x105991cf0>"}}, 
                    Background -> {Null, {LightGray}}, Alignment -> Left, 
                    Frame -> LightGray]}]}]}, True], 
                    OpenerView[{"<module>", 
                    Column[{
                    Column[{
                    Item["   1.  python", Background -> LightYellow]}, 
                    Background -> {{
                    GrayLevel[0.95], 
                    GrayLevel[1]}}, Frame -> LightGray], 
                    "No local variables"}]}, True]}], FontFamily -> 
                    "Courier"]}, True]], DynamicModuleValues -> Automatic], 
                    Setting[#, {0}]& ], HoldForm], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
          AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  Failure[
  "PythonError", <|
   "MessageTemplate" :> "name 'python' is not defined", 
    "MessageParameters" :> <||>, "FailureCode" :> "NameError", "Traceback" :> 
    OpenerView[{
       Row[{"NameError", " ", "name 'python' is not defined"}], 
       Style[
        Column[{
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/language/decorators.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/language/decorators.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/language/decorators.py"]], Appearance -> 
               "Frameless"], " in ", "safe_wl_execute"}], 
            Column[{
              
              Column[{"  14.      \"wl\": b'Failure[\"PythonFailure\", \
<|\"MessageTemplate\" -> \"Unexpected error occurred.\"|>]',", "  15.  }", 
                "  16.  ", "  17.  ", 
                "  18.  def safe_wl_execute(function, args=(), opts={}, \
export_opts={}, exception_class=None):", "  19.  ", "  20.      try:", 
                Item[
                "  21.          return export(function(*args, **opts), \
**export_opts)", Background -> LightYellow], 
                "  22.      except Exception as export_exception:", 
                "  23.          try:", "  24.              try:", "  25.  ", 
                "  26.                  # The user can provide an exception \
class, and it can be broken, in which case we are running another", 
                "  27.                  # try / except to return errors that \
are happening during class serialization"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "function", "<function handle_message at 0x1059a3240>"}, {
                  "args", "(<zmq.Socket(zmq.PAIR) at 0x105984bb0>,)"}, {
                  "opts", 
                   "{'consumer': <ExternalEvaluateConsumer globals=3 \
objects=0>}"}, {"export_opts", 
                   "{'object_processor': <function \
start_zmq_loop.<locals>.<lambda> at 0x104d513a0>, 'target_format': 'wxf'}"}, {
                  "exception_class", "None"}, {
                  "export_exception", "name 'python' is not defined"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "handle_message"}], 
            Column[{
              
              Column[{" 412.          self.socket.send(zmq.Frame(bytes))", 
                " 413.  ", " 414.      def send_side_effect(self, expr):", 
                " 415.          self.write(export(self.keep_listening(expr), \
target_format=\"wxf\"))", " 416.  ", " 417.  ", 
                " 418.  def handle_message(socket, consumer):", 
                Item[
                " 419.      result = \
binary_deserialize(socket.recv(copy=False).buffer, consumer=consumer)", 
                 Background -> LightYellow], " 420.  ", 
                " 421.      sys.stdout.flush()", " 422.      return result", 
                " 423.  ", " 424.  ", 
                " 425.  def start_zmq_instance(port=None, \
write_to_stdout=True, **opts):"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "socket", "<zmq.Socket(zmq.PAIR) at 0x105984bb0>"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=3 objects=0>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/__init__.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/__init__.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/__init__.py"]], 
               Appearance -> "Frameless"], " in ", "binary_deserialize"}], 
            Column[{
              
              Column[{"  33.  ", "  34.      \"\"\"", 
                "  35.      parser = WXFParser(wxf_input)", 
                "  36.      if consumer is None:", 
                "  37.          consumer = WXFConsumerNumpy()", "  38.  ", 
                "  39.      try:", 
                Item[
                "  40.          o = consumer.next_expression(parser.tokens(), \
**kwargs)", Background -> LightYellow], "  41.      except StopIteration:", 
                "  42.          raise WolframParserException(", 
                "  43.              \"Input data does not represent a valid \
expression in WXF format. Expecting more input data.\"", "  44.          )", 
                "  45.      if not parser.context.is_valid_final_state():", 
                "  46.          raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "wxf_input", 
                   "8:f\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04Castf\.03s0ExternalEvaluate`Private`\
ExternalEvaluateCommandS\.04EvalS\.07python\nA\.00S\nExpression"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                  "kwargs", "{}"}, {
                  "parser", 
                   "<wolframclient.deserializers.wxf.wxfparser.WXFParser \
object at 0x10584d810>"}}, Background -> {Null, {LightGray}}, Alignment -> 
                 Left, Frame -> LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"]], 
               Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x105971900>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=3>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=3 objects=0>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{" 381.  ", 
                " 382.      def __init__(self, routes_registry={}, \
objects_registry={}, globals_registry={}):", 
                " 383.          self.objects_registry = \
registry(objects_registry)", 
                " 384.          self.globals_registry = \
registry(globals_registry)", 
                " 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                " 387.      def consume_function(self, *args, **kwargs):", 
                Item[
                " 388.          expr = super().consume_function(*args, \
**kwargs)", Background -> LightYellow], " 389.  ", 
                " 390.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 391.              assert len(expr.args) >= 1", 
                " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", 
                " 394.          return expr"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x105996f70>, <generator object WXFParser.tokens at \
0x105971900>)"}, {"kwargs", "{}"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"]], 
               Appearance -> "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{"  94.          Return a :class:`list` if the head is \
symbol `List`, otherwise returns the result of \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`", "  95.          applied to the head and arguments.", "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", 
                Item[
                " 101.          args = tuple(", Background -> LightYellow], 
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", " 103.          )", 
                " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)"}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                  "current_token", "WXFToken<b'f', data=None, len=3>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x105971900>"}, {
                  "kwargs", "{}"}, {
                  "head", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"]], 
               Appearance -> "Frameless"], " in ", "<genexpr>"}], 
            Column[{
              
              Column[{"  95.          applied to the head and arguments.", 
                "  96.  ", 
                "  97.          Usually custom parsing rules target \
Functions, but not List. To do so, it is recommended to override", 
                "  98.          \
:func:`~wolframclient.deserializers.wxf.wxfconsumer.WXFConsumer.build_\
function`.", "  99.          \"\"\"", 
                " 100.          head = self.next_expression(tokens, \
**kwargs)", " 101.          args = tuple(", 
                Item[
                " 102.              self.next_expression(tokens, **kwargs) \
for i in range(current_token.length)", Background -> LightYellow], 
                " 103.          )", " 104.          if head == self._LIST:", 
                " 105.              return args", " 106.          else:", 
                " 107.              return self.build_function(head, args, \
**kwargs)", " 108.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  ".0", "<range_iterator object at 0x105991c20>"}, {
                  "i", "1"}, {"kwargs", "{}"}, {
                  "self", "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x105971900>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/deserializers/wxf/wxfconsumer.py"]], 
               Appearance -> "Frameless"], " in ", "next_expression"}], 
            Column[{
              
              Column[{"  69.          constants.WXF_CONSTANTS.RuleDelayed: \
\"consume_rule_delayed\",", "  70.      }", "  71.  ", 
                "  72.      def next_expression(self, tokens, **kwargs):", 
                "  73.          \"\"\"Deserialize the next expression \
starting at the next token yield by `tokens`.\"\"\"", 
                "  74.          token = next(tokens)", 
                "  75.          consumer = \
self._consumer_from_type(token.wxf_type)", 
                Item[
                "  76.          return consumer(token, tokens, **kwargs)", 
                 Background -> LightYellow], "  77.  ", 
                "  78.      def _consumer_from_type(self, wxf_type):", 
                "  79.          try:", 
                "  80.              func = self._mapping[wxf_type]", 
                "  81.          except KeyError:", 
                "  82.              raise WolframParserException("}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                  "tokens", 
                   "<generator object WXFParser.tokens at 0x105971900>"}, {
                  "kwargs", "{}"}, {
                  "token", "WXFToken<b'f', data=None, len=3>"}, {
                  "consumer", 
                   "<bound method ExternalEvaluateConsumer.consume_function \
of <ExternalEvaluateConsumer globals=3 objects=0>>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "consume_function"}], 
            Column[{
              
              Column[{" 385.          self.routes_registry = \
registry(self.builtin_routes, **routes_registry)", " 386.  ", 
                " 387.      def consume_function(self, *args, **kwargs):", 
                " 388.          expr = super().consume_function(*args, \
**kwargs)", " 389.  ", 
                " 390.          if check_wl_symbol(expr, self.hook_symbol):", 
                " 391.              assert len(expr.args) >= 1", 
                Item[
                " 392.              return \
self.dispatch_wl_object(*expr.args)", Background -> LightYellow], " 393.  ", 
                " 394.          return expr", " 395.  ", 
                " 396.      def dispatch_wl_object(self, route, *args):", 
                " 397.          return self.routes_registry[route](self, \
*args)", " 398.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                  "args", 
                   "(<wolframclient.deserializers.wxf.wxfparser.WXFToken \
object at 0x105996fc0>, <generator object WXFParser.tokens at \
0x105971900>)"}, {"kwargs", "{}"}, {
                  "expr", 
                   "ExternalEvaluate`Private`ExternalEvaluateCommand['Eval', \
'python\\n', {}]"}, {
                  "__class__", 
                   "<class \
'wolframclient.utils.externalevaluate.ExternalEvaluateConsumer'>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "dispatch_wl_object"}], 
            Column[{
              
              Column[{" 390.          if check_wl_symbol(expr, \
self.hook_symbol):", " 391.              assert len(expr.args) >= 1", 
                " 392.              return \
self.dispatch_wl_object(*expr.args)", " 393.  ", " 394.          return expr",
                 " 395.  ", 
                " 396.      def dispatch_wl_object(self, route, *args):", 
                Item[
                " 397.          return self.routes_registry[route](self, \
*args)", Background -> LightYellow], " 398.  ", 
                " 399.      def __repr__(self):", 
                " 400.          return \"<{} globals={} \
objects={}>\".format(", 
                " 401.              self.__class__.__name__, \
len(self.globals_registry), len(self.objects_registry)", " 402.          )", 
                " 403.  "}, Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "self", "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                  "route", "Eval"}, {"args", "('python\\n', {})"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, False], 
          OpenerView[{
            Row[{
              Button[
               Style[
               "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py", 
                RGBColor[0.25, 0.48, 1], Small, FontFamily -> "Courier"], 
               If[
                FileExistsQ[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"], 
                SystemOpen[
                "/Applications/Wolfram.app/Contents/SystemFiles/Components/\
WolframClientForPython/wolframclient/utils/externalevaluate.py"]], Appearance -> 
               "Frameless"], " in ", "Eval"}], 
            Column[{
              
              Column[{" 222.      if isinstance(last_expr, ast.Expr):", 
                " 223.          result = expressions.pop(-1)", " 224.  ", 
                " 225.      if expressions:", 
                " 226.          exec(compile(Module(expressions), \"\", \
\"exec\"), env)", " 227.  ", " 228.      if result:", 
                Item[
                " 229.          return \
eval(compile(ast.Expression(result.value), \"\", \"eval\"), env)", Background -> 
                 LightYellow], " 230.  ", 
                " 231.      elif isinstance(last_expr, (ast.FunctionDef, \
ast.ClassDef)):", " 232.          return env[last_expr.name]", " 233.  ", 
                " 234.  ", " 235.  @routes.register_function"}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              OpenerView[{"Local variables", 
                
                Grid[{{"Key", "Value"}, {
                  "consumer", 
                   "<ExternalEvaluateConsumer globals=3 objects=0>"}, {
                  "code", "python\n"}, {"constants", "{}"}, {
                  "env", "<registry len=3>"}, {
                  "result", "<ast.Expr object at 0x105991cf0>"}, {
                  "expressions", "[]"}, {
                  "last_expr", "<ast.Expr object at 0x105991cf0>"}}, 
                 Background -> {Null, {LightGray}}, Alignment -> Left, Frame -> 
                 LightGray]}]}]}, True], 
          OpenerView[{"<module>", 
            Column[{
              Column[{
                Item["   1.  python", Background -> LightYellow]}, 
               Background -> {{
                  GrayLevel[0.95], 
                  GrayLevel[1]}}, Frame -> LightGray], 
              "No local variables"}]}, True]}], FontFamily -> "Courier"]}, 
      True]|>],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->
  "Out[410]=",ExpressionUUID->"e5bee79d-d48b-4915-b8b8-b049a9a16bdc"]
}, Open  ]]
}, Open  ]]
},
Editable->True,
Saveable->True,
ScreenStyleEnvironment->"Working",
WindowToolbars->{},
PageWidth->Automatic,
WindowSize->{1313, 941},
WindowMargins->{{Automatic, 313}, {11, Automatic}},
WindowTitle->"Syntax and Expressions",
DockedCells->Cell[
  BoxData[
   TagBox[
    GridBox[{{
       Cell[
        BoxData[
         TagBox[
          GridBox[{{
             ButtonBox[
              TagBox[
               TooltipBox[
                GraphicsBox[{
                  Thickness[0.022727272727272728`], {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{0., 40.099998474121094`}, {44., 
                    40.099998474121094`}, {44., 31.999998092651367`}, {0., 
                    31.999998092651367`}, {0., 40.099998474121094`}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{0., 24.099998474121094`}, {44., 
                    24.099998474121094`}, {44., 15.999998092651367`}, {0., 
                    15.999998092651367`}, {0., 24.099998474121094`}}}]}, {
                   FaceForm[{
                    RGBColor[1., 1., 1.], 
                    Opacity[1.]}], 
                   
                   FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, {{{0., 8.099998474121094}, {44., 
                    8.099998474121094}, {44., 0.}, {0., 0.}, {0., 
                    8.099998474121094}}}]}}, {
                 ImageSize -> {Automatic, 27}, 
                  ImagePadding -> {{0, 0}, {3, 3}}, AspectRatio -> Automatic, 
                  ImageSize -> {44., 41.}, 
                  PlotRange -> {{0., 44.}, {0., 40.099998474121094`}}}], 
                "\"Table of Contents\"", TooltipStyle -> "TextStyling"], 
               Annotation[#, WolframUTools`Private`tooltip$219036, 
                "Tooltip"]& ], BaseStyle -> "Hyperlink", Evaluator -> 
              Automatic, Method -> "Preemptive", ButtonNote -> 
              "DEV210-WolframLanguageProgrammingFundamentals-TableOfContents.\
nb", ButtonFunction :> If[FileNameTake[
                  Directory[], {2, 2}] == "wolframcloud", 
                SystemOpen[
                "https://www.wolframcloud.com/obj/online-courses/Published/\
DEV210/DEV210-WolframLanguageProgrammingFundamentals-TableOfContents.nb"], 
                SystemOpen[
                 FileNameJoin[{
                   NotebookDirectory[], 
                   "DEV210-WolframLanguageProgrammingFundamentals-\
TableOfContents.nb"}]]]], 
             Cell[
              BoxData[
               ButtonBox[
               "Wolfram Language Programming Fundamentals", Tooltip -> 
                "Wolfram Language Programming Fundamentals: Wolfram U Course",
                 BaseStyle -> {
                 "Hyperlink", "DockedTitle", FontColor -> GrayLevel[1]}, 
                ButtonData -> {
                  URL[
                  "https://www.wolfram.com/wolfram-u/courses/programming-\
applications/programming-fundamentals-dev210"], None}, ButtonNote -> 
                "https://www.wolfram.com/wolfram-u/courses/programming-\
applications/programming-fundamentals-dev210"]], "DockedTitle"]}}, BaseStyle -> 
           "DockedTitle", 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           GridBoxSpacings -> {"Columns" -> {{0.75}}, "Rows" -> {{0}}}], 
          "TextGrid"]], "DockedTitle", CellMargins -> {{0, 0}, {0, 0}}, 
        StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
        CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
        CellFrameMargins -> {{20, 20}, {15, 15}}, LineSpacing -> {1, 4}, 
        LanguageCategory -> "NaturalLanguage", CounterIncrements -> "Title", 
        CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
          "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {
          "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
          "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}}, MenuSortingValue -> 
        1100, MenuCommandKey :> First[{"1"}], FontFamily -> "Source Sans Pro",
         FontSize -> 34, FontTracking -> -0.5, FontColor -> GrayLevel[1], 
        Background -> RGBColor[
          Rational[22, 255], 
          Rational[8, 51], 
          Rational[21, 85]], Alignment -> {Left, Center}], 
       PaneBox[
        TemplateBox[{
          TagBox[
           TooltipBox[
            GraphicsBox[{
              Thickness[0.0022222222222222222`], {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                0}}}, CompressedData["
1:eJxtlTFo20AUhtUGAoVsgUC3dvEcEBQ8xciOQsAgpZ4sbCHrUpEh0EHQ2ZOh
kM1LtBkKmrIFAtkEgUBBQ8AQ8ObJEMiWKZAhL/p/YZ2wwZy+e/+9+9+7s/w9
/P3z15ZhGJ/keyrfz0bxCaKboCXjWTQ5+Rhb5nT0MWb5zhH4X8FB1LDB1wXL
0yHGjPGog3U511+0Mf9Izi3olyPkMQueJU8Fj5OFhfkXbX2Wv5G7Hei/hPR3
iPx7IeYX5EZIX/R7R33XQfw+pF+NZT8Hef4znjr0XebTOIhWDuYfyNsu9pvT
z1eNxVct3qzFbZf9Knjf7GksTzWeubqfexd5b0t/1KfUGyeI/y34Id/heSuN
xddGlifyk9rEpV581Pimxqliv7g+UVV/cg4K868u5sdc/8x6/jC+YP3nqlq/
1EP9FfvRZ3zCfK6q9nOWHCv022S8pZDnxcG4W/bvAByPdO4FZN6niV+Ni2JY
ZTkfD/669H/lYf+Y+8/IU9Yz9dg31j/xoMsYj6mfc33A+JL5u161f/K786r9
lXtKPfovH+63TV72dc40Fn8b+TJJqA+Gm7jUy+9YYznHQS3foOpXzntQq4/6
8v43qU80Xp83uOz/Wt8sz5/5Guy3PUB/d7X91vejx/wZ3x8J61nZ4Nsh6+T7
aM77gPdnlj8PMR93WLePMW1D963gcbSyoDN5v1oW/fn0Y2G/PuNZm3l9+uL7
+YL6mO/L1GddNvvIuHkE/qH9P2j/F++mXnJA
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}}}, CompressedData["
1:eJxtVD1IHFEQfkQIBFLYCjYhIARswlWCmKfn3+np7dnZSXj73hUHEWwtrkqV
QhCE7bYSAnap0r3K6hVWgp1wIAgphICQzrmdb3LzQhaW4dv5n/lm333+clDO
GGNe0fsRkp4j7weWZcdm+GFrIuvqsMHGjDYn0rbawHaD9R+AzTr7vR6w3e81
1t+FiYzpLfD3Bo/8wir7HQe2P7GIFxDP8vexB/7E8S+ARyscdznDxtyXuf5b
mftvCraQYm9Zf+10fXVVOV1/TEOX99dxun/bajk9n5jmnZ6fMbOO8/B8BVP/
HY3p2dX+tIeujk917en8NOd9XR/F7+n6aa+F7o/sC4430/R/kxb7iAc87HMd
Z8BXfbYfN3jgr6G3XmPK9w9+BL7sc32LIY9/HHT+mK6Crk/4I/XX1RvhZw/x
Brp/4ed0PszfmLpdxBF+7mgs/KdK3P8w7X+bv98CJ9zDGPuKGyyf4H8p9wB+
xTbbvxf+tTE/YLuGvCXb/VhleV6iftxLbPDIP+Be/og98JLXOKbTDJP02p/u
xev41GfI87eCrs+YQu6zzfbDoPujyEH3T/cnevwvKtkv7qGW/8O2xtP51+K/
o/3p6er45L+n89fVnNyD6Ht5/bGn+6O5Ffx9Fvm/Fno+dfWz0PO7Sb8KPV/a
M/i+lOEj/1xqLPsTf9mvxJf9T/P/5QfshT9c/5RfBv09Od2/8FPmI/yV+Qm/
Zb4Z/18AiE9a0w==
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxtkz1LA0EQhlcFQbAQUqVTAqkPFlIJuUvQemMXsDgEF+8DFAKCYJFKEOxS
bZcqlV0qweJ+wBWBgGAXEALW16ZwvXkXd4IHy96z887szNzcydXtxfWeEGLH
rq5du6J+Qrm8Cem1G3o81rPwd5+ab8ZFuWEsxFHicyhbCe1zsExIV4D7pDef
8Fewi4jiXyJeu+ZYa+iHEenuwAb2excP/o+4X/Z8tvkxXpSHyudYnyuq96Hm
QI6Uf18gJ7An4Lny812UpeL1rJRfbyArxfshBn6/Yr0Pbrj8BtAxdt/Dsfte
22yVA4r7kf7Hf/ELxkX5ynhqzBY/p36+tv+pX4/tT+rXa/sD/dr1B/alQt9T
8nuD/tTlC3sHPIZ/AP2QsRDHjMd6jXl9yXyO9Szj9veM+lZhHhdkN82Izr8y
Og/BFfQjzNsGPI8or4McOugbYJrHqWnmqKeHvHOKU/ZI18qh61O+7Zx2De4g
3uiM9gnjWD8hPv+fa/4BI1HiVA==
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {0, 1, 0}}}, CompressedData["
1:eJxtlL9Lw0AUx68KguAgCEIRhKIIboVMTl7qoiD2qovdgmC2mExCt4Dg5CAI
4m2BgiA4FJwKHQJOQoaAU8HBP6BDoZObZ9/38F3pwXF88n7ce9/jpXYRn14u
CiEqZh+YvSCmS3o3V9KcZTFSknGmh0d/ZxCuJ/NYiPSQ+89yGj43OEvPa1D8
Ldn10Ke4e7D2yf4IbvsU10W+Hfj3cJ+Ycl4MbD5JXMCeg79w/5uk72NbH1jE
nE1/sWtXc9msfdJlN5rH//7SYemdORyE4QxfR7xeo1fE+zH6ROgT+brwn+C+
HuXTVZ/q6SNeQs93cAr7h80PfUvkX2lwNv4OZ7qqOJfFsUJdsHcUvy/TGvYB
uK94vXXvU/F+hPhWvN+6N1Fcj0z/KK6XWS2uZxAutbjelu17WLbvNctPWtv4
hLMQ55iH9gn8Hc6L7YTOuybFb9n5adJZS6ifNdS/Cfse+t+w+WC389eBXquI
f1D0fTkh/V/BFcxnDv9xzPU18xBzfc37xBQ/QvyLw87/4Rfi3/f7
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}}, {{0, 2, 0}, {1, 3, 3}, {1, 
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {CompressedData["
1:eJxtlD9IHEEUxgeLVEcqm2sEmzSBIEyaEPBmr7p/6l4MQSHIonHhmrh7abTT
xkaxCsHpNgRsLLUJhLCVEFhFCAREi0BADFxx4Sq7jPe+h2/kBpbhNzPvzfe+
2ZnJ5bVXq2NKqUX33fWuZbbTNa7ftBdVMxxZB5eHHMXbQ86L3YD6j0M2WgfU
f+F4Q3xEHB8Yij/xOLM/RrJrFcr/zePMfvbY6B3WV5F6ldaIf0d82sL8AtZb
xDex/3WF9E2DnxiKfw6OUc9T1HsEvZOsJyAuY/5DQPkegwfgTyn8qlH+1kh2
O1Yl3/s/i/kcfs/zeuR/AzY4n7cp9SWsX8F+A+jvYL4Ap5wfvJH69W6RHpyX
899j9z947CJGssL5OU5G8X3+Q4/z4tjjKP7+gE8SqTeKzxJZTxT/SmS9eXGV
SD+M/pPA74DibhLfz14i/Vaqz/nh7wD5S1XJfJ7M7j8JJZ8XrZDG/2F+I5T7
ZdZi/i/4ayj1TumfoaxHqd+hrHdKD0LpR2ZvQ+mXa23pZxQ/aku/mfk8mPm8
HvK+tci3l0o2+tLjvBjH/YnapOtFl/zoQd9SV/rh/s8ujR/MSc7sxYzP5Rla
957vY4s4Rvx108+/2CQ9rzlfg3TVOL5B/Uu8f6UGxT/j96BOPMHrwXz/dR0+
83tQI+7z/avRvuL9/Q8PwFRN
                 "], CompressedData["
1:eJxTTMoPSmViYGCQBWIQDQQJaX6FDmBWgyeIPnCmB4WfkLYMTX4PmL9g5kyo
/Dmo/AFPCP0AzHcw/gxV/wbKN/aCyP8ohNrjBTGHsQhizjMon7MIQkd6Q8T5
YPLeEHOEiyB0sQ/EHJEiCM3ji8o/g8bv8YOYKwg1T80fqg9q3mZ/iPs4oPZL
BkD4DGC+gXFwAET9F6j/KwMg9MtCaDgFQMy5DQsPqPzJQoj+y1DzdkDVP4Oq
XwzmXzjzBqq+E4V/4IwPVj4ifpDiDwD9RnX7
                 "]}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}, {{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}}}, {CompressedData["
1:eJxtk7FKBDEQhqPdwTU24oIIhyIKIsiCIBYmUbY80EKwWwVTKribQhQ5sbEQ
wTJd4OB68RDLa4V7AV/AWvAFzO78wWTZwDJ8yT9/JpNN7+zy6HyWMbbnviq6
wdNhwV20Jsko3tfM03S/irm6q9mNmifTW/BEku6moPknSfnXNQ/MScxqNWI3
Inb5ItzP7S9I9wj+5aR/8ftzihb+I04+44it+WzlqgsUf67a+F8/08jvNHgO
9b2hnoWovlwt4XxTTrpl5H9Dv4Z+JYJ0G8jngvy3wAP0Z9v7C/LbhX9XIg/+
StL8Afy/0O9Oib4dkl+/wfOa8v19JRr5qG8RbFBfT1MdBdZXdFz/ug7Pl6tN
rDPUn+qwH9bs6LBfTqHjfmY67Lerv8HHEVtz2soM952ri7KN/f3y9CHiXI0i
ZuyjDM/n2f2vorEuQ3YKSX7v8PP3NS4p0ntydUNP782aV++P/GfouxnND4s2
rt/3H69t4mk=
                 "], CompressedData["
1:eJxTTMoPSmViYGAQA2IQDQQHzriUOIBpHx8Q7WBsDeYvmCnpC+Ebg/kJac+g
fG2o/Ew/CF8Zpt8fQsuA+UAQAKElwHwD4+AAiDliUPPUAiD6hVHUL5gpWAIR
3+wPUccHVZ/mDxHnhtrH4w/RxwHVf8APIs4C1V/sBzGPEeYfqPyfYqh6Xwj9
oxhqvi9E/gtUnsEXIv6uGCLe4wOht0DlG9wh/JoSVD5SeAIAy/FP8g==
                 "]}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {
                1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}}}, CompressedData["
1:eJxtlLFLHEEUxicKVvkHbARBhECKgwUrwdk7ESSHzHlVSLMILgYEr9m9TXdi
e12aDFhsJYIiiE1CmgUhCG5xIAhiYyFB8TgUKzvHm++5b5ZbWGZ/8968ee+b
Nzu9trW6Pi6E+GDeNfOOieEjvYO2tJ8LknEn3JNvYxAeOSzE7xJnJT5r2zgn
4B7iZ4h3OeQsz6X1u4b/M/xvYP/o2/EW66Vvxztwx7frHig+/Pu0vmr3GyC/
0OGK91O9jamedupP9VPMOctnhtzLu4pzR+uqw+Es4s/GqM+38T6Bu8jvM7iO
eiqIN+nb9XMx1yPL5yke9KrFXF/pfYm5/tJrUn7gbw4HYehwqr+P5KL+3WgU
F+e973Cqjx2W3t8Sn0Zu/ueIn4EvIl5vqq8irofpj4jrZfoD6yX0vgd3qB8o
PvR+RHzbH8TG3+FUTyrOvbyurH4D2H8ovl+qNez/wX8Uz7fiXShej5lXvN6K
96y4Hql+UVwv8zS4nkE40eB6E9N5ENN5lfmX1g07b/uh4Kk25mvIr83t5isZ
xUX8rsPS23HY6OawEK2E12f2TXj9Ziax+veh31fYr6BPE/H+Qf8V+B/Cfxnc
hX0JvIn1NewvHTb5OUz3/Z1x37N8MbEj3fdlMN33Orju83ypf6meor8Digfe
gJ3+py3sT/cvofxwX7YdpvMgpvMqsyj9/4f8CjTreeM=
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1,
                 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 
                3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1,
                 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {1, 3, 
                3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}}}, CompressedData["
1:eJxtlT9oE1Ecx19VnEoXFwsOunQsgTd1qXeXxCnDRboEOhxSD8RAlYCYu1Aq
QqcOgosHRQKF4FCEEigtOqQIXbyhkMUgiFAoCBmEQCGL+Gt+3x+8X8hBePm8
7+/v+3P34Mnm46c3jTFz9Nuk3w0zeaL4V+LRuB3Hq9ejZ78o7uV7zFk2YfoH
XnzI+obo4Ar8l7zrsZ2tgDsTjuIl0X2Odzdhv9xnfUHiBTx/K+H5uMj2JuG4
tZLLnm2Utb4YunyeV0KO86/JejPkcQzOoF+BT+D/d8IF24f9nybP/w457wX0
Efgn/MfgPuxNlfl7k/PcrrLdqWJjjhX38oOZ/CHLqjz/OZnFYu/Z/UTnyxKd
753iKN5J3Hp7eStx+4niV1jPIdbnBfQB1ucZ4p2F7L8B+wPYR+Bd6OvgOvxr
yO8ppvqm9bLLtP8lNx79K7r5PWvBdTmPgdsP6QGPb3H+Br67PjQDbkt+n/Mf
yn3w2f8b4o08tvsh8TzOP1RMfaVav5e6/lG8zDruSzvzYV9DPSH0jo/+Ux7n
A+wH4jXAL2F/GbD/65Tz8P2K4i3wZZHt36Tov+Qy3eOyywV7J9T6I+z3NvQG
7kMKfh+6+Qu2G7r1nec57J+nPD+Q8wR9KOcH/iPwGuzH4Arql/tXVEzvJ8Wy
3tNM9eI+zLdmsdjT09L+Vyoe7f9UPReqXupT9UPvD9kP9JND7+M+niFeD/6n
sO/A/it4B/qJ7Df8j5B/RTE9iqnPssu0/zgPh9AreD9/Au8GbPcRnMt9wnm0
eN9vgbs4/3XRwWs47/x9kf2S748x97le211lfQ7nm79f6vv2H6WjrZs=
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{37.099998474121094`, 33.400001525878906`}, {42., 
                25.}, {42., 33.900001525878906`}, {36.900001525878906`, 
                41.400001525878906`}, {37.099998474121094`, 
                33.400001525878906`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{31.899999618530273`, 56.900001525878906`}, {25.5, 
                48.599998474121094`}, {35.5, 45.599998474121094`}, {41.5, 
                53.70000076293945}, {31.899999618530273`, 
                56.900001525878906`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{26.100000381469727`, 40.400001525878906`}, {
                24.899999618530273`, 29.300003051757812`}, {35.20000076293945,
                 33.80000305175781}, {35., 43.29999923706055}, {
                26.100000381469727`, 40.400001525878906`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{43., 52.599998474121094`}, {37.099998474121094`, 
                44.5}, {43., 35.900001525878906`}, {48.900001525878906`, 
                44.5}, {43., 52.599998474121094`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{53.79999923706055, 69.20000076293945}, {
                43.900001525878906`, 65.70000076293945}, {43.900001525878906`,
                 55.5}, {53.5, 58.70000076293945}, {53.79999923706055, 
                69.20000076293945}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{51., 43.29999923706055}, {50.79999923706055, 
                33.80000305175781}, {61., 29.300003051757812`}, {
                59.900001525878906`, 40.400001525878906`}, {51., 
                43.29999923706055}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{54.099998474121094`, 56.900001525878906`}, {44.5, 
                53.70000076293945}, {50.400001525878906`, 
                45.599998474121094`}, {60.5, 48.599998474121094`}, {
                54.099998474121094`, 56.900001525878906`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{42., 55.5}, {42., 65.70000076293945}, {
                32.20000076293945, 69.20000076293945}, {32.5, 
                58.70000076293945}, {42., 55.5}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{40.20000076293945, 68.29999923706055}, {
                35.599998474121094`, 74.29999923706055}, {26.700000762939453`,
                 78.20000076293945}, {31.799999237060547`, 
                71.29999923706055}, {40.20000076293945, 
                68.29999923706055}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{30.5, 61.099998474121094`}, {30.299999237060547`, 
                70.20000076293945}, {25.100000381469727`, 
                77.10000038146973}, {26.100000381469727`, 67.4000015258789}, {
                30.5, 61.099998474121094`}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{28.799999237060547`, 56.}, {21.5, 
                53.29999923706055}, {15.100000381469727`, 
                46.099998474121094`}, {23.299999237060547`, 
                48.900001525878906`}, {28.799999237060547`, 56.}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{30.100000381469727`, 58.5}, {24.799999237060547`, 
                66.}, {13.800000190734863`, 63.599998474121094`}, {
                21.299999237060547`, 55.20000076293945}, {30.100000381469727`,
                 58.5}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{32.70000076293945, 44.5}, {23.899999618530273`, 
                47.099998474121094`}, {15.5, 44.20000076293945}, {
                25.100000381469727`, 42.099998474121094`}, {32.70000076293945,
                 44.5}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{43.900001525878906`, 25.}, {48.900001525878906`, 
                33.400001525878906`}, {49., 41.400001525878906`}, {
                43.900001525878906`, 33.900001525878906`}, {
                43.900001525878906`, 25.}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}}, {{0, 2, 0}, {0, 
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgAmJRKA0BIg5gKiHUAYnfMHOmHYh2MDbWA4sbG+uD6AUz
Ix2gfCUQfeAMjyuYn5YmBlXvCjVHDKoewp81UxQiXwzhmxiLQuRnoslvRtN/
E8V8oHovZPuB6gOR3Qe0PwTN/SHI/lsw8ydEPYNCOIQv6QvhO0RA6AZXZP6B
M2eskflA83SQ9aOHH9A8TxB94QxPMNS9/lBzwe5ISHvmB6INjD8HQMx/EwTh
G0P5PQFQc7yR5YHucEXWf+CMjwuy+Q1paVbI9oOciuwfYHgYQ/U7IssDw88M
zD/rA9NvAfWvC0R9mgqEf8AVqt4YYj+PN7L8hTM6Acj6L5x5E4BiPsL/jhD/
CgejhrdCGEb4AQAnYISO
                "]]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {
                 0, 1, 0}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {1, 3, 
                 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {1, 3, 3}}, {{0, 2, 
                 0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {
                 1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                 0}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {1, 3, 3}, {0, 1, 
                 0}}}, {CompressedData["
1:eJxTTMoPSmViYGCQBmIQDQQOxsIhDkA6I21ZmAOYPzkQRKeluUU4gFU0+IBo
Y2PjSCjfFZXPYIvMT0hL0wfRZ874gPUfOHNGDNn8BTNnCkLkc8Kg8hwg2sTY
OAxqHgOInjHzZyjUvG/2YP5NFD7QHbZQ/X/A/LNnbKD6NZHphLRndmA+1B0O
xsUuyPbA/MNgYPzZHmxejxuavDeyfqCJQcjmHzjDA3YXg/FmG4h9amB+Q1qa
LTLfxPhyKFQflP85FBIeO0Mg4aETBvVfCHL4oMQPANLHWh4=
                 "], CompressedData["
1:eJxTTMoPSmViYGBQA2IQDQYHQhyA5IyZM0MdkPhAYAeiHYw3Q/jGm21B9IKZ
kkFg/tkz2iA6IU3NG8w/c0YGos/BDcrnIYbvYGyMxv/sCuabGHND7YfwZ8zk
hPCLXaHqOaD6IfyMNC6ou12hNNS8zS6o5uPnJ6QtQ+EvmDnTHtl/B86c0UL2
PxBwIIcPjN+Q9gyFb2D8OQSZb2I8ORRFP8OCUIj9aQIOYO/eDIX6TxSiXjgM
Ki/lAPauWxjEPT4GIDot7Vk4VL0thH8sAmJugysyf8HMSB9kPtC8QGT9C2be
DHYAe9cHar4ONH1IhkHkK6H+eICSXjLSlqHwwekJADolewo=
                 "]}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{48.70000076293945, 75.10000038146973}, {43., 
                84.79999923706055}, {37.29999923706055, 75.10000038146973}, {
                43., 67.9000015258789}, {48.70000076293945, 
                75.10000038146973}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{53.29999923706055, 44.5}, {60.79999923706055, 
                42.099998474121094`}, {70.5, 44.20000076293945}, {
                62.099998474121094`, 47.099998474121094`}, {53.29999923706055,
                 44.5}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{54.20000076293945, 71.29999923706055}, {
                59.29999923706055, 78.10000038146973}, {50.400001525878906`, 
                74.29999923706055}, {45.70000076293945, 68.29999923706055}, {
                54.20000076293945, 71.29999923706055}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{57.20000076293945, 56.}, {62.70000076293945, 
                48.900001525878906`}, {70.9000015258789, 
                46.099998474121094`}, {64.5, 53.29999923706055}, {
                57.20000076293945, 56.}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{64.69999694824219, 55.20000076293945}, {
                72.19999694824219, 63.599998474121094`}, {61.20000076293945, 
                66.}, {55.900001525878906`, 58.5}, {64.69999694824219, 
                55.20000076293945}}}]}, {
               FaceForm[{
                 RGBColor[1., 1., 1.], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}}}, {{{55.5, 61.099998474121094`}, {59.900001525878906`, 
                67.4000015258789}, {60.900001525878906`, 77.10000038146973}, {
                55.70000076293945, 70.20000076293945}, {55.5, 
                61.099998474121094`}}}]}}, {
             ImageSize -> 170, AspectRatio -> Automatic, 
              ImageSize -> {450., 102.}, 
              PlotRange -> {{0., 450.}, {0., 102.}}}], 
            "\"Wolfram U: Learning Resources for the Computational \
Universe\"", TooltipStyle -> "TextStyling"], 
           Annotation[#, 
            "Wolfram U: Learning Resources for the Computational Universe", 
            "Tooltip"]& ], "https://www.wolfram.com/wolfram-u/"}, 
         "HyperlinkURL"], ImageSize -> Full, Alignment -> {Right, Center}]}}, 
     GridBoxAlignment -> {"Columns" -> {Left, Right}, "Rows" -> {{Center}}}, 
     AutoDelete -> False, GridBoxItemSize -> {"Columns" -> {
         Scaled[0.75], 
         Scaled[0.25]}}, 
     GridBoxSpacings -> {"Columns" -> {{Automatic}}, "Rows" -> {{0}}}], 
    "Grid"]], "DockedTitle", CellMargins -> {{0, 0}, {0, 0}}, 
  StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
  CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
  CellFrameMargins -> {{20, 20}, {15, 15}}, LineSpacing -> {1, 4}, 
  LanguageCategory -> "NaturalLanguage", CounterIncrements -> "Title", 
  CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {"Figure", 0}, {
    "Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {"Subitem", 0}, {
    "Subsubitem", 0}, {"ItemNumbered", 0}, {"SubitemNumbered", 0}, {
    "SubsubitemNumbered", 0}}, MenuSortingValue -> 1100, MenuCommandKey :> 
  First[{"1"}], FontFamily -> "Source Sans Pro", FontSize -> 34, 
  FontTracking -> -0.5, FontColor -> GrayLevel[1], Background -> RGBColor[
    Rational[22, 255], 
    Rational[8, 51], 
    Rational[21, 85]]],
ShowCellBracket->True,
TaggingRules->{
 "WolframUNotebook" -> True, 
  "PresenterSettings" -> {"ShowNavigationBar" -> True}, "ShowNavigationBar" -> 
  True},
ShowCellTags->False,
TrackCellChangeTimes->False,
Magnification:>1.5 Inherited,
FrontEndVersion->"14.1 for Mac OS X ARM (64-bit) (July 16, 2024)",
StyleDefinitions->Notebook[{
   Cell[
    StyleData[StyleDefinitions -> "Default.nb"]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Title and Section Cells", "Section"], 
      Cell[
       StyleData["Title"], CellMargins -> {{27, Inherited}, {10, 30}}, 
       FontSize -> 40, FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["DockedTitle", StyleDefinitions -> StyleData["Title"]], 
       CellMargins -> {{0, 0}, {0, 0}}, 
       CellFrameMargins -> {{20, 20}, {15, 15}}, FontSize -> 34, FontColor -> 
       GrayLevel[1], Background -> RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Subtitle"], CellMargins -> {{27, Inherited}, {0, 20}}, 
       FontSize -> 34, FontWeight -> 400, FontColor -> RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Subsubtitle"], CellMargins -> {{27, Inherited}, {0, 2}}, 
       FontSize -> 20, FontWeight -> "Thin", FontSlant -> "Italic", FontColor -> 
       RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Chapter"], FontSize -> 31, FontColor -> RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Section"], CellMargins -> {{27, Inherited}, {8, 25}}, 
       CellFrameMargins -> {{7, 7}, {7, 22}}, CellFrameColor -> 
       GrayLevel[0.8], FontColor -> RGBColor[
         Rational[22, 255], 
         Rational[8, 51], 
         Rational[21, 85]]], 
      Cell[
       StyleData["Subsection"], CellMargins -> {{50, 3.}, {5., 10.}}, 
       FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Subsubsection"], CellMargins -> {{50, 3.}, {8., 12.}}, 
       CounterAssignments -> {{"Subsubsubsection", 0}, {"Item", 0}, {
         "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
         "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}, {
         "ItemRomanNumbered", 0}}, FontSize -> 15, FontWeight -> "Bold", 
       FontVariations -> {"CapsType" -> "AllCaps"}, FontColor -> GrayLevel[
         Rational[4, 15]]], 
      Cell[
       StyleData["Subsubsubsection"], CellMargins -> {{50, 3.}, {2., 10.}}, 
       CounterAssignments -> {{"Subsubsubsubsection", 0}, {"Item", 0}, {
         "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
         "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}, {
         "ItemRomanNumbered", 0}}, FontWeight -> "Bold", FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Subsubsubsubsection"], CellMargins -> {{50, 3.}, {2., 10.}},
        FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData["WolframULogo"], CellMargins -> {{27, 0}, {0, 25}}, 
          CellGroupingRules -> "GraphicsGrouping", PageBreakWithin -> False], 
         
         Cell[
          StyleData[
          "WolframULogo", "SlideShow", StyleDefinitions -> 
           StyleData["WolframULogo"]], 
          CellFrameLabels -> {{None, None}, {None, None}}], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Working", StyleDefinitions -> 
           StyleData["WolframULogo", "SlideShow"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]]], 
         Cell[
          StyleData[
          "WolframULogo", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["WolframULogo", "Slideshow Working"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Closed]], 
      Cell[
       CellGroupData[{
         Cell[
          StyleData[
          "TitleGraphic", StyleDefinitions -> StyleData["WolframULogo"]], 
          StyleKeyMapping -> {"Tab" -> "Subtitle"}, 
          CellGroupingRules -> {"TitleGrouping", 0}, PageBreakBelow -> False, 
          LineSpacing -> {1, 4}, CounterIncrements -> "Title", 
          CounterAssignments -> {{"Section", 0}, {"Equation", 0}, {
            "Figure", 0}, {"Subtitle", 0}, {"Subsubtitle", 0}, {"Item", 0}, {
            "Subitem", 0}, {"Subsubitem", 0}, {"ItemNumbered", 0}, {
            "SubitemNumbered", 0}, {"SubsubitemNumbered", 0}}, 
          FontTracking -> -0.5], 
         Cell[
          StyleData[
          "TitleGraphic", "SlideShow", StyleDefinitions -> 
           StyleData["TitleGraphic"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Slideshow Working", StyleDefinitions -> 
           StyleData["TitleGraphic", "SlideShow"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Slideshow Presentation", StyleDefinitions -> 
           StyleData["TitleGraphic", "SlideShow"]]], 
         Cell[
          StyleData[
          "TitleGraphic", "Scrolling Presentation", StyleDefinitions -> 
           StyleData["TitleGraphic", "SlideShow"]], 
          CellFrameLabels -> {{None, None}, {None, None}}]}, Open]]}, 
     Closed]], 
   Cell[
    CellGroupData[{
      Cell["Styles for Body Content", "Section"], 
      Cell[
       StyleData["Author"], CellMargins -> {{27, Inherited}, {0, 2}}, 
       FontWeight -> "Thin", FontSlant -> "Italic"], 
      Cell[
       StyleData["Affiliation"], CellMargins -> {{27, Inherited}, {0, 2}}, 
       FontWeight -> "Thin", FontSlant -> "Italic"], 
      Cell[
       StyleData["Text"], CellMargins -> {{50, 10.}, {7., 8.}}, FontColor -> 
       GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData[
       "OpenCollapsedSection", StyleDefinitions -> StyleData["Text"]], 
       CellMargins -> {{27, Inherited}, {8, 10}}, MenuSortingValue -> 10000, 
       FontSize -> 11], 
      Cell[
       StyleData["CodeText"], CellMargins -> {{50, 10.}, {3., 15.}}], 
      Cell[
       StyleData["Item"], CellDingbat -> 
       StyleBox["\[FilledSmallCircle]", FontColor -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], FontSize -> 12], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["Subitem"], CellDingbat -> 
       StyleBox["\[FilledSmallCircle]", FontColor -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], FontSize -> 12], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["Subsubitem"], CellDingbat -> 
       StyleBox["\[FilledSmallCircle]", FontColor -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], FontSize -> 12], 
       StyleKeyMapping -> {
        "Tab" -> "Subsubsubitem", "*" -> "Subsubsubitem", "Backspace" -> 
         "Subitem", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> "Subitem"}, 
       FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["Subsubsubitem"], CellDingbat -> 
       StyleBox[
        "\[FilledSmallCircle]", Alignment -> Baseline, FontColor -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], FontSize -> 12], 
       CellMargins -> {{153, 12}, {4, 4}}, ReturnCreatesNewCell -> True, 
       StyleKeyMapping -> {
        "Backspace" -> 
         "Subsubitem", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> "Subsubitem"}, 
       CellGroupingRules -> {"ItemGrouping", 100}, CellFrameLabelMargins -> 4,
        CounterIncrements -> "Subsubsubitem", MenuSortingValue -> 1630, 
       FontFamily -> "Source Sans Pro", FontSize -> 12, FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["ItemNumbered"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubitemNumbered"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubsubitemNumbered"], 
       StyleKeyMapping -> {
        "Tab" -> "SubsubsubitemNumbered", "Backspace" -> 
         "SubitemNumbered", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> "SubitemNumbered"}, 
       FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubsubsubitemNumbered"], CellDingbat -> Cell[
         TextData[{
           CounterBox["ItemNumbered"], ".", 
           CounterBox["SubitemNumbered"], ".", 
           CounterBox["SubsubitemNumbered"], ".", 
           CounterBox["SubsubsubitemNumbered"], "."}], FontWeight -> "Bold"], 
       CellMargins -> {{153, 12}, {4, 4}}, ReturnCreatesNewCell -> True, 
       StyleKeyMapping -> {
        "Backspace" -> 
         "SubsubitemNumbered", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> 
         "SubsubitemNumbered"}, CellGroupingRules -> {"ItemGrouping", 100}, 
       CellFrameLabelMargins -> 4, CounterIncrements -> 
       "SubsubsubitemNumbered", MenuSortingValue -> 1630, FontFamily -> 
       "Source Sans Pro", FontSize -> 12], 
      Cell[
       StyleData["ItemParagraph"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubitemParagraph"], FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubsubitemParagraph"], 
       StyleKeyMapping -> {
        "Tab" -> "SubsubsubitemParagraph", "Backspace" -> 
         "SubitemParagraph", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> "SubitemParagraph"}, 
       FontColor -> GrayLevel[
         Rational[83, 255]]], 
      Cell[
       StyleData["SubsubsubitemParagraph"], 
       CellMargins -> {{153, 12}, {4, 4}}, ReturnCreatesNewCell -> True, 
       StyleKeyMapping -> {
        "Backspace" -> 
         "SubsubitemParagraph", $CellContext`KeyEvent[
          "Tab", $CellContext`Modifiers -> {"Shift"}] -> 
         "SubsubitemParagraph"}, CellGroupingRules -> {"ItemGrouping", 100}, 
       CellFrameLabelMargins -> 4, CounterIncrements -> "Subsubsubitem", 
       MenuSortingValue -> 1630, FontFamily -> "Source Sans Pro", FontSize -> 
       12, FontColor -> GrayLevel[0.2]], 
      Cell[
       StyleData[
       "ItemRomanNumbered", StyleDefinitions -> StyleData["ItemNumbered"]], 
       CellDingbat -> Cell[
         TextData[{
           CounterBox["ItemRomanNumbered", CounterFunction -> RomanNumeral], 
           "."}], FontWeight -> Bold], CounterIncrements -> 
       "ItemRomanNumbered"], 
      Cell[
       StyleData["KeyEvent"], CellFrame -> {{1, 1}, {1, 1}}, 
       CellFrameMargins -> {{2, 2}, {2, 2}}, CellFrameColor -> GrayLevel[0.8],
        FontFamily -> "Source Sans Pro", FontColor -> GrayLevel[0.360784], 
       Background -> GrayLevel[0.964706]], 
      Cell[
       StyleData["AuthorNote", StyleDefinitions -> StyleData["Text"]], 
       CellDingbat -> 
       StyleBox[
        "Author note:", "Text", FontSlant -> "Italic", FontColor -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], Alignment -> Baseline], FontSlant -> "Italic",
        FontColor -> GrayLevel[0.4]], 
      Cell[
       StyleData["HintHeader", StyleDefinitions -> StyleData["Text"]], 
       ShowGroupOpener -> True, GroupOpenerInsideFrame -> False, 
       CellGroupingRules -> {"SectionGrouping", 80}, PageBreakBelow -> False, 
       FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Hint", StyleDefinitions -> StyleData["Text"]], CellFrame -> 
       True, Background -> RGBColor[
         Rational[173, 255], 
         Rational[433, 510], 
         Rational[421, 510]]], 
      Cell[
       StyleData["ExperimentalInput", StyleDefinitions -> StyleData["Input"]],
        Editable -> True, CellFrame -> True, 
       StyleKeyMapping -> {"=" -> "WolframAlphaShort", "*" -> "Item"}, 
       CellFrameColor -> RGBColor[
         Rational[91, 255], 
         Rational[178, 255], 
         Rational[166, 255]], CellFrameLabels -> {{
          Cell[
           BoxData[
            RotationBox["Experimental", BoxRotation -> 1.5708]], "Text", 
           FontSize -> 10, FontColor -> RGBColor[
             Rational[91, 255], 
             Rational[178, 255], 
             Rational[166, 255]]], None}, {None, None}}], 
      Cell[
       StyleData["WolframLanguageLogo"], FontColor -> 
       RGBColor[0.09, 0.16, 0.25]], 
      Cell[
       StyleData["Link"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["HyperLink"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["Hyperlink"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["FunctionLink"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["HyperlinkActionNew"], FontColor -> RGBColor[
         Rational[64, 255], 
         Rational[25, 51], 
         Rational[128, 255]]], 
      Cell[
       StyleData["HyperlinkActive"], FontColor -> RGBColor[
         Rational[91, 255], 
         Rational[178, 255], 
         Rational[166, 255]]], 
      Cell[
       StyleData["CYUButton", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], FrameBoxOptions -> {Background -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]]}], 
      Cell[
       StyleData["HintButton", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], FrameBoxOptions -> {Background -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]]}], 
      Cell[
       StyleData["SolutionButton", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], FrameBoxOptions -> {Background -> RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[
           Rational[64, 255], 
           Rational[25, 51], 
           Rational[128, 255]]}], 
      Cell[
       StyleData["CYUButtonActive", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], 
       FrameBoxOptions -> {
        Background -> RGBColor[1, 0.4, 0], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[1, 0.4, 0]}], 
      Cell[
       StyleData["HintButtonActive", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], 
       FrameBoxOptions -> {
        Background -> RGBColor[1, 0.4, 0], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[1, 0.4, 0]}], 
      Cell[
       StyleData[
       "SolutionButtonActive", StyleDefinitions -> StyleData["Text"]], 
       FontColor -> GrayLevel[1], 
       FrameBoxOptions -> {
        Background -> RGBColor[1, 0.4, 0], 
         BaseStyle -> {"Text", FontColor -> GrayLevel[1]}, FrameStyle -> 
         RGBColor[1, 0.4, 0]}]}, Closed]]}, Visible -> False, FrontEndVersion -> 
  "14.1 for Mac OS X ARM (64-bit) (July 16, 2024)", StyleDefinitions -> 
  "PrivateStylesheetFormatting.nb"],
ExpressionUUID->"a115ece6-e7a4-415d-82e4-cc66001be8f2"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{
 "CYU"->{
  Cell[63368, 1398, 17846, 332, 609, "Text",ExpressionUUID->"4bd932b8-1592-4d02-896c-48265c956141",
   CellTags->"CYU"],
  Cell[94226, 2071, 17846, 332, 609, "Text",ExpressionUUID->"07cedee0-21f6-4eda-854b-a568ea2a338c",
   CellTags->"CYU"],
  Cell[409235, 9409, 16727, 327, 99, "Text",ExpressionUUID->"c5f4ba0e-d194-434b-bc2f-2ea27dd0aeef",
   CellTags->"CYU"],
  Cell[428334, 9807, 1999, 45, 99, "Text",ExpressionUUID->"5a33d627-33bb-4c59-af4f-d5dbd4f9a096",
   CellTags->"CYU"],
  Cell[430336, 9854, 1603, 38, 99, "Text",ExpressionUUID->"7b4a12d9-bca0-4c17-843c-a15e2f058dc3",
   CellTags->"CYU"],
  Cell[432077, 9896, 1975, 45, 99, "Text",ExpressionUUID->"d5d06b0a-81a7-46e7-92ed-1ea4c4abdf98",
   CellTags->"CYU"],
  Cell[434055, 9943, 1604, 38, 99, "Text",ExpressionUUID->"de5fed75-e0fe-4d96-a158-24986edaee1d",
   CellTags->"CYU"],
  Cell[436378, 10005, 1996, 46, 99, "Text",ExpressionUUID->"9fb2a8fe-3503-4e27-a495-fba1293c4cc1",
   CellTags->"CYU"],
  Cell[438377, 10053, 2155, 54, 99, "Text",ExpressionUUID->"565203c5-cd28-461b-9707-4084cf819118",
   CellTags->"CYU"],
  Cell[461725, 10479, 2373, 53, 99, "Text",ExpressionUUID->"c1b4bc11-1f3d-4c32-98e6-12d91ea0a6ee",
   CellTags->"CYU"],
  Cell[464101, 10534, 2559, 60, 99, "Text",ExpressionUUID->"18b1405c-6023-4f7f-ade2-61a07c4e77a2",
   CellTags->"CYU"],
  Cell[466823, 10600, 2199, 50, 99, "Text",ExpressionUUID->"5aa3569d-d91a-439c-87dd-09797327dc10",
   CellTags->"CYU"],
  Cell[469025, 10652, 2628, 67, 99, "Text",ExpressionUUID->"153eee61-bf9c-43cc-91e7-772ae2f85b1b",
   CellTags->"CYU"],
  Cell[471824, 10725, 2356, 53, 136, "Text",ExpressionUUID->"790598e7-c531-42f8-9df4-aa0c8adad9b1",
   CellTags->"CYU"],
  Cell[474183, 10780, 7171, 148, 289, "Text",ExpressionUUID->"83e90a1a-874b-4861-b9e6-1608d3e805ad",
   CellTags->"CYU"]}
 }
*)
(*CellTagsIndex
CellTagsIndex->{
 {"CYU", 728806, 15590}
 }
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[616, 23, 97, 0, 94, "Subtitle",ExpressionUUID->"3caa86fa-3856-4e96-ab4e-036bc12d48a6"],
Cell[CellGroupData[{
Cell[738, 27, 93, 0, 136, "Section",ExpressionUUID->"2bde8e48-a6ec-4b16-b4de-eac144d4190e"],
Cell[834, 29, 194, 3, 50, "Text",ExpressionUUID->"d6a76824-64a8-48eb-9a3c-c6e87a9dbc5e"],
Cell[CellGroupData[{
Cell[1053, 36, 82, 0, 60, "Subsection",ExpressionUUID->"626d25ea-1f38-4b31-9947-99aa2d2d4a4d"],
Cell[1138, 38, 112, 0, 46, "Item",ExpressionUUID->"55a5e0a2-7356-4d7c-8e04-013f7b17bbf6"],
Cell[1253, 40, 962, 25, 46, "Item",ExpressionUUID->"422629d2-d5ea-4795-b42f-0e7f05e026ea"],
Cell[2218, 67, 78, 0, 46, "Item",ExpressionUUID->"d52bc262-39ca-45dd-9d6f-53e9a10111d3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2333, 72, 98, 0, 60, "Subsection",ExpressionUUID->"8c066228-7c56-4bb7-ad8a-4263dcc2b62d"],
Cell[2434, 74, 148, 2, 46, "Item",ExpressionUUID->"a8121ddc-7953-4961-b1a2-e6b8da5c2c8b"],
Cell[2585, 78, 117, 0, 46, "Item",ExpressionUUID->"f901c5f8-880d-45f9-b0ed-b90dfa2c737c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[2739, 83, 101, 0, 60, "Subsection",ExpressionUUID->"f163eb3e-82e7-47ac-bdaf-8d85681f4648"],
Cell[2843, 85, 208, 3, 76, "Item",ExpressionUUID->"5cb0b6ff-91ee-4d75-974a-d3bbc607c1d4"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[3100, 94, 92, 0, 136, "Section",ExpressionUUID->"7359bcc4-6362-4e7a-834f-309641431b6f"],
Cell[3195, 96, 166, 3, 50, "Text",ExpressionUUID->"46de92de-2337-4f1a-a4ae-8e8aafbd35ad"],
Cell[CellGroupData[{
Cell[3386, 103, 114, 2, 60, "Subsection",ExpressionUUID->"b622d4a9-37ef-4b30-a9da-3b965124f0db"],
Cell[3503, 107, 148, 2, 46, "Item",ExpressionUUID->"e07b5609-ec64-49b3-ae07-af7687a858e7"],
Cell[3654, 111, 97, 0, 46, "Item",ExpressionUUID->"fe6859d9-57c4-4031-8132-c7630fb33426"],
Cell[CellGroupData[{
Cell[3776, 115, 663, 34, 46, "Item",ExpressionUUID->"3e756500-e640-4549-ade0-f968c38c3fcf"],
Cell[4442, 151, 113, 2, 44, "Input",ExpressionUUID->"651c9393-8780-4a4b-86d3-ab541d8d8a5f"],
Cell[4558, 155, 111, 2, 44, "Input",ExpressionUUID->"7936401e-06c9-43c8-ab69-2a0a14242ee4"],
Cell[4672, 159, 115, 2, 44, "Input",ExpressionUUID->"f42a189b-1920-4398-827a-4fd9ce6be9d8"],
Cell[CellGroupData[{
Cell[4812, 165, 117, 2, 44, "Input",ExpressionUUID->"3beb4e44-2e34-4395-aece-59fb6856505c"],
Cell[4932, 169, 168, 3, 50, "Output",ExpressionUUID->"c04f56ab-0f1a-4a35-b14d-5bcd359d0caf"]
}, Open  ]],
Cell[5115, 175, 132, 2, 44, "Input",ExpressionUUID->"a91402bc-4d4b-45e2-a68a-842e81b1716a"]
}, Open  ]],
Cell[5262, 180, 259, 7, 116, "Text",ExpressionUUID->"18b7e7bb-9929-4006-b697-e41ae3925dfa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[5558, 192, 114, 2, 60, "Subsection",ExpressionUUID->"d3a73489-d0f9-4cf7-9703-e61c9e64400d"],
Cell[CellGroupData[{
Cell[5697, 198, 161, 2, 46, "Item",ExpressionUUID->"45d9ed3d-e548-4168-83e2-085036afa3a4"],
Cell[5861, 202, 138, 3, 44, "Input",ExpressionUUID->"7c265fec-2d3f-45e2-8a0a-025111f32e3f"],
Cell[6002, 207, 138, 3, 44, "Input",ExpressionUUID->"ce9bfc2b-0fdc-480c-973d-cd5639ab19a6"],
Cell[6143, 212, 156, 4, 44, "Input",ExpressionUUID->"d28aab2f-fea9-4886-8f84-77b3aa49ce69"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6336, 221, 140, 2, 46, "Item",ExpressionUUID->"18c3a64c-4b51-4b10-ba0d-dbc1f11a620b"],
Cell[6479, 225, 140, 3, 44, "Input",ExpressionUUID->"32763410-78d9-4bed-86a7-d187667760c0"],
Cell[6622, 230, 157, 4, 44, "Input",ExpressionUUID->"5198fcda-1061-4310-a891-dd0499bab4cc"],
Cell[6782, 236, 159, 4, 44, "Input",ExpressionUUID->"5fa6194e-a41b-4b5f-8882-5dd699eb0671"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6978, 245, 134, 2, 46, "Item",ExpressionUUID->"a848255b-751a-47d6-9f9e-b0baec95b545"],
Cell[7115, 249, 160, 4, 44, "Input",ExpressionUUID->"00b1d8dc-fa03-49f2-9268-fdae60dce261"],
Cell[7278, 255, 161, 4, 44, "Input",ExpressionUUID->"4598ea4e-8069-45d3-819b-632e673335d6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[7476, 264, 377, 13, 47, "Item",ExpressionUUID->"6d960057-9a52-4639-8b5c-d6d5d38e0da0"],
Cell[CellGroupData[{
Cell[7878, 281, 266, 7, 74, "Input",ExpressionUUID->"8dc9c5c5-def9-4209-bf1e-56eb0974419e"],
Cell[8147, 290, 168, 4, 50, "Output",ExpressionUUID->"68130d4a-ed63-42be-b355-160cb1942c40"],
Cell[8318, 296, 194, 4, 50, "Output",ExpressionUUID->"43d21e5f-ea36-47a2-8ca2-ca226d69b6fa"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8573, 307, 114, 2, 60, "Subsection",ExpressionUUID->"64eb39e5-0e72-4dda-9df8-2fccf23004a6"],
Cell[8690, 311, 142, 2, 50, "Text",ExpressionUUID->"826a9419-8f3b-4ce9-878b-ac2a07742333"],
Cell[CellGroupData[{
Cell[8857, 317, 161, 3, 44, "Input",ExpressionUUID->"3f83cad9-57e3-44f3-9a8d-d401e5fa09d1"],
Cell[9021, 322, 134, 2, 50, "Output",ExpressionUUID->"6a9eb3bb-322a-4b90-a1fd-56708706db54"]
}, Open  ]],
Cell[CellGroupData[{
Cell[9192, 329, 220, 7, 88, "Input",ExpressionUUID->"b3311f71-fa13-4f53-8aff-984e4aa00d3d"],
Cell[9415, 338, 265, 7, 50, "Output",ExpressionUUID->"b955d6b2-58bd-4d0a-8696-2502863198cf"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[9729, 351, 121, 2, 60, "Subsection",ExpressionUUID->"7172f126-734f-4c4a-95bb-5e3a7d7a533d"],
Cell[9853, 355, 225, 5, 50, "Text",ExpressionUUID->"ffc325fe-d2ee-4ca4-8a44-98c5f26e859c"],
Cell[10081, 362, 331, 7, 50, "Text",ExpressionUUID->"6574c708-6523-4c08-9c51-424cc06bd4de"],
Cell[10415, 371, 194, 5, 50, "Text",ExpressionUUID->"c4cee20a-df46-4a02-b2b9-b2aa36273e55"],
Cell[CellGroupData[{
Cell[10634, 380, 434, 12, 44, "Input",ExpressionUUID->"be61ab19-8641-43fc-9960-7f86dc7b54d3",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[11071, 394, 10008, 212, 232, "Output",ExpressionUUID->"c0fdc8c6-879a-4906-ad40-da74af7fa0ee",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[21082, 608, 224, 5, 44, "Input",ExpressionUUID->"549ff5ed-5ed1-4fde-a265-b7988b839de8",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}],
Cell[21309, 615, 169, 3, 50, "Output",ExpressionUUID->"3dad389f-0e96-4d2e-8640-37bea96c0f16",
 CellGroupingRules->{"GroupTogetherGrouping", 10000.}]
}, Open  ]],
Cell[21493, 621, 312, 7, 50, "Text",ExpressionUUID->"7158a1ae-791c-4602-890c-b2d7e969388b"],
Cell[21808, 630, 224, 5, 50, "Text",ExpressionUUID->"9ac217b7-6bc8-4c00-b72c-ddacb90b06b6"],
Cell[CellGroupData[{
Cell[22057, 639, 309, 7, 44, "Input",ExpressionUUID->"6fe381b6-7b61-46d3-a7ba-d32030ecb0a0",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[22369, 648, 12050, 191, 295, "Output",ExpressionUUID->"fa99da09-8a79-497a-b657-24904b1c43b8",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[34422, 841, 224, 5, 44, "Input",ExpressionUUID->"4114d174-99b0-4ed9-b771-dc03200a4935",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}],
Cell[34649, 848, 169, 3, 50, "Output",ExpressionUUID->"5cc5b78e-410e-4968-82c5-0b387925062f",
 CellGroupingRules->{"GroupTogetherGrouping", 10001.}]
}, Open  ]],
Cell[34833, 854, 319, 7, 50, "Text",ExpressionUUID->"919ddabf-b5e3-4343-a538-f6f22d4afbf0"],
Cell[35155, 863, 194, 5, 50, "Text",ExpressionUUID->"4f2e8cba-9801-4a44-a8e8-cd6b6b0d0da5"],
Cell[CellGroupData[{
Cell[35374, 872, 820, 21, 166, "Input",ExpressionUUID->"21be159c-11a4-4bb5-8188-eabba5929159"],
Cell[36197, 895, 26652, 481, 186, "Output",ExpressionUUID->"93f60ed5-cda7-4286-902d-fdf77ebeaf96"]
}, Open  ]],
Cell[CellGroupData[{
Cell[62886, 1381, 169, 4, 44, "Input",ExpressionUUID->"89a9f931-cedb-4392-87fb-1641658eff26"],
Cell[63058, 1387, 114, 2, 50, "Output",ExpressionUUID->"1a7b6790-2b67-4df6-83da-d4ea022a2f71"]
}, Open  ]],
Cell[63187, 1392, 178, 4, 50, "Text",ExpressionUUID->"6dcd4e35-a71d-4675-ad84-31e26a5baeac"],
Cell[63368, 1398, 17846, 332, 609, "Text",ExpressionUUID->"4bd932b8-1592-4d02-896c-48265c956141",
 CellTags->"CYU"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[81263, 1736, 95, 0, 136, "Section",ExpressionUUID->"364f933b-1c07-4bfe-90f9-eb25a968e700"],
Cell[81361, 1738, 162, 3, 50, "Text",ExpressionUUID->"f0736e29-b22c-4a4c-9924-6d7b37e21c3e"],
Cell[CellGroupData[{
Cell[81548, 1745, 222, 6, 44, "Input",ExpressionUUID->"5022985d-64fe-4c35-8e50-a0a3f224870d"],
Cell[81773, 1753, 8718, 189, 363, "Output",ExpressionUUID->"6d58e5e4-b975-43a4-828b-135dea1ffe10"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90528, 1947, 251, 7, 44, "Input",ExpressionUUID->"0af979db-c365-421c-aa7e-2a908be9dcef"],
Cell[90782, 1956, 133, 3, 65, "Output",ExpressionUUID->"1b34f2e9-bf3b-4996-9bbb-2ba7f2b53a00"]
}, Open  ]],
Cell[CellGroupData[{
Cell[90952, 1964, 258, 8, 60, "Input",ExpressionUUID->"a84d545e-89e9-407e-86a7-9365ad0b7884"],
Cell[91213, 1974, 230, 7, 64, "Output",ExpressionUUID->"a5d25df5-cfef-4b6a-9f07-6dc16ef65ae8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91480, 1986, 193, 4, 44, "Input",ExpressionUUID->"817dc10c-8d41-4f7b-b512-7231a9728f9c"],
Cell[91676, 1992, 128, 2, 50, "Output",ExpressionUUID->"1f6bd586-2bfd-40a1-8954-c2ea1f5be804"]
}, Open  ]],
Cell[CellGroupData[{
Cell[91841, 1999, 209, 5, 44, "Input",ExpressionUUID->"086769ec-ad6c-43b0-9940-64d7c092753a"],
Cell[92053, 2006, 305, 7, 57, "Output",ExpressionUUID->"f1c85d0b-d85f-42c9-8b5a-f4e16535c928"]
}, Open  ]],
Cell[92373, 2016, 275, 7, 44, "Input",ExpressionUUID->"29dd10c1-4155-4142-b42e-c32fd1de6223"],
Cell[92651, 2025, 286, 8, 44, "Input",ExpressionUUID->"19ebd3dd-a040-417b-960f-5a0402dd2133"],
Cell[CellGroupData[{
Cell[92962, 2037, 141, 3, 44, "Input",ExpressionUUID->"5b1a0823-e3ae-4935-906d-2651d3c2b7fd"],
Cell[93106, 2042, 142, 2, 50, "Output",ExpressionUUID->"7c19928c-897a-4c45-9903-8ec3114155e3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[93285, 2049, 125, 2, 60, "Subsection",ExpressionUUID->"59160431-5663-4051-97c6-b0328ffc8687"],
Cell[93413, 2053, 123, 0, 50, "Text",ExpressionUUID->"d9cd4fee-6da5-4292-b8b5-01d4444ed187"],
Cell[93539, 2055, 102, 0, 46, "Item",ExpressionUUID->"6eb9dd24-93bd-4e04-8773-61d2852c5a18"],
Cell[93644, 2057, 96, 0, 46, "Item",ExpressionUUID->"086531df-cc68-4625-bbba-cacdbb12052e"],
Cell[93743, 2059, 166, 3, 46, "Item",ExpressionUUID->"f66aed49-524f-43b4-86ca-a7cc7d484912"],
Cell[93912, 2064, 130, 0, 46, "Item",ExpressionUUID->"c4620073-510c-402f-b75f-3a47f9b1fd56"],
Cell[94045, 2066, 178, 3, 50, "Text",ExpressionUUID->"37921029-8b2f-4ba3-8d88-29c51e7c54df"],
Cell[94226, 2071, 17846, 332, 609, "Text",ExpressionUUID->"07cedee0-21f6-4eda-854b-a568ea2a338c",
 CellTags->"CYU"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[112121, 2409, 98, 0, 136, "Section",ExpressionUUID->"5e96b6b1-b725-4fae-ad5a-df05203e331a"],
Cell[CellGroupData[{
Cell[112244, 2413, 107, 0, 60, "Subsection",ExpressionUUID->"ec9595f0-f264-4789-ba20-698665b25447"],
Cell[112354, 2415, 120, 0, 50, "Text",ExpressionUUID->"1448195c-3677-4330-897d-88b5bd6a0658"],
Cell[112477, 2417, 298, 8, 72, "Program",ExpressionUUID->"62455ef9-ba9e-47e9-b944-4886225ded3e"],
Cell[CellGroupData[{
Cell[112800, 2429, 163, 4, 44, "Input",ExpressionUUID->"48b86960-918f-476a-82a8-1e3d7c4b749e"],
Cell[112966, 2435, 133, 3, 50, "Output",ExpressionUUID->"61f37b42-05c0-4a05-9984-c56e3781cee4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113136, 2443, 193, 4, 44, "Input",ExpressionUUID->"aa8d0abd-4c04-4579-8c74-00e4f1d37f1c"],
Cell[113332, 2449, 186, 4, 50, "Output",ExpressionUUID->"e60f9465-a10b-4ff5-ae3e-5aa073f25ccd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[113555, 2458, 222, 6, 44, "Input",ExpressionUUID->"4eecb259-ee2e-4ada-9a80-33eb8596f42d"],
Cell[113780, 2466, 8718, 189, 363, "Output",ExpressionUUID->"3634d99e-65c6-40c7-b166-82bf44c83f5c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122535, 2660, 227, 6, 44, "Input",ExpressionUUID->"80e7ff61-e9a3-4032-9835-b475a65e47bc"],
Cell[122765, 2668, 132, 3, 65, "Output",ExpressionUUID->"6719a07a-8343-4519-9930-d3a209851a1e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[122934, 2676, 258, 8, 60, "Input",ExpressionUUID->"7e1d7c7d-6e14-4523-8254-170512dc7e96"],
Cell[123195, 2686, 230, 7, 64, "Output",ExpressionUUID->"7889ee3c-7313-4853-b9fd-d56e1b86caf4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123462, 2698, 214, 5, 44, "Input",ExpressionUUID->"f870b549-cfaf-43ec-973c-96c364856a82"],
Cell[123679, 2705, 129, 2, 50, "Output",ExpressionUUID->"fd44c495-a6be-4515-896f-b4550466a6a3"]
}, Open  ]],
Cell[CellGroupData[{
Cell[123845, 2712, 320, 9, 44, "Input",ExpressionUUID->"c7a58984-5d45-480d-8705-4e70e845bec6"],
Cell[CellGroupData[{
Cell[124190, 2725, 133, 3, 34, "Print",ExpressionUUID->"94f7cd53-1e13-498a-869c-8c13be224d4f"],
Cell[124326, 2730, 133, 3, 34, "Print",ExpressionUUID->"469a5362-2ecd-44db-a960-171f109aff11"],
Cell[124462, 2735, 133, 3, 34, "Print",ExpressionUUID->"bc64eb58-4aa9-40f7-9fe8-b3f663af26c7"],
Cell[124598, 2740, 133, 3, 34, "Print",ExpressionUUID->"18d0b196-b6fb-4e07-8476-340df714dbaf"],
Cell[124734, 2745, 134, 3, 34, "Print",ExpressionUUID->"53d8fa97-394b-4248-a467-62c9cbfc3840"],
Cell[124871, 2750, 134, 3, 34, "Print",ExpressionUUID->"293ad2e6-1c45-403f-a69d-7aceb25cec0f"],
Cell[125008, 2755, 134, 3, 34, "Print",ExpressionUUID->"7d5af2a0-0f94-4865-9852-5931615db255"],
Cell[125145, 2760, 134, 3, 34, "Print",ExpressionUUID->"c3dd4c09-311a-43e3-b79c-bfc395c2cb22"],
Cell[125282, 2765, 134, 3, 34, "Print",ExpressionUUID->"6d9d14bd-d324-4536-9ca9-f9692e9d2862"],
Cell[125419, 2770, 134, 3, 34, "Print",ExpressionUUID->"04bb3a44-1d3d-4021-bc26-8d61a05a2cc0"],
Cell[125556, 2775, 135, 3, 34, "Print",ExpressionUUID->"4643a9df-531f-4976-985e-4c250c989b09"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[125752, 2785, 121, 0, 60, "Subsection",ExpressionUUID->"2971aec6-5d40-4925-aefd-8f54164f6c1f"],
Cell[125876, 2787, 446, 9, 83, "Text",ExpressionUUID->"2a5ef209-c783-4ac1-abeb-cba2255bd604"],
Cell[CellGroupData[{
Cell[126347, 2800, 132, 3, 44, "Input",ExpressionUUID->"f551a72c-a411-43ea-b23a-e6eba669debc"],
Cell[126482, 2805, 133, 3, 50, "Output",ExpressionUUID->"739da6ff-5c95-4871-b33e-972b695b7c26"]
}, Open  ]],
Cell[CellGroupData[{
Cell[126652, 2813, 163, 4, 44, "Input",ExpressionUUID->"ef4314b9-f61b-46ea-a1b9-67cdd3e2965e"],
Cell[126818, 2819, 301, 11, 70, "Output",ExpressionUUID->"e5b70689-1094-4a12-86d3-1259f810f602"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127156, 2835, 185, 4, 44, "Input",ExpressionUUID->"24dfc101-8b2e-4c2e-bee6-10351329ff93"],
Cell[127344, 2841, 186, 4, 50, "Output",ExpressionUUID->"e8348a69-eee9-4a1e-b26b-3a753bcc1e24"]
}, Open  ]],
Cell[CellGroupData[{
Cell[127567, 2850, 225, 6, 44, "Input",ExpressionUUID->"8e655a96-f3d9-4190-9410-a6e65fb9e53f"],
Cell[127795, 2858, 331, 11, 70, "Output",ExpressionUUID->"148e1b64-b11e-49c4-96a7-bfc9595211ff"]
}, Open  ]],
Cell[CellGroupData[{
Cell[128163, 2874, 281, 8, 44, "Input",ExpressionUUID->"b8e52b5a-84c9-4e98-84a2-e99ad6b28ad2"],
Cell[128447, 2884, 41262, 724, 345, "Output",ExpressionUUID->"63e12202-f19a-468e-9bbc-99bb04f77405"]
}, Open  ]],
Cell[CellGroupData[{
Cell[169746, 3613, 13272, 236, 89, "Input",ExpressionUUID->"f3ae469b-df3b-4b95-9bd3-d1113a6fde5c"],
Cell[183021, 3851, 93187, 1886, 13858, "Output",ExpressionUUID->"9a250998-b80f-432d-9e29-67f06b124b94"]
}, Open  ]],
Cell[276223, 5740, 267, 7, 44, "Input",ExpressionUUID->"4edc7ac2-a117-4dfc-a2e4-f9a13c575ce7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[276527, 5752, 123, 0, 60, "Subsection",ExpressionUUID->"9f9ef166-5a70-4f88-9ecf-40f10adf72e5"],
Cell[276653, 5754, 334, 8, 50, "Text",ExpressionUUID->"0e50e028-7961-4350-85b3-154a5737ade8"],
Cell[CellGroupData[{
Cell[277012, 5766, 233, 7, 44, "Input",ExpressionUUID->"4e3b81bb-bd6b-453b-ac4c-bdb8eecf0ce6"],
Cell[277248, 5775, 178, 5, 66, "Output",ExpressionUUID->"04a8d74e-e88d-47ca-ad8f-dc9804eacde5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[277463, 5785, 143, 3, 44, "Input",ExpressionUUID->"b4992ebe-b6df-44a0-ae49-3023dc113166"],
Cell[277609, 5790, 114, 2, 50, "Output",ExpressionUUID->"8d794bf2-ff45-4e27-9fa7-72f74a686566"]
}, Open  ]],
Cell[CellGroupData[{
Cell[277760, 5797, 147, 3, 44, "Input",ExpressionUUID->"f5b33a8e-c203-4b6b-bff4-f95f7a7275dc"],
Cell[277910, 5802, 533, 18, 70, "Output",ExpressionUUID->"dd7980a2-87ca-4881-b4fd-2405421ccaf6"]
}, Open  ]],
Cell[278458, 5823, 144, 2, 50, "Text",ExpressionUUID->"f629a3fe-8717-42d9-9ff4-63dd1f319b7b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[278639, 5830, 94, 0, 60, "Subsection",ExpressionUUID->"54b71a72-514b-4f73-8fb1-c868476fc554"],
Cell[278736, 5832, 202, 3, 83, "Text",ExpressionUUID->"2f30532e-b156-417b-8cf2-2d91d20d8eb7"],
Cell[CellGroupData[{
Cell[278963, 5839, 413, 13, 44, "Input",ExpressionUUID->"ce2df19f-381a-4347-852d-4b52127f664c"],
Cell[279379, 5854, 905, 29, 70, "Output",ExpressionUUID->"af2f8810-de6d-4458-b686-5cee50eef586"]
}, Open  ]],
Cell[280299, 5886, 141, 2, 50, "Text",ExpressionUUID->"acd48796-e44a-4f94-b71d-9fe3e5ffd4ef"],
Cell[CellGroupData[{
Cell[280465, 5892, 418, 13, 44, "Input",ExpressionUUID->"9d6b055e-65cc-4263-8694-b52cd5a8ebfc"],
Cell[280886, 5907, 12816, 349, 586, "Output",ExpressionUUID->"3933d767-5af8-4f71-bad2-5d0654c3027a"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[293751, 6262, 104, 0, 60, "Subsection",ExpressionUUID->"a6367f7a-24ac-4cbf-91d5-06f1f987366f"],
Cell[293858, 6264, 264, 4, 83, "Text",ExpressionUUID->"800c52fc-35a4-4216-980e-d7c04b953534"],
Cell[CellGroupData[{
Cell[294147, 6272, 385, 11, 44, "Input",ExpressionUUID->"de3c4cac-1b36-4e0b-8988-d13b54915e6e"],
Cell[294535, 6285, 349, 10, 50, "Output",ExpressionUUID->"ebe2dfe5-dbf4-4c9f-9eb7-00f3644ef004"]
}, Open  ]],
Cell[CellGroupData[{
Cell[294921, 6300, 212, 4, 74, "Input",ExpressionUUID->"93d7ceaf-90d0-4e73-b32d-d80a4d498e90"],
Cell[295136, 6306, 530, 17, 70, "Output",ExpressionUUID->"eb8fd6d8-f5ef-49a7-b145-f8ae83045b25"],
Cell[295669, 6325, 8476, 226, 358, "Output",ExpressionUUID->"8776d4d8-e074-4071-af37-f1c3ccefa59f"]
}, Open  ]],
Cell[304160, 6554, 327, 10, 44, "Input",ExpressionUUID->"60f6ee6e-047a-46bb-9e2c-5a59ac2ccdb4"],
Cell[304490, 6566, 1010, 23, 433, "Input",ExpressionUUID->"307f5b5e-3e71-44b2-bf47-45c1432f8bb0"],
Cell[CellGroupData[{
Cell[305525, 6593, 234, 5, 74, "Input",ExpressionUUID->"f679d436-8ef3-4fde-b991-e15bfd4e8c36"],
Cell[305762, 6600, 4022, 101, 346, "Output",ExpressionUUID->"339b8e4a-39e8-4bf7-8a22-94799fa60605"],
Cell[309787, 6703, 86578, 2270, 284, "Output",ExpressionUUID->"ce067248-182e-4080-aaa9-01248a30e40b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[396402, 8978, 169, 4, 44, "Input",ExpressionUUID->"bf10f728-617b-4fb5-9f0b-654b97d85669"],
Cell[396574, 8984, 305, 7, 59, "Output",ExpressionUUID->"20f8a640-f752-45a8-bb22-6e1819160a33"]
}, Open  ]],
Cell[CellGroupData[{
Cell[396916, 8996, 210, 4, 74, "Input",ExpressionUUID->"44b51297-7d26-4082-b06e-e2e233376f29"],
Cell[397129, 9002, 408, 13, 70, "Output",ExpressionUUID->"933bee3a-18b5-46dc-8aa0-9fc547c7d8f7"],
Cell[397540, 9017, 3467, 88, 275, "Output",ExpressionUUID->"42b09bc1-c348-4950-bca3-4cbbab17c840"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[401068, 9112, 105, 0, 136, "Section",ExpressionUUID->"bacbb3f3-56c5-476c-90bb-18cfff701a17"],
Cell[401176, 9114, 452, 9, 83, "Text",ExpressionUUID->"592264ca-fd05-4600-b569-086c20366ee2"],
Cell[401631, 9125, 111, 0, 50, "Text",ExpressionUUID->"9497d806-4e27-4c0e-b150-72f3653811f9"],
Cell[CellGroupData[{
Cell[401767, 9129, 369, 11, 44, "Input",ExpressionUUID->"805ae166-b17d-4f43-8759-bae68dbea3bd"],
Cell[402139, 9142, 682, 20, 52, "Output",ExpressionUUID->"6315ef96-81e0-4645-a9d6-1dc3798fc1dc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[402858, 9167, 147, 3, 44, "Input",ExpressionUUID->"150942ba-b271-49da-9ace-46aaa995b30c"],
Cell[403008, 9172, 1030, 31, 101, "Output",ExpressionUUID->"b3d0335d-c0da-495b-b01c-520d34e9192a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[404075, 9208, 166, 4, 44, "Input",ExpressionUUID->"e3db10e5-57a4-46cc-b273-fef56baec61e"],
Cell[404244, 9214, 267, 8, 52, "Output",ExpressionUUID->"1eea2fcf-244b-493d-8a9e-37d4c1808414"]
}, Open  ]],
Cell[404526, 9225, 125, 0, 50, "Text",ExpressionUUID->"c753b42d-8d15-4a8e-9fa9-0159434f382e"],
Cell[CellGroupData[{
Cell[404676, 9229, 163, 4, 44, "Input",ExpressionUUID->"19547473-d561-4d58-b68f-65c0548b6756"],
Cell[404842, 9235, 267, 8, 52, "Output",ExpressionUUID->"bb2ea363-9ca8-494c-a001-70b587a3621c"]
}, Open  ]],
Cell[405124, 9246, 157, 2, 50, "Text",ExpressionUUID->"4453368d-dec2-4c7b-a0c9-ac506d49d501"],
Cell[CellGroupData[{
Cell[405306, 9252, 187, 5, 44, "Input",ExpressionUUID->"929e770d-2915-4aad-83a9-26f68bf61081"],
Cell[405496, 9259, 111, 2, 50, "Output",ExpressionUUID->"90b0a687-2998-42d1-9c0a-8072c5eff5f0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[405644, 9266, 238, 7, 44, "Input",ExpressionUUID->"29be47a0-28e0-4814-ab07-3930758bfac5"],
Cell[405885, 9275, 308, 8, 50, "Output",ExpressionUUID->"2fc0f257-354d-47a1-ba9f-b80f9dc2471a"]
}, Open  ]],
Cell[406208, 9286, 148, 2, 50, "Text",ExpressionUUID->"ec4fd4ff-6d76-4899-bf4c-63d857ada2e2"],
Cell[CellGroupData[{
Cell[406381, 9292, 207, 6, 44, "Input",ExpressionUUID->"2a303c8c-4e37-4640-90cf-f437f8968603"],
Cell[406591, 9300, 178, 5, 66, "Output",ExpressionUUID->"e8a9b2cb-798f-4a37-993d-00099e80a742"]
}, Open  ]],
Cell[CellGroupData[{
Cell[406806, 9310, 147, 3, 44, "Input",ExpressionUUID->"0b1b5813-83d0-416c-90bb-4b450c2c76ae"],
Cell[406956, 9315, 464, 16, 70, "Output",ExpressionUUID->"597c00db-c1b9-41f5-8316-3eb16952223a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[407457, 9336, 163, 4, 44, "Input",ExpressionUUID->"800742c7-a8d9-4ce0-bbd0-d65bc3c615ad"],
Cell[407623, 9342, 154, 4, 66, "Output",ExpressionUUID->"1d64293a-c45f-4111-b3a4-625199eac96f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[407814, 9351, 187, 5, 44, "Input",ExpressionUUID->"c1a1af43-8c9b-488a-bcec-37536d351a35"],
Cell[408004, 9358, 131, 3, 65, "Output",ExpressionUUID->"e8db15c5-fb45-47d1-9ee8-313dd6fa189b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[408172, 9366, 187, 5, 44, "Input",ExpressionUUID->"15fdb294-7cf3-4c7a-b965-73b2ec590518"],
Cell[408362, 9373, 111, 2, 50, "Output",ExpressionUUID->"343f5b84-246e-4a7e-b8da-b9660c664d8b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[408510, 9380, 187, 5, 44, "Input",ExpressionUUID->"b76b7037-d5dc-4c49-8402-2923c815b01b"],
Cell[408700, 9387, 111, 2, 50, "Output",ExpressionUUID->"a34a879c-3ca2-4110-9d5f-0e57e8b61c99"]
}, Open  ]],
Cell[CellGroupData[{
Cell[408848, 9394, 238, 7, 44, "Input",ExpressionUUID->"8761e333-1157-4e9b-88c7-a3700ec32100"],
Cell[409089, 9403, 131, 3, 66, "Output",ExpressionUUID->"93fda23b-9550-4c46-a059-b4ce74b0a406"]
}, Open  ]],
Cell[409235, 9409, 16727, 327, 99, "Text",ExpressionUUID->"c5f4ba0e-d194-434b-bc2f-2ea27dd0aeef",
 CellTags->"CYU"]
}, Open  ]],
Cell[CellGroupData[{
Cell[425999, 9741, 84, 0, 136, "Section",ExpressionUUID->"d43a5ede-b42a-4d83-a919-1983efe1bf3a"],
Cell[426086, 9743, 339, 7, 46, "Item",ExpressionUUID->"e5e78013-117a-4f5e-81b6-eb711360d2ce"],
Cell[426428, 9752, 353, 7, 46, "Item",ExpressionUUID->"a01b5f3b-0221-411e-82a8-f8470480bf7b"],
Cell[426784, 9761, 349, 7, 46, "Item",ExpressionUUID->"14c8f4e0-52ac-4a6e-8bf8-5b90986e2479"]
}, Open  ]],
Cell[CellGroupData[{
Cell[427170, 9773, 83, 0, 136, "Section",ExpressionUUID->"d6918514-265c-4160-9ca6-cdf8ba6d56c7"],
Cell[427256, 9775, 607, 14, 83, "Text",ExpressionUUID->"3c83d4d4-9a77-4885-a68b-ff11d41f7639"],
Cell[427866, 9791, 307, 8, 44, "Input",ExpressionUUID->"e6f64e38-f368-4da3-a3a7-3167d66a5a37"],
Cell[428176, 9801, 155, 4, 46, "ItemNumbered",ExpressionUUID->"bd73ec34-940d-44be-9099-7f0d7cb48f81"],
Cell[428334, 9807, 1999, 45, 99, "Text",ExpressionUUID->"5a33d627-33bb-4c59-af4f-d5dbd4f9a096",
 CellTags->"CYU"],
Cell[430336, 9854, 1603, 38, 99, "Text",ExpressionUUID->"7b4a12d9-bca0-4c17-843c-a15e2f058dc3",
 CellTags->"CYU"],
Cell[431942, 9894, 132, 0, 46, "ItemNumbered",ExpressionUUID->"e14b8da5-5ae5-4f5c-b5a2-a8b8a2c7d6df"],
Cell[432077, 9896, 1975, 45, 99, "Text",ExpressionUUID->"d5d06b0a-81a7-46e7-92ed-1ea4c4abdf98",
 CellTags->"CYU"],
Cell[434055, 9943, 1604, 38, 99, "Text",ExpressionUUID->"de5fed75-e0fe-4d96-a158-24986edaee1d",
 CellTags->"CYU"],
Cell[CellGroupData[{
Cell[435684, 9985, 195, 3, 46, "ItemNumbered",ExpressionUUID->"0965e990-8625-402f-9d30-fe3f95ef0bb9"],
Cell[435882, 9990, 249, 7, 44, "Input",ExpressionUUID->"393bff40-4808-4766-af72-8c77a951cd46"],
Cell[436134, 9999, 229, 3, 65, "ItemParagraph",ExpressionUUID->"02d7cfaa-4a95-410e-b6b4-103f5947c4af"]
}, Open  ]],
Cell[436378, 10005, 1996, 46, 99, "Text",ExpressionUUID->"9fb2a8fe-3503-4e27-a495-fba1293c4cc1",
 CellTags->"CYU"],
Cell[438377, 10053, 2155, 54, 99, "Text",ExpressionUUID->"565203c5-cd28-461b-9707-4084cf819118",
 CellTags->"CYU"],
Cell[440535, 10109, 280, 5, 76, "ItemNumbered",ExpressionUUID->"379582cb-ea7b-4d8f-ba85-abe36edfea6b"],
Cell[440818, 10116, 20057, 336, 259, "Text",ExpressionUUID->"dccd2e67-b677-451b-bcde-5caeffb70a8e"],
Cell[460878, 10454, 365, 5, 116, "Text",ExpressionUUID->"1f920b59-a479-4df5-95cb-03cfae45093d"],
Cell[461246, 10461, 476, 16, 49, "Text",ExpressionUUID->"329cf67e-8b49-4ff0-b64a-03786b8ce697"],
Cell[461725, 10479, 2373, 53, 99, "Text",ExpressionUUID->"c1b4bc11-1f3d-4c32-98e6-12d91ea0a6ee",
 CellTags->"CYU"],
Cell[464101, 10534, 2559, 60, 99, "Text",ExpressionUUID->"18b1405c-6023-4f7f-ade2-61a07c4e77a2",
 CellTags->"CYU"],
Cell[466663, 10596, 157, 2, 46, "ItemNumbered",ExpressionUUID->"d081c887-ec4e-43c9-aff1-7e7eb6868cea"],
Cell[466823, 10600, 2199, 50, 99, "Text",ExpressionUUID->"5aa3569d-d91a-439c-87dd-09797327dc10",
 CellTags->"CYU"],
Cell[469025, 10652, 2628, 67, 99, "Text",ExpressionUUID->"153eee61-bf9c-43cc-91e7-772ae2f85b1b",
 CellTags->"CYU"],
Cell[471656, 10721, 165, 2, 46, "ItemNumbered",ExpressionUUID->"c9d753be-ff5f-45e2-8bd8-a5da5a64d4a3"],
Cell[471824, 10725, 2356, 53, 136, "Text",ExpressionUUID->"790598e7-c531-42f8-9df4-aa0c8adad9b1",
 CellTags->"CYU"],
Cell[474183, 10780, 7171, 148, 289, "Text",ExpressionUUID->"83e90a1a-874b-4861-b9e6-1608d3e805ad",
 CellTags->"CYU"],
Cell[481357, 10930, 201132, 3692, 89, "Output",ExpressionUUID->"e5bee79d-d48b-4915-b8b8-b049a9a16bdc"]
}, Open  ]]
}, Open  ]]
}
]
*)

